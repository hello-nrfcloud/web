{
  "xsmma": {
    "title": "Short message memory available %XSMMA",
    "shortDesc": "The Nordic-proprietary `%XSMMA` command sends an RP-SMMA message.",
    "versions": ["v1.0.x", "v1.1.x", "v1.2.x", "v1.3.x"],
    "subCommands": {
      "set": {
        "title": "Set command",
        "shortDesc": "The set command sends an RP-SMMA message.",
        "ref": "The command is a trigger for the RP-SMMA message on the SMS stack to indicate to the Service Center that the User Equipment (UE) has memory available and can receive mobile-terminated short messages. The client can set a memory full situation preventing         incoming SMS messages by acking a mobile-terminated short message with           `AT+CNMA=2` (the Protocol Data Unit (PDU) parameter has to contain cause code 22 &quot;Memory capacity exceeded&quot;). Cause 300 is returned for all failures.Syntax\n\n```\n%XSMMA\n```\n\nThe following command example triggers sending the RP-SMMA on the SMS layer to release a memory full situation and to receive a response:\n\n```\nAT%XSMMA OK\n```\n\n"
      }
    }
  },
  "text_mode": {
    "title": "SMS commands",
    "shortDesc": "For reference, see *3GPP 27.005 Ch. 3*.",
    "versions": [],
    "subCommands": {}
  },
  "cpms": {
    "title": "Preferred message storage +CPMS",
    "shortDesc": "The `+CPMS` command selects the memory storage.",
    "versions": ["v1.0.x", "v1.1.x", "v1.2.x", "v1.3.x"],
    "subCommands": {
      "read": {
        "title": "Read command",
        "shortDesc": "The read command is used to query memory status.",
        "ref": "Response syntax:\n\n```\n+CPMS: <mem1>,<used1>,<total1>,<mem2>,<used2>,<total2>,<mem3>,<used3>,<total3>\n```\n\nThe read command parameters and their defined values are the following:\n\n - &lt;mem1&gt;\n   - \n - &lt;mem2&gt;\n   - \n - &lt;mem3&gt;\n   - \n - &lt;usedx&gt;\n   - \n - &lt;totalx&gt;\n   - \n\n\nThe following command example reads the memory storage configurations:\n\n```\nAT+CPMS? +CPMS: \"MT\",0,0,\"MT\",0,0,\"MT\",0,0 OK\n```\n\n"
      },
      "set": {
        "title": "Set command",
        "shortDesc": "The set command sets the used memory.",
        "ref": "\n\n> *Note:*\n> The modem does not support SMS memory, only direct routing to Terminal Equipment (TE).\n\nSyntax:\n\n```\n+CPMS=<mem1>[,<mem2>[,<mem3>]]\n```\n\nResponse syntax:\n\n```\n+CPMS: <used1>,<total1>,<used2>,<total2>,<used3>,<total3>\n```\n\nThe set command parameters and their defined values are the following:\n\n - &lt;mem1&gt;\n   - &quot;MT&quot; – Refers to all message storage areas associated with the modem\n - &lt;mem2&gt;\n   - \n - &lt;mem3&gt;\n   - \n - &lt;usedx&gt;\n   - Integer. The number of messages currently in `<memx>`.\n - &lt;totalx&gt;\n   - \n\n\nThe following command example configures the used memory storages:\n\n```\nAT+CPMS=\"MT\",\"MT\",\"MT\" +CPMS: 0,0,0,0,0,0 OK\n```\n\n"
      }
    }
  },
  "cnmi": {
    "title": "New message indications +CNMI",
    "shortDesc": "The `+CNMI` command subscribes and configures new message indications.",
    "versions": ["v1.0.x", "v1.1.x", "v1.2.x", "v1.3.x"],
    "subCommands": {
      "set": {
        "title": "Set command",
        "shortDesc": "The set command registers or unregisters an SMS client. Only one AT client can be registered as an SMS client. An existing registration must be released before registering a new     client.",
        "ref": "Syntax:\n\n```\n+CNMI=[<mode>[,<mt>[,<bm>[,<ds>]]]]\n```\n\nThe set command parameters and their defined values are the following:\n\n - &lt;mode&gt;\n   - 0 – Unsubscribe unsolicited result codes.\n   - 3 – Subscribe unsolicited result codes.\n - &lt;mt&gt;\n   - 0 – No received message notifications, the modem acts as an SMS client. Forces also `<ds>` to 0.\n   - 2 – SMS-DELIVERs (except class 2 and message waiting indication group) are routed directly to the TE using unsolicited result code `+CMT: [<alpha>],<length><CR><LF><pdu>`. TE needs to ACK with [`+CNMA`](cnma.dita#cnma).\n - &lt;bm&gt;\n   - Ignored\n - &lt;ds&gt;\n   - 0 – No SMS-STATUS-REPORTs are routed to the TE. The only option if `<mt>` is set to 0.\n   - 1 – SMS-STATUS-REPORTs are routed to the TE using unsolicited result code: `+CDS: <length><CR><LF><pdu>`. TE needs to ACK with `+CNMA`.\n\n\nThe TE needs to handle both SMS-DELIVER and SMS-STATUS-REPORT or neither of them, `<mt>` and `<ds>` shall both be set to 0 at the same time, equals to `<mode>` 0.The following command example registers as a client for mobile-terminated SMS and status reports:\n\n```\nAT+CNMI=3,2,0,1 OK\n```\n\n"
      },
      "read": {
        "title": "Read command",
        "shortDesc": "The read command is used to query how new messages are indicated.",
        "ref": "Response syntax:\n\n```\n+CNMI: <mode>,<mt>,<bm>,<ds>,<bfr>\n```\n\nThe read command parameters and their defined values are the following:\n\n - &lt;mode&gt;\n   - 0 – Do not forward unsolicited result codes to the Terminal Equipment (TE) (default)\n   - 3 – Forward unsolicited result codes directly to the TE\n - &lt;mt&gt;\n   - 0 – No received message notifications, the modem acts as an SMS client\n   - 2 – SMS-DELIVERs (except class 2 and message waiting indication group) are routed directly to the TE\n - &lt;bm&gt;\n   - No CBM notifications are routed to the TE\n - &lt;ds&gt;\n   - 0 – No SMS-STATUS-REPORTs are routed to the TE\n   - 1 – SMS-STATUS-REPORTs are routed to the TE using unsolicited result code: `+CDS: <length><CR><LF><pdu>`\n - &lt;bfr&gt;\n   - 1 – The buffer of unsolicited result codes is cleared when `<mode>` 1 to 3 is entered\n\n\nThe following command example reads the configuration of how new messages are indicated:\n\n```\nAT+CNMI? +CNMI: 3,2,0,1,1 OK\n```\n\n"
      }
    }
  },
  "cnma": {
    "title": "New message ACK, PDU mode +CNMA",
    "shortDesc": "The `+CNMA` command sends an ACK in Protocol Data Unit (PDU) mode.",
    "versions": ["v1.0.x", "v1.1.x", "v1.2.x", "v1.3.x"],
    "subCommands": {
      "test": {
        "title": "Test command",
        "shortDesc": "The test command lists supported `<n>`s.",
        "ref": "Response syntax:\n\n```\n+CNMA: (list of supported <n>s)\n```\n\nThe test command parameter and its defined values are the following:\n\n - &lt;n&gt;\n   - 0 – The command operates in the same way as defined for the text mode\n   - 1 – Send RP-ACK\n   - 2 – Send RP-ERROR\n\n\nThe following command example lists the supported delivery statuses:\n\n```\nAT+CNMA=? +CNMA: (0-2) OK\n```\n\n"
      },
      "set": {
        "title": "Set command",
        "shortDesc": "The set command sends a new message or delivery status ACK. A client receiving unsolicited notifications for new messages and delivery status is mandated to acknowledge those.     This command can be used only when the modem is activated.",
        "ref": "\n\n> *Note:*\n> \n> \n>  - This command can be issued only by a client registered with the [`+CNMI`](cnmi.dita#cnmi) command.\n>  - After sending cause 22, the [`%XSMMA`](xsmma.dita#xsmma) command needs to be used when memory is available.\n> \n> \n> \n\nIf the User Equipment (UE) does not get an acknowledgement within the required time (network timeout), it should respond as specified in* 3GPP TS 24.011*, and UE/Terminal Adapter (TA) shall automatically disable routing to the Terminal Equipment (TE) by setting both` <mt>` and `<ds>` values of `+CNMI` to zero, that is, the SMS client gets unregistered. In that case, the Mobile Equipment (ME) informs the TE client with a `CMS ERROR: 524` notification.Syntax:\n\n```\n+CNMA[=<n>[,<length>[<CR>PDU is given<ctrl-Z/ESC>]]]\n```\n\nThe set command parameters and their defined values are the following:\n\n - &lt;n&gt;\n   - 0 – The command operates in the same way as defined for the text mode, see [](cnma_text.dita)\n   - 1 – Send RP-ACK\n   - 2 – Send RP-ERROR\n - &lt;length&gt;\n   - \n - &lt;pdu&gt;\n   - Hexadecimal numbers containing two International Reference Alphabet (IRA) characters per octet.\n\n\nThe following command example confirms the reception of a message, timestamp 06/11/2071       13:26:31:\n\n```\nAT+CNMA=1,9<CR>010017116031621300<ctrl-z> OK\n```\n\n"
      }
    }
  },
  "cmgs": {
    "title": "Send message, PDU mode +CMGS",
    "shortDesc": "The `+CMGS` command sends a message in Protocol Data Unit (PDU) mode.",
    "versions": ["v1.0.x", "v1.1.x", "v1.2.x", "v1.3.x"],
    "subCommands": {}
  },
  "cmgf": {
    "title": "Message format +CMGF",
    "shortDesc": "The `+CMGF` command sets message format.",
    "versions": ["v1.0.x", "v1.1.x", "v1.2.x", "v1.3.x"],
    "subCommands": {
      "test": {
        "title": "Test command",
        "shortDesc": "The test command lists the supported message formats.",
        "ref": "Response syntax:\n\n```\n+CMGF: (list of <mode>s)\n```\n\nThe test command parameter and its defined value are the following:\n\n - \n   - \n\n\nThe following command example lists the supported message formats:\n\n```\nAT+CMGF=? +CMGF: (0) OK\n```\n\n"
      },
      "set": {
        "title": "Set command",
        "shortDesc": "The set command selects between Protocol Data Unit (PDU) and text format",
        "ref": "\n\n> *Note:*\n> This command can be issued only by a client registered with `+CNMI`.\n\nSyntax:\n\n```\n+CMGF=[<mode>]\n```\n\nThe set command parameter and its defined value are the following:\n\n - &lt;mode&gt;\n   - 0 – PDU mode, default value\n<!-- <pd>1 – Text mode</pd> -->\n\nThe following command example sets the message format to PDU mode:\n\n```\nAT+CMFG=0 OK\n```\n\n"
      },
      "read": {
        "title": "Read command",
        "shortDesc": "The read command is used to query the current message format.",
        "ref": "Response syntax:\n\n```\n+CMGF: <mode>\n```\n\nThe read command parameter and its defined value are the following:\n\n - &lt;mode&gt;\n   - 0 – Protocol Data Unit (PDU) mode\n<!-- <pd>1 – Text mode</pd> -->\n\nThe following command example reads the current message format:\n\n```\nAT+CMGF? +CMGF: 0 OK\n```\n\n"
      }
    }
  },
  "cgsms": {
    "title": "SMS service +CGSMS",
    "shortDesc": "The `+CGSMS` command selects the SMS service.",
    "versions": ["v1.0.x", "v1.1.x", "v1.2.x", "v1.3.x"],
    "subCommands": {
      "test": {
        "title": "Test command",
        "shortDesc": "The test command lists the supported SMS services.",
        "ref": "Response syntax:\n\n```\n+CGSMS: (list of currently available <service>s)\n```\n\nThe test command parameter and its defined value are the following:\n\n - &lt;service&gt;\n   - 1 – Circuit-switched\n\n\nThe following command example lists the supported SMS services:\n\n```\nAT+CGSMS=? +CGSMS: (1) OK\n```\n\n"
      },
      "set": {
        "title": "Set command",
        "shortDesc": "The set command selects the SMS service.",
        "ref": "Syntax:\n\n```\n+CGSMS=[<service>]\n```\n\nThe set command parameter and its defined value are the following:\n\n - &lt;service&gt;\n   - 1 – Circuit-switched\n\n\n\n\n> *Note:*\n> In a failure case, the command response is `ERROR` or `+CME ERROR`.\n\nThe following command example selects the circuit-switched SMS service:\n\n```\nAT+CGSMS=1 OK\n```\n\n"
      },
      "read": {
        "title": "Read command",
        "shortDesc": "The read command reads the current SMS service.",
        "ref": "Response syntax:\n\n```\n+CGSMS: <service>\n```\n\nThe read command parameter and its defined value are the following:\n\n - &lt;service&gt;\n   - 1 – Circuit-switched\n\n\nThe following command example reads the current SMS service:\n\n```\nAT+CGSMS? +CGSMS: 1 OK\n```\n\n"
      }
    }
  },
  "xmipirffedev": {
    "title": "SiP-external MIPI RFFE device introduction %XMIPIRFFEDEV",
    "shortDesc": "The Nordic-proprietary `%XMIPIRFFEDEV` command introduces the device and its static parameters to the nRF9160 System in Package (SiP). ",
    "versions": ["v1.0.x", "v1.1.x", "v1.2.x", "v1.3.x", "pti_v1.1.x≥1"],
    "subCommands": {
      "set": {
        "title": "Set command",
        "shortDesc": "The set command writes the `%XMIPIRFFEDEV` configuration to nRF9160 RAM memory.",
        "ref": "The command configuration is stored to Non-volatile Memory (NVM) approximately every 48 hours and when the modem is powered off with the `+CFUN=0` command. The configuration can be stored to NVM with the [`%XFSSYNC`](../production_test/xfssync.dita#xfssync) command when the Production Test Image (PTI) modem firmware is used. The stored configuration is applied when any modem or Global Navigation Satellite System (GNSS) RF activity occurs.Active `%XPOFWARN` warning blocks the storing to NVM.Syntax:\n\n```\n%XMIPIRFFEDEV=<dev_id>,<def_usid>,<prod_id>,<man_id>,<pm_trig>\n```\n\nThe set command parameters and their defined values are the following:\n\n - &lt;dev_id&gt;\n   - Selectable identification number for the device. Non-zero. Valid range 1–255. The given `<dev_id>` is used with the [`%XMIPIRFFECTRL`](xmipirffectrl.dita#xmipirffectrl) and [`%XMIPIRFFEDBG`](../production_test/xmipirffedbg.dita#xmipirffedbg) commands.\n - &lt;def_usid&gt;\n   - A 4-bit default Unique Slave Identifier (USID) for the MIPI RF Front-End Control Interface (RFFE) device. Typically, 7 for antenna tuners (as suggested by MIPI).\n - &lt;prod_id&gt;\n   - An 8-bit PRODUCT_ID of the MIPI RFFE device. Only used if automatic reprogramming of the USID is needed. EXT_PRODUCT_ID is not supported.\n - &lt;man_id&gt;\n   - A 10-bit MANUFACTURER_ID of the MIPI RFFE device. Only used if automatic reprogramming of the USID is needed.\n - &lt;pm_trig&gt;\n   - An 8-bit content for PM_TRIG (address 0x1C = 28 dec) register. This is for setting the default power and triggering mode. Note that the setting of PM_TRIG can be also changed             in the ON phase. See [`%XMIPIRFFECTRL`](xmipirffectrl.dita#xmipirffectrl).\n\n\nAll numbers should be given as decimals, that is, not as hexadecimals. Currently, nRF9160 supports only one System in Package (SiP)-external MIPI RFFE-controlled device."
      },
      "read": {
        "title": "Read command",
        "shortDesc": "The read command returns the introductory information given for a device using the `%XMIPIRFFEDEV` command and the phase-specific configurations given in the [`%XMIPIRFFECTRL`](xmipirffectrl.dita#xmipirffectrl) command. There is no dedicated read command for `%XMIPIRFFECTRL`.",
        "ref": "Response syntax: \n\n```\n%XMIPIRFFEDEV? %XMIPIRFFEDEV: <dev_id>,<def_usid>,<prod_id>,<man_id>,<pm_trig> INIT: ON:  OFF:  PWROFF:  OK\n```\n\nThe read response parameters and their descriptions for the “%XMIPIRFFEDEV” row are as defined in [](xmipirffedev_set.dita#xmipirffedev_set) if a valid `%XMIPIRFFEDEV` command has been given earlier. Otherwise, the row is empty. The phase-specific rows that follow (INIT, ON, OFF, PWROFF) contain the parameters         given for that phase or they are empty.In the following command example, the following commands have been given:\n\n```\nAT%XMIPIRFFEDEV=1,7,171,331,184 OK AT%XMIPIRFFECTRL= 1,1,1,28,56,6,1,2,2,3,750,3,8,850,18,9,1000,20,12,1700,35,19,1900,37, 25,2200 OK\n```\n\nIn the following command example, the read command returns:\n\n```\nAT%XMIPIRFFEDEV? %XMIPIRFFEDEV: 1,7,171,331,184 INIT: ON: 1,1,1,28,56,6,1,2,2,3,750,3,8,850,18,9,1000,20,12,1700,35,19,1900,37,25,2200 OFF:  PWROFF:  OK \n```\n\n"
      }
    }
  },
  "xmipirffectrl": {
    "title": "SiP-external MIPI RFFE device control configuration %XMIPIRFFECTRL",
    "shortDesc": "The Nordic-proprietary `%XMIPIRFFECTRL` command is used to configure the System in Package (SiP)-external MIPI RF Front-End Control Interface (RFFE) device register accesses in different phases of modem operation.       ",
    "versions": ["v1.0.x", "v1.1.x", "v1.2.x", "v1.3.x", "pti_v1.1.x≥1"],
    "subCommands": {
      "set": {
        "title": "Set commandRFFE device control and timing in different phases",
        "shortDesc": "The set command writes the `%XMIPIRFFECTRL` configuration to the nRF9160 RAM memory. ",
        "ref": "The command configuration is stored to Non-volatile Memory (NVM) approximately every 48 hours and when the modem is powered off with the `+CFUN=0` command. The configuration can be stored to NVM with the [`%XFSSYNC`](../production_test/xfssync.dita#xfssync) command when the Production Test Image (PTI) modem firmware is used.Active `%XPOFWARN` warning blocks the storing to NVM.The command is given separately for each phase. It is not necessary to send the command for each phase, which         means it is possible to configure only one         phase.Syntax:\n\n```\n%XMIPIRFFECTRL=<dev_id>,<phase#>,<variable_number_of_phase_specific_parameters>\n```\n\nThe set command parameters and their defined values are the following:\n\n - &lt;dev_id&gt;\n   - The identification number of the MIPI RF Front-End Control Interface (RFFE) device given when it was introduced using the [`%XMIPIRFFEDEV`](xmipirffedev.dita#xmipirffedev) command.\n - &lt;phase#&gt;\n   - Number of the phase INIT = 0, ON = 1, OFF = 2, PWR_OFF = 3. All numbers must be given as decimals (hexadecimals are not allowed).\n\n\n<!--  <p>Syntax for each use case:</p>\n      <dl>\n        <dlentry>\n          <dt>INIT (0), OFF (2), and PWROFF (3)</dt>\n          <dd><codeblock>AT%XMIPIRFFECTRL=&lt;dev_id>,0,&lt;n>,&lt;address_0>,&lt;data_0>,…,&lt;address_n-1>,&lt;data_n-1></codeblock>\n            or</dd>\n          <dd>\n            <codeblock>AT%XMIPIRFFECTRL=&lt;dev_id>,2,&lt;n>,&lt;address_0>,&lt;data_0>,…,&lt;address_n-1>,&lt;data_n-1>   </codeblock>\n          </dd>\n          <dd> or\n            <codeblock>AT%XMIPIRFFECTRL=&lt;dev_id>,3,&lt;n>,&lt;address_0>,&lt;data_0>,…,&lt;address_n-1>,&lt;data_n-1></codeblock></dd>\n        </dlentry>\n      </dl>\n      <p>The parameters and their defined values are the following:</p>\n      <parml>\n        <plentry>\n          <pt>&lt;n></pt>\n          <pd>The number of address/data pairs. Valid values are 0, 1, 2, 3, 4. If the value is 0,\n            all the following fields must be omitted.</pd>\n        </plentry>\n        <plentry>\n          <pt>&lt;address_x></pt>\n          <pd>The 8-bit address of the internal register in MIPI RFFE device. x = 0, ...,\n            n−1.</pd>\n        </plentry>\n        <plentry>\n          <pt>&lt;data_x></pt>\n          <pd>The 8-bit data to be written to <parmname>&lt;address_x></parmname>. x = 0, ...,\n            n−1.</pd>\n        </plentry>\n      </parml>\n      <dl>\n        <dlentry>\n          <dt>ON (1)</dt>\n          <dd>\n            <codeblock>AT%XMIPIRFFECTRL=&lt;dev_id>,1,n,&lt;act_addr_0>&lt;act_data_0>&lt;act_addr_n-1>&lt;act_data_n-1>&lt;k>,\n&lt;addr_0>,&lt;addr_1>,&lt;data_0_0>&lt;data_1_0>,&lt;freq_0>,...,&lt;data_0_k-1>&lt;data_1_k-1>&lt;freq_k-1></codeblock>\n          </dd>\n        </dlentry>\n      </dl>\n      <p>The parameters and their defined values are the following:</p>\n      <parml>\n        <plentry>\n          <pt>&lt;n></pt>\n          <pd>The number of activation register address-data pairs. Valid values are 0, 1, 2. If n =\n            0, act_addr_0/1 and act_data_0/1 must be omitted.</pd>\n        </plentry>\n        <plentry>\n          <pt>&lt;act_addr_x></pt>\n          <pd>Optional 8-bit address of the first register whose value is set to, for example, activate\n            device. This is written each time RF starts.</pd>\n        </plentry>\n        <plentry>\n          <pt>&lt;act_data_x></pt>\n          <pd>Optional 8-bit data for the register in &lt;act_addr_x>.</pd>\n        </plentry>\n        <plentry>\n          <pt>&lt;k></pt>\n          <pd>The number of frequencies in the configuration. Valid values are 0−64. If k = 0, all\n            the following fields must be omitted. </pd>\n        </plentry>\n        <plentry>\n          <pt>&lt;addr_0></pt>\n          <pd>The 8-bit address of the first register, whose value is changed on the basis of RF\n            frequency.</pd>\n        </plentry>\n        <plentry>\n          <pt>&lt;addr_1></pt>\n          <pd>The 8-bit address of the other register, whose value is changed on the basis of RF\n            frequency. If <parmname>addr_1</parmname> == <parmname>addr_0</parmname>, then only\n              <parmname>&lt;data_0_x></parmname> is written.</pd>\n        </plentry>\n        <plentry>\n          <pt>&lt;data_0_y></pt>\n          <pd>The 8-bit data for the register in <parmname>&lt;addr_0></parmname>, if frequency\n            is smaller than or equal to<parmname> &lt;freq_y></parmname>. </pd>\n        </plentry>\n        <plentry>\n          <pt>&lt;data_1_y></pt>\n          <pd>The 8-bit data for the register in <parmname>&lt;addr_1></parmname>, if frequency\n            is smaller than or equal to<parmname> &lt;freq_y></parmname>. Note that\n              <parmname>data_1_y</parmname> must be given (for example, as 0) even if<parmname>\n              addr_1</parmname> == <parmname>addr_0</parmname>.</pd>\n        </plentry>\n        <plentry>\n          <pt>&lt;freq_y></pt>\n          <pd>The frequency in MHz (integer), to which the current RF frequency is compared. If\n            current RF frequency is smaller than or equal to <parmname>&lt;freq_y></parmname>, then\n              <parmname>&lt;data_0_y></parmname> is written to <parmname>&lt;addr_0></parmname> and\n              <parmname>&lt;data_1_y></parmname> is written to <parmname>&lt;addr_1></parmname>.\n            Note that if the RF frequency is greater than <parmname>&lt;freq_k−1></parmname> (the\n            last given frequency), then neither <parmname>&lt;addr_0></parmname> nor\n              <parmname>&lt;addr_1></parmname> is written.</pd>\n        </plentry>\n      </parml>\n      <p>The following command example configures the INIT use case of &lt;dev_id> = 1 to write value 184 =\n        0xB8 to register address 28 = 0x1C, and value 0 to register address 0:</p>\n      <codeblock>AT%XMIPIRFFECTRL=1,0,2,24,184,0,0</codeblock>\n      <p>The command below configures the ON use case of &lt;dev_id> = 1 to write activation value\n        56 to register 24 (&lt;n> = 1): </p>\n      <codeblock>AT%XMIPIRFFECTRL=1,1,1,24,56,6,1,2,2,3,750,3,8,850,18,9,1000,20,12,1700,35,19,1900,37,25,2200</codeblock>\n      <p>The command also configures the following frequency table (&lt;k> = 6): </p>\n      <table frame=\"all\" colsep=\"1\" id=\"table_cff_mlx_yhb\">\n        <title>Example frequency dependency table for the values for registers &lt;addr_0> and\n          &lt;addr_1></title>\n        <tgroup cols=\"4\">\n          <colspec colname=\"c1\" colnum=\"1\" colwidth=\"1*\"/>\n          <colspec colname=\"c2\" colnum=\"2\" colwidth=\"1*\"/>\n          <colspec colname=\"c3\" colnum=\"3\" colwidth=\"1*\"/>\n          <colspec colname=\"c4\" colnum=\"4\" colwidth=\"1*\"/>\n          <thead>\n            <row>\n              <entry>freq (addr)</entry>\n              <entry>data_0 (addr_0 = 1)</entry>\n              <entry>data_1 (addr_1 = 2)</entry>\n              <entry>Note</entry>\n            </row>\n          </thead>\n          <tbody>\n            <row>\n              <entry>750</entry>\n              <entry>2</entry>\n              <entry>3</entry>\n              <entry>Used when RF frequency ≤ 750</entry>\n            </row>\n            <row>\n              <entry>850</entry>\n              <entry>3</entry>\n              <entry>8</entry>\n              <entry>Used when RF frequency  > 750 and ≤ 850</entry>\n            </row>\n            <row>\n              <entry>1000</entry>\n              <entry>18</entry>\n              <entry>9</entry>\n              <entry>Used when RF frequency > 850 and ≤ 1000</entry>\n            </row>\n            <row>\n              <entry>1700</entry>\n              <entry>20</entry>\n              <entry>12</entry>\n              <entry>Used when RF frequency > 1000 and ≤ 1700</entry>\n            </row>\n            <row>\n              <entry>1900</entry>\n              <entry>35</entry>\n              <entry>19</entry>\n              <entry>Used when RF frequency > 1700 and ≤ 1900</entry>\n            </row>\n            <row>\n              <entry>2200</entry>\n              <entry>37</entry>\n              <entry>25</entry>\n              <entry>Used when RF frequency > 1900 and ≤ 2200</entry>\n            </row>\n          </tbody>\n        </tgroup>\n      </table> -->The following figure illustrates the RFFE device control in different phases:In the figure, PAC/Switch refers to a register in an example antenna tuner that controls the tunable capacitors and/or       switches.<!--  <p>The following example configures the example antenna tuner device to low power mode at OFF\n        use case by writing register 24 with value 184:</p>\n      <codeblock>AT%XMIPIRFFECTRL=1,2,1,24,184</codeblock> -->"
      }
    }
  },
  "xmagpio": {
    "title": "MAGPIO configuration %XMAGPIO",
    "shortDesc": "The Nordic-proprietary `%XMAGPIO` command writes the MAGPIO configuration to device&apos;s RAM       memory.",
    "versions": ["v1.0.x", "v1.1.x", "v1.2.x", "v1.3.x", "pti_v1.1.x≥1"],
    "subCommands": {
      "set": {
        "title": "Set commandExample configuration for an antenna tuner",
        "shortDesc": "The set command writes the MAGPIO configuration to device&apos;s RAM memory.",
        "ref": "The command configuration is stored to Non-volatile Memory (NVM) approximately every 48 hours and when the modem is powered off with the `+CFUN=0` command. The configuration can be stored to NVM with the [`%XFSSYNC`](../production_test/xfssync.dita#xfssync) command when the Production Test Image (PTI) modem firmware is used. The stored configuration is applied when the device is powered on.Active `%XPOFWARN` warning blocks the storing to NVM.This command has been updated in v0.7.1 of this document. The earlier format described in v0.7 of this document is still         valid, but the new format is         recommended.Syntax:\n\n```\n%XMAGPIO=<gpio_0>,<gpio_1>,<gpio_2>,<num_ranges>,<state_0>,<flo_0>,<fhi_0><state_1>,<flo_1>, <fhi_1>,...\n```\n\nA command without any parameters deletes the previously written values.The set command parameters and their defined values are the following:\n\n - &lt;gpio_x&gt;\n   - 0 – MAGPIO_x is not used\n   - 1 – MAGPIO_x used\n - &lt;num_ranges&gt;\n   - The number of frequency ranges, maximum value 12\n - &lt;state_y&gt;\n   - Settings of the MAGPIO pins for the range x that follows\n - &lt;flo_y&gt;\n   - Frequency range low value when the setting is active, in MHz\n - &lt;fhi_y&gt;\n   - Frequency range high value when the setting is active, in MHz \n\n\nThe following table contains an example configuration for an antenna tuner:The following command example writes seven ranges to device&apos;s RAM:\n\n```\nAT%XMAGPIO=1,1,1,7,1,746,803,2,698,746,2,1710,2200,3,849,894,4,894,960,6,803,849,7, 1574,1577 OK\n```\n\nThe following command example writes three ranges to device&apos;s RAM:         \n\n```\nAT%XMAGPIO=1,1,1,3,0,1574,1577,1,705,747,6,748,804 OK\n```\n\nThe following command example deletes the previously written       values:\n\n```\nAT%XMAGPIO OK\n```\n\n"
      },
      "read": {
        "title": "Read command",
        "shortDesc": "The read command returns the stored MAGPIO configuration.",
        "ref": "Response syntax: \n\n```\n%XMAGPIO: <gpio_0>,<gpio_1>,<gpio_2>,<num_ranges>,<state_0>,<flo_0>,<fhi_0><state_1>,<flo_1>, <fhi_1>,...\n```\n\nThe read response parameters and their defined values are the following:\n\n - \n   - \n\n\nThe following command example returns the stored configuration:\n\n```\nAT%XMAGPIO? AT%XMAGPIO: 1,1,1,3,0,1574,1577,1,705,747,6,748,804 OK\n```\n\n"
      }
    }
  },
  "xcoex2": {
    "title": "COEX2 pin timing configuration %XCOEX2",
    "shortDesc": "The Nordic-proprietary `%XCOEX2` command determines the timing of the enabling of the `COEX2` pin. ",
    "versions": ["v1.3.x"],
    "subCommands": {}
  },
  "xcoex0": {
    "title": "COEX0 pin control configuration %XCOEX0",
    "shortDesc": "The Nordic-proprietary `%XCOEX0` command writes the `COEX0` pin configuration to device&apos;s RAM memory.",
    "versions": ["v1.0.x", "v1.1.x", "v1.2.x", "v1.3.x", "pti_v1.1.x≥1"],
    "subCommands": {}
  },
  "xantcfg": {
    "title": "Alternative configuration of SiP antenna switch %XANTCFG",
    "shortDesc": "The Nordic-proprietary `%XANTCFG` command configures the System in Package (SiP)-internal antenna switch to an alternative predefined position.",
    "versions": ["v1.1.x≥3", "v1.2.x", "v1.3.x", "pti_v1.1.x≥1"],
    "subCommands": {
      "set": {
        "title": "Set command",
        "shortDesc": "The set command configures the System in Package (SiP)-internal antenna switch to an alternative predefined position.",
        "ref": "The `%XANTCFG` command supports one predefined setting. Therefore, in the Global Navigation Satellite System (GNSS) mode the input signal to nRF9160&apos;s `ANT` input is routed back out from the `AUX` output. The command configuration is stored to Non-volatile Memory (NVM) approximately every 48 hours and when the modem is powered off with the `+CFUN=0` command. The configuration can be stored to NVM with the [`%XFSSYNC`](../production_test/xfssync.dita#xfssync) command when the Production Test Image (PTI) modem firmware is used. After a valid configuration exists, nRF9160 automatically controls the switch during GNSS         reception. Adding further predefined settings requires a modification to modem firmware.         Active `%XPOFWARN` warning blocks the storing to NVM.Syntax:\n\n```\n%XANTCFG=<cfg>\n```\n\nThe set command parameter and its defined values are the following:\n\n - &lt;cfg&gt;\n   - 0 – Reserved, no action\n   - 1 – `ANT` input directed to `AUX` output in the GNSS mode\n   - 2 – Reserved, no action \n   - ...\n   - 7 – Reserved, no action \n\n\nThe following command example directs `ANT` input to `AUX` output:\n\n```\nAT%XANTCFG=1 OK\n```\n\nThe following command example deletes the previous       configuration:\n\n```\nAT%XANTCFG OK\n```\n\n"
      },
      "read": {
        "title": "Read command",
        "shortDesc": "The read command reads the currently active configuration.",
        "ref": "Syntax: \n\n```\n%XANTFCG?\n```\n\nThe following command example returns the currently active configuration:\n\n```\nAT%XANTCFG? %XANTCFG: 1 OK\n```\n\n"
      }
    }
  },
  "Untitled2": {
    "title": "SiP pin configuration",
    "shortDesc": "System in Package (SiP) pin configuration commands can be used to configure the behavior of selected pins of the nRF9160 SiP. The pins that can currently be configured are       `COEX0`, `MAGPIO[0:2]`, and `MIPI RFFE`.",
    "versions": [],
    "subCommands": {}
  },
  "xusimlck": {
    "title": "Personalization of modem %XUSIMLCK",
    "shortDesc": "The Nordic-proprietary `%XUSIMLCK` command allows personalizing the modem to work with predefined Universal Subscriber Identity Module (USIM) cards.",
    "versions": ["v1.1.x", "v1.2.x", "v1.3.x"],
    "subCommands": {
      "set": {
        "title": "Set command",
        "shortDesc": "The set command allows locking the modem to work with predefined Universal Subscriber Identity Module (USIM) cards. Using the command, the modem can be personalized, depersonalized, or the lock of a category can be disabled if the category is not depersonalized.",
        "ref": "It is also possible to conﬁgure USIM personalization so that the device is locked to the ﬁrst USIM that is inserted to it.According to *3GPP TS 22.022*, the following personalization options are available:\n\n - Network\n - Network subset\n - Service provider\n - Corporate\n - USIM\n\n\nSyntax:\n\n```\n%XUSIMLCK=<command>,<facility>,[<pwd>,[<permanent>,[<pers_data>]]]\n```\n\nThe modem supports a maximum of 24 personalization codes.\n\n - +CME ERROR code\n   - \n\n\nThe set command parameters and their defined values are the following:\n\n - &lt;command&gt;\n   - 1 – Personalize\n   - 2 – Depersonalize\n   - 3 – Disable\n   - 4 – Lock device to the first inserted USIM. The value of `<facility>` must be PS.\n - &lt;facility&gt;\n   - String\n   - PN – Network personalization\n   - PU – Network subset personalization\n   - PP – Service provider personalization\n   - PC – Corporate personalization\n   - PS – USIM personalization\n - &lt;pwd&gt;\n   - String. A password for enabling or disabling personalization. Used for `<command>` values 1, 2, or 4. The length of the password is 6–16 digits.\n   - If PN Network Control Key, (NCK)\n   - If PU Network Subset Control Key, (NSCK)\n   - If PP Service Provider Control Key, (SPCK)\n   - If PC Corporate Control Key, (CCK)\n   - If PS Personalization Control Key, (PCK)\n - &lt;permanent&gt;\n   - Programmable selection of the Control Key. Used only when the value of `<command>` is 1. The permanent Control Key can be programmed once, and it is therefore immutable once programmed.\n   - 0 – Nonpermanent Control Key\n   - 1 – Permanent Control Key\n - &lt;pers_data&gt;\n   - String. Used only when the value of `<command>` is 1.\n   - When `<facility>` is PN, `<pers_data>` can contain a maximum of 24 pairs of Mobile Country Code (MCC) and Mobile Network Code (MNC) in the following format: `MCC1.MNC1:MCC2.MNC2:…:MCCn.MNCn`.\n   - When `<facility>` is PU, `<pers_data>` can contain a maximum of 24 pairs of MCC+MNC+Network Subset Code (digits 6 and 7 of               International Mobile Subscriber Identity (IMSI)) in the following format: `MCC1.MNC1.D61.D71:MCC2.MNC2.D62.D72:...:MCCn.MNCn.D6n.D7n`, where D6x and D7x represent the sixth and seventh digits of IMSI.\n   - When `<facility>` is PP, `<pers_data>` can contain a maximum of 24 USIM group identifiers for service provider personalization in             the following format:               `MCC1.MNC1.GID11:MCC2.MNC2.GID12:...:MCCn.MNCn.GID1n`. GID1x represents the first byte of EF_GID1 in USIM, see *3GPP TS 31.102 Ch. 4.2.10 EFGID1*.\n   - When `<facility>` is PC, `<pers_data>` can contain a maximum of 24 pairs of USIM group identifiers from EFGID1 and 4.2.11 EFGID2 for corporate personalization in the following format: `MCC1.MNC1.GID11.GID21:MCC2.MNC2.GID12.GID22:...: MCCn.MNCn.GID1n.GID2n`. GID1x and GID2x represent the first bytes of EF_GID1 and EF_GID2, see *3GPP TS 31.102 Ch. 4.2.10 EFGID1* and *4.2.11 EFGID2*.\n   - When `<facility>` is PS, `<pers_data>` can contain a maximum of 24 IMSIs as specified in *3GPP TS 31.102 Ch. 4.2.2 EFIMSI*. Fifteen IMSI digits can be given. The format is the following: `IMSI1:IMSI2:...:IMSIn`.\n\n\nThe following command example creates a nonpermanent network personalization: \n\n```\nAT%XUSIMLCK=1,\"PN\",\"12345678\",0,\"100.200\" OK\n```\n\nThe following command depersonalizes the network personalization: \n\n```\nAT%XUSIMLCK=2,\"PN\",\"12345678\" OK\n```\n\nThis command disables network personalization: \n\n```\nAT%XUSIMLCK=3,\"PN\" OK\n```\n\nThis command locks device to the first inserted USIM in a nonpermanent manner:\n\n```\nAT%XUSIMLCK=4,\"PS\",\"12345678\",0 OK\n```\n\nThis command personalizes USIM to IMSI 100200777777777 (MCC=100, MNC=200, other digits are 7). The facility PS is permanently locked to password &quot;12345678&quot;. After depersonalization,         no other keys can be used for this facility:\n\n```\nAT%XUSIMLCK=1,\"PS\",\"12345678\",1,\"100200777777777\" OK\n```\n\n"
      }
    }
  },
  "xsudo": {
    "title": "Authenticated access %XSUDO",
    "shortDesc": "The Nordic-proprietary `%XSUDO` command provides authenticated access for a restricted AT       command.",
    "versions": ["v1.0.x", "v1.1.x", "v1.2.x", "v1.3.x"],
    "subCommands": {
      "set": {
        "title": "Set command",
        "shortDesc": "The set command provides authenticated access for a restricted AT command.",
        "ref": "The restricted command is separated with a semicolon (;). The leading AT prefix is not included in the concatenated command.Syntax:\n\n```\n%XSUDO=<data_len>,<signature>[,<sec_tag>]\n```\n\n\n\n - +CME ERROR codes\n   - 513 – Not found, public key not found\n   - 520 – Authentication failed\n\n\nThe set command parameters and their defined values are the following:\n\n - &lt;data_len&gt;\n   - Length of a signed command string.\n   - Only the number of characters in `<data_len>` from an authenticated command is processed, the rest are ignored.               `<data_len>` shall not be greater than the given command.\n - &lt;signature&gt;\n   - Command signature in Base64 format.\n - &lt;sec_tag&gt;\n   - Integer, 0–9 (optional). A secure tag for multiple public keys.\n\n\nThe following command example provides authenticated access for the restricted `+CMD` command:\n\n```\nAT%XSUDO=28,\"c2lnbmF0dXJl\";+CMD=... OK\n```\n\n"
      }
    }
  },
  "xpmng": {
    "title": "Public key storage management %XPMNG",
    "shortDesc": "The Nordic-proprietary `%XPMNG` command writes and reads the public key. The public key can be written only if it does not       exist.",
    "versions": ["v1.0.x", "v1.1.x", "v1.2.x", "v1.3.x"],
    "subCommands": {
      "set": {
        "title": "Set command",
        "shortDesc": "The set command writes and reads the public key. The public key is updated directly to Non-volatile Memory (NVM). The write operation is allowed only when the modem is not activated.",
        "ref": "Active `%XPOFWARN` warning blocks the update.Syntax:\n\n```\n%XPMNG=<opcode>[,<content>[,<sec_tag>]]\n```\n\nResponse syntax for read command:\n\n```\n%XPMNG: <content>\n```\n\n\n\n - +CME ERROR codes\n   - 513 – For read: Not found\n   - 520 – For write: Already exists\n   - \n\n\nThe set command parameters and their defined values are the following:\n\n - &lt;opcode&gt;\n   - 0 – Write\n   - 2 – Read\n - &lt;content&gt;\n   - String. Mandatory if parameter `<opcode>` is &quot;Write&quot;. An empty string is not allowed. Parameter `<content>` is enclosed in double quotes. ASN.1 DER encoding in Base64 encoded with the header and footer of begin key and             end key.\n - \n   - \n\n\nThe following command example writes the public key:\n\n```\nAT%XPMNG=0,\"-----BEGIN PUBLIC KEY-----...-----END PUBLIC KEY-----\" OK\n```\n\nThe following command example reads the public key:\n\n```\nAT%XPMNG=2 %XPMNG: \"-----BEGIN PUBLIC KEY-----...-----END PUBLIC KEY-----\" OK\n```\n\n"
      }
    }
  },
  "security": {
    "title": "Security commands",
    "shortDesc": "Security commands can be used for device and data security.",
    "versions": [],
    "subCommands": {}
  },
  "keyinject": {
    "title": "Key injection %KEYINJECT",
    "shortDesc": "The Nordic-proprietary `%KEYINJECT` command injects encrypted provisioning messages to the nRF9160 modem. The command can be used to inject encrypted   certificates and keys to the device.",
    "versions": ["v1.3.x"],
    "subCommands": {
      "set": {
        "title": "Set command",
        "shortDesc": "The set command injects encrypted provisioning messages to the nRF9160 modem.",
        "ref": "Syntax:\n\n```\n%KEYINJECT=<msg>\n```\n\nResponse syntax:\n\n```\n%KEYINJECT: <response>\n```\n\n\n\n - +CME ERROR codes\n   - 50 – Incorrect parameters\n   - 51 – Command is disabled in this software build\n   - 513 – Signing or decrypting key not found on device\n   - 515 – Not enough memory for processing\n   - 518 – Not allowed in active state\n   - \n\n\nThe set command parameters and their defined values are the following: \n\n - &lt;msg&gt;\n   - Provisioning message and signature separated by a dot &quot;.&quot;. The actual message is encrypted and the ciphertext is delivered in a COSE_Encrypt object.\n   - The format is &quot;Base64url(COSE_Encrypt(provisioning_message)).Base64url(COSE_Sign1)&quot;.\n - &lt;response&gt;\n   - The response format is base64url(cbor_resp).\n\n\nThe following command example shows the nRF9160 modem receiving an encrypted provisioning message:\n\n```\n%KEYINJECT=\"2GCEQ6EBCqEFTS6b97seIkh_t5cLNhpYikK5miurjQrYHxWuPaA_LQFo5Qk2s9g3xO71g8ec- AVvKRyk4Gdo2DCRL9q3gGOZxgrYEN9R44F1WOdaGhnaypjtdNwqgu-Kv-6DlZRqyxKkSvrZLuOq3R6GdLPK2BZ5pQNYkeN 8dIPhJujbA5Bb_bt_iUrlYA2jIF3MR395PDtd4BlTb4ika-tVeoGDRKEBOBiiIKQBAiABIVgg8zFHgdz6a3LjQ2Nq7V-jM u9CM3KxI9XjPajLT8fOKGkiWCDi4YnIiCDQisIPWoCaucAnUUti4h-eazw1UMX3LR3X_ARCGC1A.0oRYH6MBJjoAAQAAUL UTc_owres5hDTJSUsd4r46AAEAAQShBEMZAtP2WEAIQ9Gw3O2-ymC1_bMChHdYorwSPGSK7okxl9Xkj3V7JVrUW1UK7QeW M1ajtaxNYs7wJARQdeSmMbNTF6R0_VuD\" %KEYINJECT: \"2dn3gwVQ________RK2Afv__z-ihGIEA\" OK\n```\n\n"
      }
    }
  },
  "keygen": {
    "title": "Key generation %KEYGEN",
    "shortDesc": "The Nordic-proprietary `%KEYGEN` command allows creating keys for different purposes.",
    "versions": ["v1.3.x"],
    "subCommands": {
      "set": {
        "title": "Set command",
        "shortDesc": "The set command creates keys for different purposes.",
        "ref": "The purposes are the following:\n\n> *Note:*\n> \n> \n>  - The `%KEYGEN` command is allowed only when the modem is deactivated.\n>  - The [`%CMNG`](cmng.dita#cmng) list operation can be used to check the availability of generated keys.\n> \n> \n> \n\nSyntax:\n\n```\n%KEYGEN=<sec_tag>,<key_type>[,<response_content>][,<attributes>][,<key_usage>]\n```\n\n\n\n - +CME ERROR codes\n   - 514 – Not allowed\n   - 515 – Memory full\n   - 518 – Not allowed in active state\n   - 519 – Already exists\n   - 523 – Key generation failed\n   - \n\n\nThe set command parameters and their defined values are the following:\n\n - &lt;sec_tag&gt;\n   - Integer, 1–2147483647.\n - &lt;key_type&gt;\n   - Integer\n   - Type of the decryption key. Values corresponding to `<type>` in `%CMNG`.\n   - Supported values:\n   - 2 – Client private key\n   - 8 – Endorsement key\n - &lt;response_content&gt;\n   - Integer\n   - Mandatory for `<key_type>` 2. Optional for `<key_type>` 8.\n   - Content of the response:\n   - 0 – Certificate signing request returned in response (`<key_type>` 2 only)\n   - 1 – Public key returned in response (`<key_type>` 2 or 8)\n - &lt;attributes&gt;\n   - String\n   - Optional. Valid only for CSR (`<response_content>` 0), otherwise ignored. The content of the string is a comma-separated list of attribute ID and value             pairs, for example, &quot;ID1=value1,ID2=value2&quot;, where the ID can be one of the supported             attributes listed below, and the values provide the corresponding information (see               *RFC 5280*).\n   - Supported attributes:\n   - commonName (CN)\n   - locality (L)\n   - stateOrProvinceName (ST)\n   - organizationName (O)\n   - organizationalUnitName (OU)\n   - countryName (C)\n   - domainComponent (DC)\n   - surName (SN)\n   - givenName (GN)\n   - emailAddress (R)\n   - serialNumber\n   - postalAddress\n   - postalCode\n   - dnQualifier\n   - title\n   - initials\n   - pseudonym\n   - generationQualifier\n   - If the `<attributes>` parameter is omitted, the default is &quot;CN=&lt;device-uuid&gt;&quot;.\n - &lt;key_usage&gt;\n   - String\n   - Optional. Valid only for CSR (response_content 0), otherwise ignored. The string contains 9 binary characters (0/1) corresponding to the KeyUsage bit string defined in               *RFC 5280*. The digits or bits in the string are numbered 0–8 from left to right, and they have the following meaning (see *RFC 5280* for more details).\n   - 0 – digitalSignature (the first digit)\n   - 1 – nonRepudiation\n   - 2 – keyEncipherment\n   - 3 – dataEncipherment\n   - 4 – keyAgreement\n   - 5 – keyCertSign\n   - 6 – cRLSign\n   - 7 – encipherOnly\n   - 8 – decipherOnly (the last digit)\n\n> *Note:*\n> Setting decipherOnly bit to 1 is not supported.\n\n\n   - If the `<key_usage>` parameter is omitted, default is &quot;111010000&quot;, which means that the digitalSignature, nonRepudiation, keyEncipherment, and             keyAgreement bits are set as &quot;1&quot;.\n\n\nThe following command example generates a key for TLS. The key is stored to `<sec_tag>` 11. The `<key_type>` is client private key, and it includes the optional `<key_usage>` parameter:\n\n```\nAT%KEYGEN=11,2,0,,\"101010000\" %KEYGEN: \"ckijfiok.jdiqhdn\" OK \n```\n\nThe following command example generates a key for TLS. The key is stored to `<sec_tag>` 11. The `<key_type>` is client private key, and it includes the optional parameters `<attributes>` and `<key_usage>`:\n\n```\nAT%KEYGEN=11,2,0,\"O=Nordic Semiconductor,L=Trondheim,C=no\",\"101010000\" %KEYGEN: \"MIIBHDCBwAIBADBAMR0wGwYDVQQKDBROb3JkaWMgU2VtaWNvbmR1Y3RvcjESMBAGA1UEB wwJVHJvbmRoZWltMQswCQYDVQQGEwJubzBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABAP6p4ZjYNG0 FFdz5axZkbcQzfO8Fkzws4o2unhS5qqgON5BA6jj0TbHJ5imPbVXWNiDVCNc0us41NtL3TygDdqgHjA cBgkqhkiG9w0BCQ4xDzANMAsGA1UdDwQEAwIDqDAMBggqhkjOPQQDAgUAA0kAMEYCIQDnFWQl-x25qj EPBtLrvH5wwecrA5KmjUcK_b3eok5nmQIhALsSKRmuqDM3H09-q4R0MSpYprWZZp5iPjRMtZbjataH. 0oRDoQEmoQRBIVhL2dn3hQlQUFAwQTYzQ7CAwwEaNJbawEELWCD7er2zKHc8yAMi8x-1jAuCEqaLmJ3 PMZTHIYSrmIR0tlD7CDRaW--s0c7XA4pI3r9wWEAQOGVg5VejmHx9o_sF1RcGBMClw-MkN_wMrS2ryM 8CdA427j96z_4wjLgBvejVnYGAl7qqL77qlEbBEzXOkLx4\" OK\n```\n\nThe following command example generates an endorsement key. The key is stored to `<sec_tag>` 33. The `<key_type>` is endorsement private key:\n\n```\nAT%KEYGEN=33,8 %KEYGEN: \"vdofjihew.cnjeiwhfok\" OK\n```\n\n"
      }
    }
  },
  "jwt": {
    "title": "Creating JWT %JWT",
    "shortDesc": "The Nordic-proprietary `%JWT` command creates a JSON Web Token (JWT).",
    "versions": ["v1.3.x"],
    "subCommands": {
      "set": {
        "title": "Set command",
        "shortDesc": "The set command creates a JSON Web Token (JWT).",
        "ref": "Syntax:\n\n```\n%JWT=[<alg>],[<exp_delta>],[<subject>],[<audience>][,<sec_tag>,<key_type>]\n```\n\nResponse syntax:\n\n```\n%JWT: <jwt>\n```\n\n\n\n - +CME ERROR codes\n   - 50 – Incorrect parameters\n   - 51 – Command is disabled in this software build\n   - 513 – Key not found (`<sec_tag>`, `<key_type>`)\n   - 514 – Could not read key (`<sec_tag>`, `<key_type>`)\n   - 525 – Error in JWT creation\n\n\n\n\n> *Note:*\n> If `%JWT `is given without the optional `<sec_tag>` and `<key_type>` parameters, device identity private key is used to sign the JWT.\n\nThe set command parameters and their defined values are the following: \n\n - &lt;alg&gt;\n   - Integer\n   - Defines the JWT signing algorithm. The default value is 0. Other values are currently not supported.\n   - 0 – ES256\n - &lt;exp_delta&gt;\n   - Integer\n   - The number of seconds before expiry. The modem adds the `<exp_delta>` value to the current time to determine the &quot;exp&quot; (expiration time) claim defined in *RFC 7519 4.1.4* identifying the time when or after which the JWT must not be accepted for processing.\n   - If `<exp_delta>` is not given, or the value is 0, the &quot;exp&quot; and &quot;iat&quot; claims are not included in the JWT. \n\n> *Note:*\n> To get valid &quot;exp&quot; and &quot;iat&quot; claims, the device must have a valid date and time that can be received from the network or set               manually (see the [`+CCLK`](../mob_termination_ctrl_status/cclk.dita#cclk) and [`%CCLK`](../mob_termination_ctrl_status/cclk_nordic.dita#cclk_nordic) commands).\n\n\n - &lt;subject&gt;\n   - String\n   - The &quot;sub&quot; (subject) claim for the JWT as defined in *RFC 7519 4.1.2*. Identifies the principal that is the subject of the JWT.\n - &lt;audience&gt;\n   - String\n   - The &quot;aud&quot; (audience) claim for the JWT as defined in *RFC 7519 4.1.3*. Identifies the recipients that the JWT is intended for.\n\n> *Note:*\n> Entering an array of multiple strings is not supported. Only a single audience string             supported.\n\n\n - &lt;sec_tag&gt;\n   - Integer\n   - Identifies the key to be used for signing the JWT. The values correspond to the `<sec_tag>` parameter in [`%CMNG`](cmng.dita#cmng).\n - &lt;key_type&gt;\n   - Integer\n   - Type of the key to be used for signing the JWT. The values correspond to the `<type>` parameter in `%CMNG`.\n   - 2 – Client private key\n   - 8 – Endorsement private key\n - &lt;jwt&gt;\n   - String\n   - Created JWT as Base64Url encoded string.\n\n\nThe following command example creates a JWT:\n\n```\nAT%JWT: 0,3600,\"ClientAuth\",\"urn:server\"\n```\n\n"
      }
    }
  },
  "cpwd": {
    "title": "Change password +CPWD",
    "shortDesc": "The `+CPWD` command changes the password for the facility lock.",
    "versions": ["v1.0.x", "v1.1.x", "v1.2.x", "v1.3.x"],
    "subCommands": {
      "test": {
        "title": "Test command",
        "shortDesc": "The test command returns the supported facilities and password length.",
        "ref": "Response syntax:\n\n```\n+CPWD: list of supported (<fac>,<pwdlength>)s\n```\n\nThe test command parameters and their defined values are the following:\n\n - \n   - \n - &lt;pwdlength&gt;\n   - Integer. Maximum length of the password.\n\n\nThe following command example returns a list of supported facilities and password lengths:\n\n```\nAT+CPWD=? +CPWD: (\"SC\",8),(\"P2\",8) OK\n```\n\n"
      },
      "set": {
        "title": "Set command",
        "shortDesc": "The set command changes the password for the facility lock.",
        "ref": "Syntax:\n\n```\n+CPWD=<fac>,<oldpwd>,<newpwd>\n```\n\nThe set command parameters and their defined values are the following:\n\n - &lt;fac&gt;\n   - SC – Subscriber Identity Module (SIM)Personal Identification Number (PIN)\n   - P2 – SIM PIN2\n<!-- <pd>\"PS\" – PH-SIM (Lock phone to SIM/UICC card installed in the currently selected card\n            slot. Device asks password when other than the current SIM/UICC card inserted.  The\n            device may remember certain number of previously used cards and, therefore, does not\n            require a password when they are inserted.) [Could this be: \"SIM/USIM\n            personalization\"</pd>\n          <pd>\"PF\" –  Lock phone to the very first inserted SIM/UICC card (also referred in the\n            present document as PH-FSIM\n            <?oxy_custom_start type=\"oxy_content_highlight\" color=\"255,255,0\"?>[sive:\n            NOT!]<?oxy_custom_end?>) . The device asks password when other than the first SIM/UICC\n            card is inserted.</pd>\n          <pd>\"PN\" – Network personalization. See <cite>3GPP TS 22.022</cite>.</pd>\n          <pd>\"PU\" – Network subset personalization. See <cite>3GPP TS 22.022</cite>.</pd>\n          <pd>\"PP\" – Service provider personalization. See <cite>3GPP TS 22.022</cite>.</pd>\n          <pd>\"PC\" – Corporate personalization. See <cite>3GPP TS 22.022</cite>.</pd> --> - &lt;oldpwd&gt;,&lt;newpwd&gt;\n   - String. Password.\n\n\n\n\n> *Note:*\n> Currently only SC is supported.\n\nThe following command example changes the SIM PIN:\n\n```\nAT+CPWD=\"SC\",\"1234\",\"5678\" OK\n```\n\n"
      }
    }
  },
  "cpinr": {
    "title": "Remaining PIN retries +CPINR",
    "shortDesc": "The `+CPINR` command returns the number of remaining Personal Identification Number (PIN) retries for the User Equipment (UE) passwords.",
    "versions": ["v1.0.x", "v1.1.x", "v1.2.x", "v1.3.x"],
    "subCommands": {
      "set": {
        "title": "Set command",
        "shortDesc": "The set command returns the number of remaining Personal Identification Number (PIN) retries for the User Equipment (UE) passwords.",
        "ref": "Syntax:\n\n```\n+CPINR=<sel_code>\n```\n\nResponse syntax for standard PINs:\n\n```\n+CPINR: <code>,<retries>\n```\n\nManufacturer-specific PINs are not supported.The set command parameters and their defined values are the following:\n\n - &lt;sel_code&gt;, &lt;code&gt;\n   - SIM PIN \n   - SIM PIN2\n   - SIM PUK\n   - SIM PUK2\n   - Wildcard not supported.\n - &lt;retries&gt;\n   - Integer. Number of remaining retries.\n\n\nThe following command example checks the remaining entries for PIN:\n\n```\nAT+CPINR=\"SIM PIN\" +CPINR: \"SIM PIN\",3 OK\n```\n\n"
      }
    }
  },
  "cpin": {
    "title": "PIN code +CPIN",
    "shortDesc": "The `+CPIN` command enters and checks the required Personal Identification Number (PIN).",
    "versions": ["v1.0.x", "v1.1.x", "v1.2.x", "v1.3.x"],
    "subCommands": {
      "set": {
        "title": "Set command",
        "shortDesc": "The set command enters the Personal Identification Number (PIN). ",
        "ref": "Syntax:\n\n```\n+CPIN=<pin>[,<newpin>]\n```\n\nThe set command parameters and their defined values are the following:\n\n - &lt;pin&gt;\n   - String of digits\n - &lt;newpin&gt;\n   - String of digits. Mandatory if the required code is Subscriber Identity Module (SIM)Personal Unblocking Key (PUK) or SIM PUK2.\n\n\n\n\n> *Note:*\n> If no PIN is required, the response code is `ERROR`.\n\nThe following command example enters PIN 1234:\n\n```\nAT+CPIN=\"1234\" OK\n```\n\n"
      },
      "read": {
        "title": "Read command",
        "shortDesc": "The read command checks if a Personal Identification Number (PIN) is needed or if a personalization lock is blocking the device start-up.",
        "ref": "Response syntax:\n\n```\n+CPIN: <code>\n```\n\nThe read command parameter and its defined values are the following:\n\n - &lt;code&gt;\n   - READY – No PIN required\n   - SIM PIN – PIN code required\n   - SIM PUK – PUK code required\n   - SIM PIN2 – PIN2 code required\n   - SIM PUK2 – PUK2 code required\n   - PH-SIM PIN – USIM depersonalization required\n   - PH-NET PIN – Network depersonalization required\n   - PH-NETSUB PIN – Network subset depersonalization required\n   - PH-SP PIN – Service provider depersonalization required\n   - PH-CORP PIN – Corporate depersonalization required\n\n\nThe following command example shows how to check if a PIN code is needed with the response that a PIN code is required:\n\n```\nAT+CPIN? +CPIN: \"SIM PIN\" OK\n```\n\n\n\n> *Note:*\n> Use [`%XUSIMLCK`](xusimlck.dita#xusimlck) when facility lock depersonalization is required. \n\n"
      }
    }
  },
  "cmng": {
    "title": "Credential storage management %CMNG",
    "shortDesc": "The Nordic-proprietary `%CMNG` command is used for credential storage management. The command writes, reads, deletes, and checks the existence of keys and    certificates.",
    "versions": ["v1.0.x", "v1.1.x", "v1.2.x", "v1.3.x"],
    "subCommands": {
      "set": {
        "title": "Set command",
        "shortDesc": "The set command is used for credential storage management. The command writes, reads, deletes, and checks the existence of keys and certificates. The keys and certificates are     updated directly to Non-volatile Memory (NVM) when the set command is issued.",
        "ref": "Active `%XPOFWARN` warning blocks the update.The write and delete operations are allowed only when the modem is not activated.Syntax:\n\n```\n%CMNG=<opcode>[,<sec_tag>[,<type>[,<content>[,<passwd>]]]]\n```\n\nResponse syntax for read operation:\n\n```\n%CMNG: <sec_tag>,<type>[,<sha>[,<content>]] \n```\n\nResponse syntax for list operation:\n\n```\n%CMNG: <sec_tag>,<type>[,<sha>]\n```\n\n`<sec_tag> <type>` shall be a unique pair, no multiple items with the same `<sec_tag>` and `<type>` values are allowed.\n\n - +CME ERROR codes\n   - 513 – Not found. Applies to read, write, and delete.\n   - 514 – No access. Applies to read, write, and delete.\n   - 515 – Memory full. Applies to write.\n   - 518 – Not allowed in active state.\n   - 519 – Already exists.\n   - 528 – Not allowed during active power off warning.\n\n\nThe set command parameters and their defined values are the following: \n\n - &lt;opcode&gt;\n   - 0 – Write\n   - 1 – List\n   - 2 – Read\n   - 3 – Delete\n - &lt;sec_tag&gt;\n   - Integer, 0–2147483647. \n   - Mandatory for write, read, and delete operations. Optional for list operation.\n   - Values above 2147483647 are reserved for the modem. `<sec_tag>`s with values above 2147483647 might be visible in the [`%CMNG`](cmng.dita#cmng) list command.\n - &lt;type&gt;\n   - 0 – Root CA certificate (ASCII text)\n   - 1 – Client certificate (ASCII text)\n   - 2 – Client private key (ASCII text)\n   - 3 – Pre-shared Key (PSK) (ASCII text in hexadecimal string format)\n   - 4 – PSK identity (ASCII text)\n   - 5 – Public key (ASCII text)\n   - 6 – Reserved\n   - Mandatory if `<opcode>` is write, read, or delete.\n - &lt;type&gt;\n   - 0 – Root CA certificate (ASCII text).\n   - 1 – Client certificate (ASCII text).\n   - 2 – Client private key (ASCII text).\n   - 3 – Pre-shared Key (PSK) (ASCII text in hexadecimal string format).\n   - 4 – PSK identity (ASCII text).\n   - 5 – Public key (ASCII text). Used in authenticated AT commands.\n   - 6 – Device identity public key.\n   - 7 – Reserved.\n   - 8 – Endorsement private key, public key for `<opcode>` 2 – read. Used for content encryption. See [`%KEYGEN`](keygen.dita#keygen) and [`%KEYINJECT`](keyinject.dita#keyinject).\n   - 9 – Ownership key. Used for signature verification. See `%KEYGEN` and `%KEYINJECT`.\n   - 10 – Nordic identity root CA. Root CA for Nordic identity server.\n   - 11 – Nordic base public key. Used for ownership key provisioning message signature verification.\n   - 13 – Asset encryption key\n   - \n - &lt;content&gt;\n   - ASCII text in hexadecimal string format containing two International Reference Alphabet (IRA) characters per octet (PSK). Mandatory if `<opcode>` is `write`. An empty string is not allowed. A Privacy Enhanced Mail (PEM) file enclosed in double quotes (X.509 PEM entities).\n - &lt;passwd&gt;\n   - String. PKCS#8 password. Mandatory for writing a type 2 encrypted private key, ignored for other types. Maximum length 32 characters.\n   - Not supported in current modem firmware versions.\n - &lt;sha&gt;\n   - String in hexadecimal format. SHA-256 digest of the entity (DER, PEM) as stored in the filesystem. 64 characters representing a 256-bit vector.\n\n\n\n\n> *Note:*\n> \n> \n>  - `<content>` in the read response is exactly what is written, including `<CR>`, `<LF>`, and other characters. The characters outside the double quotes are part of the AT response format.\n>  - Reading types 1, 2, and 3 are not supported.\n>  - Writing and deleting types 8, 10, and 11 are not supported.\n>  - Overwriting and deleting type 9 is not supported.\n> \n> \n> \n\nThe following command example writes the root certificate:\n\n```\nAT%CMNG=0, 12345678, 0,\" -----BEGIN CERTIFICATE----- MIIDSjCCA... ...bKbYK7p2CNTUQ -----END CERTIFICATE-----” OK\n```\n\nThe following command example writes the client certificate:\n\n```\nAT%CMNG=0,567890,1,\" -----BEGIN CERTIFICATE----- MIIBc464... ...bW9aAa4 -----END CERTIFICATE-----” OK\n```\n\nThe following command example writes the private key:\n\n```\nAT%CMNG=0,123,2,\" -----BEGIN ENCRYPTED PRIVATE KEY----- MIICz... ...ukBu -----END ENCRYPTED PRIVATE KEY-----”, ”abcdefg” OK\n```\n\nThe following command example lists a single item by specifying tag and type:\n\n```\nAT%CMNG=1,12345678, 0 %CMNG: 12345678, 0, \"978C...02C4\" OK\n```\n\nThe following command example lists a single tag:\n\n```\nAT%CMNG=1,12345678 %CMNG: 12345678, 0, \"978C...02C4\" %CMNG: 12345678, 1, \"1A8C...02BB\" OK\n```\n\nThe following command example lists all stored credentials: \n\n```\nAT%CMNG=1 %CMNG: 12345678, 0, \"978C...02C4\" %CMNG: 567890, 1, \"C485...CF09\" %CMNG: 123, 2, \"92E1...8AC8\" %CMNG: 654321, 3, \"E0C9...511D\" OK\n```\n\nThe following command example reads the root certificate with tag 12345678:\n\n```\nAT%CMNG=2, 12345678, 0 %CMNG: 12345678, 0, \"978C...02C4\", \"-----BEGIN CERTIFICATE----- MIIBc464... ...bW9aAa4 -----END CERTIFICATE-----\" OK\n```\n\nThe following command example deletes a client certificate with tag 123:\n\n```\nAT%CMNG=3,123,1 OK\n```\n\nThe following command example reads a non-existing root certificate with tag 4567. Error code 513 is returned:\n\n```\nAT%CMNG=2,4567,0 +CME ERROR: 513\n```\n\n"
      }
    }
  },
  "clck": {
    "title": "Facility lock +CLCK",
    "shortDesc": "The `+CLCK` command locks, unlocks, or interrogates a facility.",
    "versions": ["v1.0.x", "v1.1.x", "v1.2.x", "v1.3.x"],
    "subCommands": {
      "test": {
        "title": "Test command",
        "shortDesc": "The test command lists supported facilities.",
        "ref": "Response syntax:\n\n```\n+CLCK: (list of supported <fac>s)\n```\n\nThe following command example returns a list of supported facilities:\n\n```\nAT+CLCK=? +CLCK: (\"SC\",&quot;PS&quot;,&quot;PN&quot;,&quot;PU&quot;,&quot;PP&quot;,&quot;PC&quot;) OK\n```\n\n"
      },
      "set": {
        "title": "Set command",
        "shortDesc": "The set command locks, unlocks, or interrogates a facility.",
        "ref": "Syntax:\n\n```\n+CLCK=<fac>,<mode>[,<passwd>] \n```\n\n<!-- <p>Syntax for <parmname>&lt;mode></parmname> 2 response:</p><codeblock>+CLCK: &lt;status></codeblock> -->The set command parameters and their defined values are the following:\n\n - &lt;fac&gt;\n   - SC – SIM\n   - PN – Network personalization\n   - PU – Network subset personalization\n   - PP – Service provider personalization\n   - PC – Corporate personalization\n   - PS – Universal Subscriber Identity Module (USIM) personalization\n - &lt;mode&gt;\n   - 0 – Unlock\n   - 1 – Lock\n   - 2 – Query status\n - &lt;passwd&gt;\n   - String. Password for the facility.\n<!-- <plentry><pt>&lt;status></pt><pd>0 – Not active</pd><pd>1 – Active</pd></plentry> -->\n\n\n\n> *Note:*\n> SC is supported in modes 0 and 1. PN, PU, PP, PC, and PS are supported in modes 0 and 2.\n\nThe following command example disables Personal Identification Number (PIN) query:\n\n```\nAT+CLCK=\"SC\",0,\"<passwd>\" OK\n```\n\nThe following command example checks network personalization status when it is not active:\n\n```\nAT+CLCK=”PN”,2 +CLCK: 0 OK \n```\n\n"
      }
    }
  },
  "claimtoken": {
    "title": "Claim token generation %CLAIMTOKEN",
    "shortDesc": "The Nordic-proprietary `%CLAIMTOKEN` command requests the device&apos;s claim token.",
    "versions": ["v1.3.x≥4"],
    "subCommands": {
      "set": {
        "title": "Set command",
        "shortDesc": "The set command requests the device&apos;s claim token.",
        "ref": "Syntax:\n\n```\n%CLAIMTOKEN=<sec_tag>[,<challenge>]\n```\n\nResponse syntax:\n\n```\n%CLAIMTOKEN: <response>\n```\n\n\n\n - +CME ERROR codes\n   - 529 – Failed to create response. Ownership key is not found at the given `<sec_tag>` or an error has occurred in secure side processing.\n\n\nThe set command parameters and their defined values are the following: \n\n - &lt;sec_tag&gt;\n   - Integer, 0–2147483647.\n   - Identifies the `<sec_tag>` where the ownership public key is stored on the device. The values correspond to the `<sec_tag>` in `%CMNG`.\n - &lt;challenge&gt;\n   - Optional.\n   - 32-character string in hexadecimal format.\n   - Used to generate a response.\n - &lt;response&gt;\n   - Device claim token message and COSE_Sign1 signature as Base64Url encoded strings separated by a dot &quot;.&quot;: `\"Base64Url(Device claim token).Base64Url(Cose_Sign1)\"`\n\n\nThe following command example requests the claim token. The ownership key is stored at &lt;sec_tag&gt; 22:\n\n```\nAT%CLAIMTOKEN=22 %CLAIMTOKEN: \"RGV2aWNlIGNsYWltIHRva2Vu.Q29zZV9TaWduMQ\" OK \n```\n\nThe following command example requests the claim token including challenge. The ownership key is stored at &lt;sec_tag&gt; 34:\n\n```\nAT%CLAIMTOKEN=34,\"90115c20ac3f381b520b43c76bd5d99c\" %CLAIMTOKEN: \"RGV2aWNlIGNsYWltIHRva2Vu.Q29zZV9TaWduMQ\" OK \n```\n\n"
      }
    }
  },
  "certexpiry": {
    "title": "Certificate expiry information %CERTEXPIRY",
    "shortDesc": "The Nordic-proprietary `%CERTEXPIRY` command reads the Transport Layer Security (TLS) certificate expiry information.",
    "versions": ["v1.3.x≥2"],
    "subCommands": {
      "set": {
        "title": "Set command",
        "shortDesc": "The set command reads the Transport Layer Security (TLS) certificate expiry information.",
        "ref": "Syntax:\n\n```\n%CERTEXPIRY=<sec_tag>,<type>\n```\n\nResponse syntax:\n\n```\n%CERTEXPIRY: <serial number>,<notBefore>,<notAfter>\n```\n\nThe set command parameters and their defined values are the following: \n\n - &lt;sec_tag&gt;\n   - Integer, 1–2147483647.\n - &lt;type&gt;\n   - 0 – Root CA certificate.\n   - 1 – Client certificate.\n   - 10 – Nordic identity root CA.\n - &lt;serial number&gt;\n   - String in hexadecimal format. Certificate serial number.\n - &lt;notBefore&gt;\n   - Certificate not valid before.\n   - Format: yyyymmddhhmmssZ\n   - yyyy – Four digits for the year.\n   - mm – Two digits for the month.\n   - dd – Two digits for the date.\n   - hh – Two digits for hours.\n   - mm – Two digits for minutes.\n   - ss – Two digits for seconds.\n   - Z – Time zone Zulu/UTC.\n - &lt;NotAfter&gt;\n   - Certificate not valid after.\n   - Format: yyyymmddhhmmssZ\n - +CME ERROR codes\n   - 513 – Not found.\n   - 527 – Invalid content.\n\n\nThe following command example reads the expiry information of the root certificate stored in `<sec_tag>``1`:\n\n```\n%CERTEXPIRY=1,0\n```\n\nThe following response example reads the expiry information of a certificate with serial number 00AEF87681FA968B61 that is valid from August 23, 2017 8:47:37 AM GMT to August 23,         2018 8:47:37 AM GMT:\n\n```\n%CERTEXPIRY: 00AEF87681FA968B61,20170823084737Z,20180823084737Z\n```\n\n"
      }
    }
  },
  "attesttoken": {
    "title": "Attestation token generation %ATTESTTOKEN",
    "shortDesc": "The Nordic-proprietary `%ATTESTTOKEN` command requests an attestation token. Attestation tokens are used to verify the authenticity of a Nordic    device.",
    "versions": ["v1.3.x"],
    "subCommands": {
      "set": {
        "title": "Set command",
        "shortDesc": "The set command requests an attestation token.",
        "ref": "The response contains a device identity attestation message including the device type, device UUID, and COSE authentication metadata joined by a dot &quot;.&quot; and coded to Base64url         format.Syntax:\n\n```\n%ATTESTTOKEN\n```\n\nThe following command example requests an attestation token:\n\n```\nAT%ATTESTTOKEN %ATTESTTOKEN: \"9aiUFOq7SOwtdPfEgdkPxV_vTYLoGeE0-gzV2e5c.jUfK3OpdVBVYWnso-aOjIZcSTAwdqQQJWrrY2Lnc\" OK\n```\n\n"
      }
    }
  },
  "xrftest_tx": {
    "title": "TX test %XRFTEST",
    "shortDesc": "The Nordic-proprietary `%XRFTEST` command can be used to enable the RF transmitter. The command also measures TX power with an internal measurement receiver in time     domain and returns the measurement       result.",
    "versions": ["v1.0.x", "v1.1.x", "v1.2.x", "v1.3.x", "pti_v1.1.x≥1"],
    "subCommands": {
      "set": {
        "title": "Set commandAllowed parameter combinations for &lt;param5&gt;, &lt;param6&gt;, and &lt;param7&gt; in system modes NB-IoT and LTE-M",
        "shortDesc": "The set command enables the RF transmitter.",
        "ref": "\n\n> *Note:*\n> This command transmits power to the selected RF band and can violate the radio directives of the region or country. Make sure that the equipment is in an RF-shielded         room or connected to an RF cable so that RF power does not leak.\n\nSyntax:\n\n```\n%XRFTEST=<test>,<operation>[,<param0>,<param1>,…,<param10>]\n```\n\nThe set command parameters and their defined values are the following:\n\n - &lt;test&gt;\n   - 1 – TX\n - &lt;operation&gt;\n   - 1 – ON\n   - 0 – OFF\n\n> *Note:*\n> \n\n\n - &lt;param0&gt;\n   - 3GPP band number\n - &lt;param1&gt;\n   - Frequency (100 kHz) Valid range 6000–22000 (corresponds to 600.0 MHz–2200.0 MHz)\n - &lt;param2&gt;\n   - TX signal power at the System in Package (SiP) antenna portValid range from +23 dBm to −50 dBm\n - &lt;param3&gt;\n   - System mode Valid range 0–1. Narrowband Internet of Things (NB-IoT) (0) or LTE-M (1).\n\n> *Note:*\n> Some LTE bands can be supported in only one of the system modes. To ensure that the band can be used, set the correct               mode with the [`%XSYSTEMMODE`](../mob_termination_ctrl_status/xsystemmode.dita#xsystemmode) command.\n\n\n - &lt;param4&gt;\n   - Modulation\n   - 0 – Quadrature Phase-Shift Keying (QPSK)\n   - 1 – 16-state Quadrature Amplitude Modulation (16-QAM)\n   - 2 – Reserved\n   - 3 – Binary Phase-Shift Keying (BPSK)\n   - 4 – Carrier Wave (CW)\n   - LTE-M: QPSK, 16-QAM, and CW\n   - NB-IoT: QPSK, BPSK, and CW\n   - \n\n> *Note:*\n> \n> \n>  - If `<param4>` is 4 (CW), in system modes Narrowband Internet of Things (NB-IoT) and LTE-M the CW tone is offset by 255 kHz from the frequency given in                     `<param1>`.\n>  - If `<param4>` is 4 (CW), the CW tone is offset from the frequency given in `<param1>` by 48.75 kHz in system mode NB-IoT and by 401.25 kHz in system mode                     LTE-M.\n>  - If `<param4>` is 4 (CW), `<param5>`, `<param6>`, and `<param7>` are 0 (do not care).\n> \n> \n> \n\n\n - &lt;param5&gt;\n   - Resource Block (RB)/Tone count\n\n> *Note:*\n> For allowed combinations for `<param5>`, `<param6>`, and `<param7>` in NB-IoT and LTE-M system modes (`<param3>`), see [](#xrftest_tx_set/table_jwj_qdb_rhb)\n\n\n - &lt;param6&gt;\n   - RB/Tone start position\n - &lt;param7&gt;\n   - Subcarrier spacing\n   - 0 – 15 k\n   - 1 – 3.75 k\n - &lt;param8&gt;\n   - System bandwidth\n   - 0 – NB-IoT\n   - 1 – 1.4 M\n   - 2 – Reserved\n   - 3 – 5 MHz\n   - 4 to 6 – Reserved\n - &lt;param9&gt;\n   - Narrowband index\n   - 0 – 1.4 M\n   - 0 to 3 – 5 M\n   - Defined in *3GPP TS 36.211 Ch. 6.2.7*\n\n> *Note:*\n> `<param9>` has effect only when `<param8>` is 3 (5 MHz).\n\n\n - &lt;param10&gt;\n   - TX burst mode\n   - 0 – Disable TX burst mode\n   - 1 – Enable TX burst mode\n   - For more information, see [](xrftest_tx_burst.dita#xrftest_tx_burst).\n\n\nThe allowed combinations for `<param5>`, `<param6>`, and `<param7>` for both system mode (`<param3>`) values are listed in the following table:\n\n> *Note:*\n> In system mode LTE-M, subcarrier spacing 3.75 kHz is not allowed.\n\nResponse syntax when `<operation>` is ON and TX burst mode is disabled:\n\n```\n%XRFTEST: <antenna_power>\n```\n\nThe response parameter and its defined value are the following:\n\n - &lt;antenna_power&gt;\n   - Internally measured TX power at the SiP antenna port in q4 dBm. q4 means that dividing the result by 24 = 16 gives dBm.\n\n\nThe following command example enables the RF transmitter for Band 5, 830.0 MHz, +17 dBm, NB-IoT, BPSK, 12 tones, tone start position 0, subcarrier spacing 15 kHz, system bandwidth         NB1, NB index 0, TX burst mode disabled:\n\n```\nAT%XRFTEST=1,1,5,8300,17,0,3,12,0,0,0,0,0 %XRFTEST: 271 OK \n```\n\n\n\n> *Note:*\n> 271/16 = 16.9 dBm\n\nThe following command example enables the RF transmitter for Band 5, 830 MHz, +17 dBm, LTE-M, 16-QAM, 6 RB, RB start position 0, subcarrier spacing 15 kHz, system bandwidth 5 MHz,         NB index 3, TX burst mode disabled:\n\n```\nAT%XRFTEST=1,1,5,8300,17,1,1,6,0,0,3,3,0 %XRFTEST: 271 OK \n```\n\nThe following command example disables the RF transmitter:\n\n```\nAT%XRFTEST=1,0 OK\n```\n\n"
      }
    }
  },
  "xrftest": {
    "title": "RX SNR test %XRFTEST",
    "shortDesc": "The Nordic-proprietary `%XRFTEST` command can be used to measure Signal-to-Noise Ratio (SNR).",
    "versions": ["v1.0.x", "v1.1.x", "v1.2.x", "v1.3.x", "pti_v1.1.x≥1"],
    "subCommands": {}
  },
  "xrftest_rx": {
    "title": "RX test %XRFTEST",
    "shortDesc": "The Nordic-proprietary `%XRFTEST` command can be used to test the nRF9160 receiver. The command enables the RF receiver and measures signal power at the       System in Package (SiP) antenna port with a time domain power meter and returns the measurement       result.",
    "versions": ["v1.0.x", "v1.1.x", "v1.2.x", "v1.3.x", "pti_v1.1.x≥1"],
    "subCommands": {
      "set": {
        "title": "Set command",
        "shortDesc": "The set command controls the RF receiver.",
        "ref": "Syntax:\n\n```\n%XRFTEST=<test>,<operation>[,<param0>,<param1>,<param2>,<param3>]\n```\n\nThe set command parameters and their defined values are the following:\n\n - &lt;test&gt;\n   - 0 – RX\n - &lt;operation&gt;\n   - 1 – ON\n   - 0 – OFF\n\n> *Note:*\n> Always send OFF `<operation>` before sending another ON `<operation>`.\n\n\n - &lt;param0&gt;\n   - 3GPP band number. Use 24 for Global Navigation Satellite System (GNSS) reception.\n - &lt;param1&gt;\n   - Frequency 100 kHz \n   - Valid range 6000–22000 (corresponds to 600.0 MHz–2200.0 MHz)\n\n> *Note:*\n> If Carrier Wave (CW) is used, an offset of about 45 kHz for Narrowband Internet of Things (NB-IoT) and 300 kHz for LTE-M is recommended.\n\n\n - &lt;param2&gt;\n   - RX signal power at the SiP antenna portValid range from −127 dBm to −25 dBm\n - &lt;param3&gt;\n   - System mode Valid range 0–1. NB-IoT (0) or LTE-M (1).\n\n\nResponse syntax when `<operation>` is ON:\n\n```\n%XRFTEST: <antenna_power>\n```\n\nThe response parameter and its defined value are the following:\n\n - &lt;antenna_power&gt;\n   - Measured power at the SiP antenna port in q8 dBm. q8 means that dividing the result by 28 = 256 gives dBm.\n\n\nThe following command example enables the RF receiver for Band 1, 2140.0 MHz, −65 dBm, NB-IoT mode:\n\n```\nAT%XRFTEST=0,1,1,21400,-65,0 %XRFTEST: -17002 OK\n```\n\n\n\n> *Note:*\n> −17002/256 = −66.4 dBm\n\nThe following command example disables the RF receiver: \n\n```\nAT%XRFTEST=0,0 OK\n```\n\n"
      }
    }
  },
  "xrftest_rf": {
    "title": "RF sensor test %XRFTEST",
    "shortDesc": "The Nordic-proprietary `%XRFTEST` command allows to read the temperature sensor next to the Power Amplifier (PA) inside the System in Package (SiP) and another temperature sensor inside the nRF9120 System on Chip (SoC).",
    "versions": ["v1.2.x", "v1.3.x", "pti_v1.1.x≥1"],
    "subCommands": {}
  },
  "xrftest_gps_snr": {
    "title": "GNSS SNR test %XRFTEST",
    "shortDesc": "The Nordic-proprietary `%XRFTEST` command can be used to execute a Global Navigation Satellite System (GNSS)Signal-to-Noise Ratio (SNR) test.",
    "versions": ["v1.0.x", "v1.1.x", "v1.2.x", "v1.3.x", "pti_v1.1.x≥1"],
    "subCommands": {
      "set": {
        "title": "Set command",
        "shortDesc": "The set command executes a Global Navigation Satellite System (GNSS)Signal-to-Noise Ratio (SNR) test. ",
        "ref": "GNSS L1 frequency is 1575.42 MHz. This test expects the Carrier Wave (CW) in signal generator to be 1575.750 MHz, which means that the offset is 330 kHz. The measurement         duration is 1 ms.Syntax:\n\n```\n%XRFTEST=<test>,<operation>,<param0>,<param1>,<param2>\n```\n\nThe set command parameters and their defined values are the following:\n\n - &lt;test&gt;\n   - 2 – GNSS SNR\n - &lt;operation&gt;\n   - 1 – ON\n\n> *Note:*\n> OFF `<operation>` is not needed due to automatic stop.\n\n\n - &lt;param0&gt;\n   - RX signal power at the System in Package (SiP) GNSS port\n   - Valid range from −127 dBm to −25 dBm or 0 = default gain −105 dBm\n\n\n\n\n - &lt;param1&gt;\n   - AFC correction\n   - 1 – Enable AFC correction in measurement\n   - 0 – Disable AFC correction in measurement\n - &lt;param2&gt;\n   - Frequency. Manually give RF frequency for nRF9160 in 100 kHz format. Accepted value is +/- 10 MHz from the default GNSS frequency of 1575.42 MHz. Set the signal generator to f             = `<param2>` + 330 kHz.\n\n> *Note:*\n> If `<param2>` is not given, nRF9160 uses the default GNSS L1 frequency 1575.42 MHz. \n\n\n\n\n\n\n> *Note:*\n> It is recommended to set the signal level defined in the GNSS SNR ON parameters to the expected signal level at the GNSS antenna port of the nRF9160 SiP.\n\nResponse syntax:\n\n```\n%XRFTEST: <snr>,<antenna_power>\n```\n\nThe response parameters and their defined values are the following:\n\n - &lt;snr&gt;\n   - The result of the SNR measurement in q4 dB. q4 means that dividing the result by 24 = 16 gives dB.\n - &lt;antenna_power&gt;\n   - Measured signal power at the SiP GNSS port in q8 dBm. q8 means that dividing the result by 28 = 256 gives dBm.\n\n\nThe following command example executes a GNSS SNR test with AFC disabled:\n\n```\nAT%XRFTEST=2,1,0,0 %XRFTEST: 514,-19968 OK\n```\n\n\n\n> *Note:*\n> 514/16 = 32.125 dB and −19968/256 = −78 dBm.\n\nThe following command example executes an GNSS SNR test for -80 dBm. AFC correction is enabled and uses the result of the previous AFC measurement or AFC set. Instead of the         default, the receiver frequency is set to 1575.0 MHz:\n\n```\nAT%XRFTEST=2,1,-80,1,15750 %XRFTEST: 312,-20480 OK \n```\n\n\n\n> *Note:*\n> 312/16 = 19.5 dB and -20480/256 = -80 dBm.\n\n"
      }
    }
  },
  "xrftest_afc": {
    "title": "AFC measurement and set %XRFTEST",
    "shortDesc": "The Nordic-proprietary `%XRFTEST` command can be used to measure or set the AFC error value for a given       frequency.",
    "versions": ["v1.2.x", "v1.3.x", "pti_v1.1.x≥1"],
    "subCommands": {
      "set": {
        "title": "Set command",
        "shortDesc": "The set command measures or sets the AFC error value for a given frequency. The default error value is 0.",
        "ref": "The AFC measurement and set functions are described in the following sections."
      }
    }
  },
  "xmipirffedbg": {
    "title": "MIPI RFFE interface access %XMIPIRFFEDBG",
    "shortDesc": "The Nordic-proprietary `%XMIPIRFFEDBG` command can be used to directly access registers on a MIPI RF Front-End Control Interface (RFFE) device.",
    "versions": ["pti_v1.1.x≥6"],
    "subCommands": {
      "set": {
        "title": "Set command",
        "shortDesc": "The set command provides direct read and write access to the registers of a MIPI RF Front-End Control Interface (RFFE) device configured with the `%XMIPIRFFECTRL` command.",
        "ref": "Syntax:\n\n```\n%XMIPIRFFEDBG=<dev_id>,<direction>,<address>,[<value>]\n```\n\nResponse syntax:\n\n```\n%XMIPIRFFEDBG=<status>,<readvalue>\n```\n\nThe set command parameters and their defined values are the following:\n\n - \n   - \n - &lt;direction&gt;\n   - 0 – Write to register.\n   - 1 – Read register.\n - &lt;address&gt;\n   - Address of the MIPI RFFE register as a decimal number.\n - &lt;value&gt;\n   - Value to be written to the register in decimal format. Applies only to the write command.\n - &lt;status&gt;\n   - Indicates the status of MIPI RFFE access.\n   - 0 – Success.\n   - 1 – No response event from the MIPI RFFE peripheral.\n   - 2 – Timeout during read.\n   - 3 – Undefined error.\n - &lt;readvalue&gt;\n   - Value read from MIPI RFFE device register. Returns the set value on register write.\n\n\nThe following command example reads register 0 of a MIPI RFFE device with device ID 1:\n\n```\nAT%XMIPIRFFEDBG=1,1,0 %XMIPIRFFEDBG: 0,2 OK \n```\n\nThe following command example writes value 5 to register 37 of a MIPI RFFE device with device ID 1:\n\n```\nAT%XMIPIRFFEDBG=1,0,37,5 %XMIPIRFFEDBG: 0,5 OK\n```\n\n"
      }
    }
  },
  "xgpiotest": {
    "title": "Modem GPIO functionality test %XGPIOTEST",
    "shortDesc": "The Nordic-proprietary `%XGPIOTEST` tests the functionality of the modem&apos;s General-Purpose Input/Output (GPIO) pins. ",
    "versions": ["pti_v1.1.x≥1"],
    "subCommands": {
      "set": {
        "title": "Set command",
        "shortDesc": "The set command allows the input and output control of the following modem General-Purpose Input/Output (GPIO) pins: `SIM_INT`, `SIM_RST`, `SIM_CLK`, `SIM_IO`, `COEX0`, `COEX1`, and `COEX2`.",
        "ref": "Syntax:\n\n```\n%XGPIOTEST=<direction>,<mask>,<pin_ctrl>\n```\n\nThe set command parameters and their defined values are the following:\n\n - &lt;direction&gt;\n   - 0 – Output\n   - 1 – Input\n - &lt;mask&gt;\n   - Bitmask for pins to control.\n   - 1 bit per pin in ascending pin order starting from bit 0.\n   - Control for some pins is possible only in input or output direction. The allowed pin control directions and bit positions are the following:\n   - SIM_INT – Input, LSB\n   - SIM_RST – Output\n   - SIM_CLK – Output\n   - SIM_IO – Input/Output\n   - COEX0 – Input/Output\n   - COEX1 – Output\n   - COEX2 – Input/Output, MSB\n - &lt;pin_ctrl&gt;\n   - Bits for controlling each masked pin. If `<direction>` is output, 1 sets the pin high and 0 sets the pin low. If `<direction>` is input, 1 needs to be set for each pin whose state is read.\n   - Control for some pins is allowed as either input or output. The allowed pin control directions and bit positions are the following:\n   - SIM_INT – Input, LSB\n   - SIM_RST – Output\n   - SIM_CLK – Output\n   - SIM_IO – Input/Output\n   - COEX0 – Input/Output\n   - COEX1 – Output\n   - COEX2 – Input/Output, MSB\n\n\nThe following command example configures all pins as output and sets their state low:\n\n```\nAT%XGPIOTEST=0,127,0 %XGPIOTEST:          OK\n```\n\nThe following command example sets all pins as input and reads the pin state of each pin:\n\n```\nAT%XGPIOTEST=1,127,127 %XGPIOTEST:  0x9         OK\n```\n\n"
      }
    }
  },
  "xfssync": {
    "title": "File system sync to flash %XFSSYNC",
    "shortDesc": "The Nordic-proprietary `%XFSSYNC` command synchronizes and stores AT command configurations to the modem’s non-volatile     memory.",
    "versions": ["pti_v1.1.x≥1"],
    "subCommands": {
      "set": {
        "title": "Set command",
        "shortDesc": "The set command writes user-modified configuration data to the modem&apos;s Non-volatile Memory (NVM) so that the data persists through the power off cycles. When using Production Test Image (PTI) firmware, this command must be used instead of `AT+CFUN=0` to store configuration data to NVM.",
        "ref": "The command stores to NVM configurations that are set with the following commands:\n\n - [`%XEMPR`](../mob_termination_ctrl_status/xempr.dita#xempr)\n - [`%XCOEX0`](../sip_pin_configuration/xcoex0.dita#xcoex0)\n - [`%XMAGPIO`](../sip_pin_configuration/xmagpio.dita#xmagpio)\n - [`%XMIPIRFFEDEV`](../sip_pin_configuration/xmipirffedev.dita#xmipirffedev)\n - [`%XMIPIRFFECTRL`](../sip_pin_configuration/xmipirffectrl.dita#xmipirffectrl)\n - [`%XANTCFG`](../sip_pin_configuration/xantcfg.dita#xantcfg)\n\n\nSyntax:\n\n```\n%XFSSYNC\n```\n\nThe following command example synchronizes and stores AT command configurations to the modem&apos;s NVM:\n\n```\nAT%XFSSYNC OK\n```\n\n"
      }
    }
  },
  "production_test": {
    "title": "Production test features",
    "shortDesc": "Production test AT commands can be used to test and verify products in device manufacturing. The Production Test Image (PTI) modem firmware supports a subset of AT commands for test purposes in non-signaling mode.",
    "versions": [],
    "subCommands": {}
  },
  "antdetmagpio": {
    "title": "Antenna detection test %XANTDETMAGPIO",
    "shortDesc": "The Nordic-proprietary `%XANTDETMAGPIO` command reads the MAGPIO pin status to detect if the antenna is connected. The antenna is detected when the pin is       DC-grounded.",
    "versions": ["v1.1.x", "v1.2.x", "v1.3.x", "pti_v1.1.x≥1"],
    "subCommands": {
      "test": {
        "title": "Test command",
        "shortDesc": "The test command changes the pin specified in the command to input mode and sets internal pull-up for the corresponding pin.",
        "ref": "After this, the pin state is read and reported in the command response. Syntax:\n\n```\n%XANTDETMAGPIO=<magpio_pin>\n```\n\nThe test command parameter and its defined values are the following:\n\n - &lt;magpio_pin&gt;\n   - 0, 1, 2 – The MAGPIO pin whose state is read.\n\n\nThe response values are the following:\n\n - 1 – Antenna connected\n - 0 – Antenna not connected\n\n\nAfter the command, the pin state is set back to normal (high-Z).The following command example sets MAGPIO pin 2 to input mode and sets internal pull-up for it. After this, the pin state is read and reported in the command response. After the         command, the pin state is set back to normal (high impedance         state):\n\n```\nAT%XANTDETMAGPIO=2 %XANTDETMAGPIO: 0 OK \n```\n\n"
      },
      "set": {
        "title": "Set command",
        "shortDesc": "The set command changes the pin specified in the command to input mode and sets internal pull-up for the corresponding pin.",
        "ref": "After this, the pin state is read and reported in the command response. Syntax:\n\n```\n%XANTDETMAGPIO=<magpio_pin>\n```\n\nThe set command parameter and its defined values are the following:\n\n - &lt;magpio_pin&gt;\n   - 0, 1, 2 – The MAGPIO pin whose state is read.\n\n\nThe response values are the following:\n\n - 1 – Antenna connected\n - 0 – Antenna not connected\n\n\nAfter the command, the pin state is set back to normal (high-Z).The following command example sets MAGPIO pin 2 to input mode and sets internal pull-up for it. After this, the pin state is read and reported in the command response. After the         command, the pin state is set back to normal (high impedance         state):\n\n```\nAT%XANTDETMAGPIO=2 %XANTDETMAGPIO: 0 OK \n```\n\n"
      }
    }
  },
  "xpdncfg": {
    "title": "PDN configuration %XPDNCFG",
    "shortDesc": "The Nordic-proprietary `%XPDNCFG` command sets and reads Packet Data Network (PDN) configurations.",
    "versions": ["v1.2.x≥1", "v1.3.x"],
    "subCommands": {
      "set": {
        "title": "Set command",
        "shortDesc": "The set command sets the Packet Data Network (PDN) configuration.",
        "ref": "The initial PDN connection that has been activated during the Attach procedure is automatically reactivated if an always-on PDN has been configured with the           `%XPDNCFG` command. The reactivation is triggered if deactivation occurs unexpectedly and is not requested by the client. The command configuration is stored to Non-volatile Memory (NVM) approximately every 48 hours and when the modem is powered off with the `+CFUN=0` command.Active `%XPOFWARN` warning blocks the storing to NVM.Syntax:\n\n```\n%XPDNCFG=<lifetime>\n```\n\nThe set command parameter and its defined values are the following: \n\n - &lt;lifetime&gt;\n   - 0 – Default PDN lifetime\n   - 1 – Always-on PDN. The initial PDN connection is automatically reactivated.\n\n\nThe following command example sets an always-on PDN for the initial PDN connection:\n\n```\nAT%XPDNCFG=1 OK \n```\n\nThe following command example removes the setting of the always-on PDN of the initial PDN       connection:\n\n```\nAT%XPDNCFG=0 OK\n```\n\n"
      },
      "read": {
        "title": "Read command",
        "shortDesc": "The read command reads the Packet Data Network (PDN) configuration.",
        "ref": "Response syntax:\n\n```\n%XPDNCFG?\n```\n\nThe following command example reads the initial PDN configuration when an always-on PDN has been configured:\n\n```\nAT%XPDNCFG? %XPDNCFG: 1 OK\n```\n\n"
      }
    }
  },
  "xpco": {
    "title": "Protocol configuration options notification %XPCO",
    "shortDesc": "The Nordic-proprietary `%XPCO` command subscribes Protocol Configuration Options (PCO) notifications.",
    "versions": ["v1.0.x", "v1.1.x", "v1.2.x", "v1.3.x"],
    "subCommands": {
      "set": {
        "title": "Set command",
        "shortDesc": "The set command subscribes Protocol Configuration Options (PCO) notifications.",
        "ref": "Syntax:\n\n```\n%XPCO=<n>\n```\n\nNotification syntax:\n\n```\n%XPCO: <id>,<container_data>\n```\n\nThe set command parameter and its defined values are the following:\n\n - &lt;n&gt;\n   - 0 – Unsubscribe PCO notifications\n   - 1 – Subscribe PCO notifications\n\n\nThe notification parameters and their defined values are the following:\n\n - &lt;id&gt;\n   - PCO identifier in decimal format\n - &lt;container_data&gt;\n   - String in hexadecimal International Reference Alphabet (IRA) format. An empty container data string indicates that PCO container has not been received.\n\n\nThe following command example subscribes Evolved Universal Terrestrial Radio Access (E-UTRA) signal quality notifications:\n\n```\nAT%XPCO=1 OK\n```\n\nThe following is an example of a PCO notification for a FF00h container:\n\n```\n%XPCO: 65280,\"A1B1C1D1\"\n```\n\n"
      }
    }
  },
  "xnewcid": {
    "title": "Allocate new CID %XNEWCID",
    "shortDesc": "The Nordic-proprietary `%XNEWCID` command allocates a new context identifier. Several context identifiers can share the same Packet Data Network (PDN).",
    "versions": ["v1.0.x", "v1.1.x", "v1.2.x", "v1.3.x"],
    "subCommands": {
      "set": {
        "title": "Set command",
        "shortDesc": "The set command is not supported.",
        "ref": ""
      },
      "read": {
        "title": "Read command",
        "shortDesc": "The read command allocates a new context identifier.",
        "ref": "The command allocates a unique context identifier, which can be referenced with other commands like [`+CGDCONT`](cgdcont.dita#cgdcont). The allocated identifier can be deallocated with the `+CGDCONT` command by giving only the `<cid>` parameter.The `%XNEWCID` command can be used instead of reading existing default context with `AT+CGDCONT?` and finding an unused `<cid>` value before configuring a new context.A maximum of four context identifiers can be defined. In some network configurations, the maximum can be less than four. The read command allocates a new context identifier.Response syntax:\n\n```\n%XNEWCID: <cid> \n```\n\nThe read command parameter and its defined value are the following:\n\n - &lt;cid&gt;\n   - Integer, 0–10.\n\n\nThe following command example requests the allocation of a new context identifier:\n\n```\nAT%XNEWCID? %XNEWCID: 2 OK\n```\n\n"
      }
    }
  },
  "xipv6fail": {
    "title": "External IP stack IPv6 address resolution/refresh failure %XIPV6FAIL",
    "shortDesc": "The Nordic-proprietary `%XIPV6FAIL` indicates an external IP stack IPv6 address resolution or refresh       failure.",
    "versions": ["v1.0.x", "v1.1.x", "v1.2.x", "v1.3.x"],
    "subCommands": {}
  },
  "xgetpdnid": {
    "title": "Map CID to PDN ID %XGETPDNID",
    "shortDesc": "The Nordic-proprietary `%XGETPDNID` command maps the context identifier to Packet Data Network (PDN) ID. Several context identifiers can share the same PDN. This command can be used only when the modem is    activated.",
    "versions": ["v1.0.x", "v1.1.x", "v1.2.x", "v1.3.x"],
    "subCommands": {
      "set": {
        "title": "Set command",
        "shortDesc": "The set command maps the context identifier to Packet Data Network (PDN) ID.",
        "ref": "PDN ID is used on a data path to select one of the existing connections for data transfer.Syntax:\n\n```\n%XGETPDNID=<cid>\n```\n\nResponse syntax:\n\n```\n%XGETPDNID: <pdn_id>\n```\n\nThe set command parameters and their defined values are the following:\n\n - &lt;cid&gt;\n   - Integer, 0–10.\n - &lt;pdn_id&gt;\n   - Integer, 0–10.\n\n\nThe following command example maps the context identifier to PDN ID 0:\n\n```\nAT%XGETPDNID=0 %XGETPDNID: 1 OK\n```\n\n"
      }
    }
  },
  "xepco": {
    "title": "Usage of ePCO/PCO in PDN connection establishment %XEPCO",
    "shortDesc": "The Nordic-proprietary `%XEPCO` command selects the usage of ePCO/Protocol Configuration Options (PCO) in Packet Data Network (PDN) connection establishment.",
    "versions": ["v1.0.x", "v1.1.x", "v1.2.x", "v1.3.x"],
    "subCommands": {
      "set": {
        "title": "Set command",
        "shortDesc": "The set command selects ePCO/Protocol Configuration Options (PCO) usage. The command configuration is stored to Non-volatile Memory (NVM) approximately every 48 hours and when the modem is powered off with the `+CFUN=0` command.",
        "ref": "Active `%XPOFWARN` warning blocks the storing to NVM.Syntax:\n\n```\n%XEPCO=<epco>\n```\n\nThe set command parameter and its defined values are the following:\n\n - &lt;epco&gt;\n   - 0 – Use PCO\n   - 1 – Use ePCO\n\n\nThe following command example disables ePCO and selects PCO:\n\n```\nAT%XEPCO=0 OK\n```\n\n"
      },
      "read": {
        "title": "Read command",
        "shortDesc": "The read command reads the state of ePCO/Protocol Configuration Options (PCO) usage.",
        "ref": "Response syntax: \n\n```\n%XEPCO=<epco>\n```\n\nThe following command example reads the state of ePCO/PCO usage:\n\n```\nAT%XEPCO? %XEPCO: 1 OK\n```\n\n"
      }
    }
  },
  "xapnstatus": {
    "title": "Use of APN %XAPNSTATUS",
    "shortDesc": "The Nordic-proprietary `%XAPNSTATUS` command enables and disables the use of an Access Point Name (APN).",
    "versions": ["v1.2.x", "v1.3.x"],
    "subCommands": {
      "set": {
        "title": "Set command",
        "shortDesc": "The set command enables or disables the use of an Access Point Name (APN). The command configuration is stored to Non-volatile Memory (NVM) approximately every 48 hours and when the modem is powered off with the `+CFUN=0` command.",
        "ref": "Active `%XPOFWARN` warning blocks the storing to NVM.Syntax:\n\n```\n%XAPNSTATUS=<status>,<APN>\n```\n\nThe set command parameters and their defined values are the following:\n\n - &lt;status&gt;\n   - 0 – Disable APN\n   - 1 – Enable APN\n - &lt;APN&gt;\n   - String. APN.\n\n\nThe following command example disables the use of an Internet APN:\n\n```\nAT%XAPNSTATUS=0,\"internet\" \n```\n\nThe following command example enables the use of an Internet       APN:\n\n```\nAT%XAPNSTATUS=1,\"internet\"\n```\n\n"
      },
      "read": {
        "title": "Read command",
        "shortDesc": "The read command reads a list of disabled Access Point Name (APN)s.",
        "ref": "Response syntax:\n\n```\n%XAPNSTATUS: [<apn_1>[,…<apn_n>]]\n```\n\nThe read command parameter and its defined value are the following:\n\n - &lt;apn_x&gt;\n   - String. APN.\n\n\nThe following command example reads a list of disabled APNs:\n\n```\nAT%XAPNSTATUS? %XAPNSTATUS: ”APN_1”,”APN_2” OK \n```\n\n"
      }
    }
  },
  "xapnclass": {
    "title": "APN class access %XAPNCLASS",
    "shortDesc": "The Nordic-proprietary `%XAPNCLASS` command reads Access Point Name (APN) class data.",
    "versions": ["v1.0.x", "v1.1.x", "v1.2.x", "v1.3.x"],
    "subCommands": {
      "set": {
        "title": "Set command",
        "shortDesc": "The set command reads Access Point Name (APN) class data. The command configuration is stored to Non-volatile Memory (NVM) approximately every 48 hours and when the modem is powered off with the `+CFUN=0` command.",
        "ref": "Active `%XPOFWARN` warning blocks the storing to NVM.Syntax:\n\n```\n%XAPNCLASS=<oper>,<class>[,<apn>]\n```\n\nRead response         syntax:\n\n```\n%XAPNCLASS: <class>,<apn>,<addr_type>\n```\n\nThe set command and response parameters and their defined values are the following:\n\n - &lt;oper&gt;\n   - 0 – Read\n - &lt;class&gt;\n   - APN class\n - &lt;apn&gt;\n   - APN name string\n - &lt;addr_type&gt;\n   - String\n   - IP – Internet Protocol\n   - IPV6 – Internet Protocol version 6\n   - IPV4V6 – Virtual type of dual IP stack\n\n\nThe following command example reads APN class 3:\n\n```\nAT%XAPNCLASS=0,3 %XAPNCLASS: 3,\"VZWAPN\",\"IPV4V6\" OK\n```\n\n"
      }
    }
  },
  "packet_domain": {
    "title": "Packet domain commands",
    "shortDesc": "Commands for the packet domain include commands that control packet-switched services.",
    "versions": [],
    "subCommands": {}
  },
  "cscon": {
    "title": "Signaling connection status notification +CSCON",
    "shortDesc": "The `+CSCON` command subscribes and configures unsolicited result code notifications.",
    "versions": ["v1.1.x", "v1.2.x", "v1.3.x"],
    "subCommands": {
      "test": {
        "title": "Test command",
        "shortDesc": "The test command returns a list of supported values of `<n>` as a compound value.",
        "ref": "Response syntax:\n\n```\n+CSCON: (list of supported <n>s)\n```\n\nThe test command parameter and its defined values are the following:\n\n - \n   - \n\n\nThe following command example returns the supported values:\n\n```\nAT+CSCON=? +CSCON: (0,1,2,3) OK\n```\n\n"
      },
      "set": {
        "title": "Set command",
        "shortDesc": "The set command subscribes and configures unsolicited result code notifications.",
        "ref": "Syntax:\n\n```\n+CSCON=[<n>]\n```\n\nThe set command parameter and its defined values are the following:\n\n - &lt;n&gt;\n   - 0 – Unsubscribe unsolicited indications\n   - 1 – Subscribe `<mode>`\n   - 2 – Subscribe `<mode>[,<state>]`\n   - 3 – Subscribe `<mode>[,<state>[,<access>]]`\n\n\nNotification syntax:\n\n```\n+CSCON: <mode>[,<state>[,<access]]\n```\n\nThe response parameters and their defined values are the following:\n\n - &lt;mode&gt;\n   - 0 – Idle\n   - 1 – Connected\n - &lt;state&gt;\n   - 7 – Evolved Terrestrial Radio Access Network (E-UTRAN) connected \n - &lt;access&gt;\n   - 4 – Radio access of type E-UTRAN FDD\n\n\nThe following command example enables level 3 indications:\n\n```\nAT+CSCON=3 OK\n```\n\nThe following is an example of a level-3-related unsolicited indication:\n\n```\n+CSCON: 1,7,4\n```\n\n"
      },
      "read": {
        "title": "Read command",
        "shortDesc": "The read command returns the current status of unsolicited result code presentation `<n>`.",
        "ref": "The parameter `<mode>` is returned always when `<n>=0` or when `<n>=1`. The optional parameter `<state>` is returned when `<n>=2` and `<access>` when `<n>=3`.Response syntax: \n\n```\n+CSCON: <n>,<mode>[,<state>[,<access]]\n```\n\nThe read command parameters and their defined values are the following:\n\n - \n   - \n\n\n\n\n - \n   - \n\n\nWhen reading the current signaling connection status, the following response indicates that unsolicited indications are disabled, and the modem is an idle state:\n\n```\nAT+CSCON? +CSCON: 0,0 OK \n```\n\nThe following response indicates that unsolicited indications are enabled, the modem mode is 1, E-UTRAN is connected and the radio access type is E-UTRAN FDD:\n\n```\nAT+CSCON? +CSCON: 3,1,7,4 OK\n```\n\n"
      }
    }
  },
  "cgpaddr": {
    "title": "Show PDP address(es) +CGPADDR",
    "shortDesc": "The `+CGPADDR` command returns a list of Packet Data Protocol (PDP) addresses for the specified context identifiers.",
    "versions": ["v1.0.x", "v1.1.x", "v1.2.x", "v1.3.x"],
    "subCommands": {
      "test": {
        "title": "Test command",
        "shortDesc": "The test command returns a list of defined `<cid>` values.",
        "ref": "Response syntax:\n\n```\n+CGPADDR: (list of defined <cid>s)\n```\n\nThe test command parameter and its defined value are the following:\n\n - &lt;cid&gt;\n   - Integer, 0–10.\n\n\nThe following command example returns a list of defined `<cid>` values:\n\n```\nAT+CGPADDR=? +CGPADDR: (0,1) OK\n```\n\n"
      },
      "set": {
        "title": "Set command",
        "shortDesc": "The set command returns a list of Packet Data Protocol (PDP) addresses for the specified context identifiers. This command issues a valid response only when the modem is     activated.",
        "ref": "Syntax:\n\n```\n+CGPADDR[=<cid>]\n```\n\nIf `<cid>` is not present, all activated contexts are listed.Response syntax:\n\n```\n[+CGPADDR: <cid>[,<PDP_addr_1>[,<PDP_addr_2>]]]\n```\n\nThe set command parameters and their defined values are the following:\n\n - &lt;cid&gt;\n   - Integer, 0–10.\n - &lt;PDP_addr_1&gt;\n   - String. For IPv4 given as a dot-separated numeric (0–255) parameter. For IPv6 given as a colon-separated hexadecimal (0x0000–0xFFFF) parameter.\n - &lt;PDP_addr_2&gt;\n   - String. Given as a colon-separated hexadecimal (0x0000–0xFFFF) parameter. Included when both IPv4 and IPv6 addresses are assigned.\n\n\nThe following command example returns the IP address for context 1:\n\n```\nAT+CGPADDR=1 +CGPADDR: 1,\"10.0.0.130\",\"1050:0000:0000:0000:0005:0600:300c:326b\" OK\n```\n\n"
      }
    }
  },
  "cgrep": {
    "title": "Packet domain event notification +CGEREP",
    "shortDesc": "The `+CGEREP` command subscribes packet domain event notifications.",
    "versions": ["v1.0.x", "v1.1.x", "v1.2.x", "v1.3.x"],
    "subCommands": {}
  },
  "cgeqosrd": {
    "title": "QoS dynamic parameters +CGEQOSRDP",
    "shortDesc": "The `+CGEQOSRDP` command reads dynamic Evolved Packet System (EPS)Quality of Service (QoS) parameters. The command issues a valid response only when the modem is    activated.",
    "versions": ["v1.0.x", "v1.1.x", "v1.2.x", "v1.3.x"],
    "subCommands": {
      "set": {
        "title": "Set command",
        "shortDesc": "The set command reads dynamic Evolved Packet System (EPS)Quality of Service (QoS) parameters.",
        "ref": "Syntax:\n\n```\n +CGEQOSRDP[=<cid>]\n```\n\nResponse syntax:\n\n```\n[+CGEQOSRDP: <cid>,<QCI>,[<DL_GBR>,<UL_GBR>],[<DL_MBR>,<UL_MBR>][,<DL_AMBR>,<UL_AMBR>]]\n```\n\nThe set command parameters and their defined values are the following:\n\n - &lt;cid&gt;\n   - Integer, 0–10. If the parameter `<cid>` is omitted, the QoS parameters for all active Packet Data Network (PDN)s are returned.\n - &lt;QCI&gt;\n   - Integer. Specifies a class of EPS QoS (see *3GPP TS 23.203* and *3GPP TS 24.301*).\n - &lt;DL_GBR&gt;, &lt;UL_GBR&gt;, &lt;DL_MBR&gt;, &lt;UL_MBR&gt;\n   - Not supported\n -  &lt;DL_AMBR&gt; \n   - Integer. Specifies downlink Access Point Name (APN) aggregate maximum bitrate. Value range 0–65280000 kbps.\n - &lt;UL_AMBR&gt;\n   - Integer. Specifies uplink APN aggregate maximum bitrate. Value range 0–65280000 kbps.\n\n\nThe following command example returns a list of contexts with QoS parameters:\n\n```\nAT+CGEQOSRDP +CGEQOSRDP: 0,0,, +CGEQOSRDP: 1,2,, +CGEQOSRDP: 2,4,,,1,65280000 OK\n```\n\n"
      }
    }
  },
  "cgdcont": {
    "title": "Define PDP context +CGDCONT",
    "shortDesc": "The `+CGDCONT` command defines Packet Data Network (PDN).",
    "versions": ["v1.0.x", "v1.1.x", "v1.2.x", "v1.3.x"],
    "subCommands": {
      "set": {
        "title": "Set command",
        "shortDesc": "The set command configures connection parameters.",
        "ref": "Syntax:\n\n```\n+CGDCONT=<cid> [,<PDP_type> [,<APN> [,<PDP_addr> [,<d_comp> [,<h_comp> [,<IPv4AddrAlloc> [,<request_type> [,<P-CSCF_discovery> [,<IM_CN_Signalling_Flag_Ind> [,<NSLPI> [,<securePCO>]]]]]]]]]]]\n```\n\n\n\n> *Note:*\n> `+CGDCONT=<cid>` causes the values for context number `<cid>` to become undefined.\n\nA maximum of four contexts can be defined. In some network configurations, the maximum can be less than four.The set command parameters and their defined values are the following:\n\n - &lt;cid&gt;\n   - Integer, 0–10 (mandatory). Specifies a particular Packet Data Network (PDN) definition. The parameter is local to the device and is used in other PDP             context-related commands.\n - &lt;PDP_type&gt;\n   - String\n   - IP – Internet Protocol\n   - IPV6 – Internet Protocol version 6\n   - IPV4V6 – Virtual type of dual IP stack\n   - Non-IP – Transfer of non-IP data to external packet data network (see *3GPP TS 23.401 [82]*)\n - &lt;APN&gt;\n   - String. Access Point Name (APN).\n - &lt;PDP_addr&gt;\n   - Ignored\n - &lt;d_comp&gt;\n   - Ignored\n - &lt;h_comp&gt;\n   - Ignored\n - &lt;IPv4AdrAlloc&gt;\n   - 0 – IPv4 address via Non-access Stratum (NAS) signaling (default)\n   - 1 – IPv4 address via Dynamic Host Configuration Protocol (DHCP)\n - &lt;request_type&gt;\n   - Ignored\n - &lt;P-CSCF_discovery&gt;\n   - Ignored\n - &lt;IM_CN_SignallingFlag&gt;\n   - Ignored\n - &lt;NSLPI&gt;\n   - 0 – Non-access Stratum (NAS) Signalling Low Priority Indication (NSLPI) value from configuration is used (default)\n   - 1 – Value &quot;Not configured&quot; for NAS signaling low priority\n - &lt;securePCO&gt;\n   - 0 – Protected transmission of Protocol Configuration Options (PCO) is not requested (default)\n   - 1 – Protected transmission of PCO is requested\n\n\nThe following command example configures CID 1 to use IPv4 and access point &quot;IOT_apn&quot;:\n\n```\nAT+CGDCONT=1,\"IP\",\"IOT_apn\" OK\n```\n\n"
      },
      "read": {
        "title": "Read command",
        "shortDesc": "The read command reads the list of defined contexts.",
        "ref": "Response syntax: \n\n```\n+CGDCONT: <cid>,<PDP_type>,<APN>,<PDP_addr>,<d_comp>,<h_comp>\n```\n\nThe read command parameters and their defined values are the following:\n\n - &lt;cid&gt;\n   - Integer, 0–10.\n - \n   - \n - \n   - \n\n\n\n\n - &lt;PDP_addr&gt;\n   - String. IP address.\n - &lt;d_comp&gt;\n   - 0 – Compression not supported\n - &lt;h_comp&gt;\n   - 0 – Compression not supported\n\n\nThe following command example reads configured default bearers:\n\n```\nAT+CGDCONT? +CGDCONT: 0,\"IP\",\"internet\",\"10.0.1.1\",0,0 +CGDCONT: 1,\"IP\",\"IOT_apn\",\"10.0.1.2\",0,0 OK\n```\n\n"
      }
    }
  },
  "cgcontrdp": {
    "title": "PDN connection dynamic parameters +CGCONTRDP",
    "shortDesc": "The `+CGCONTRDP` command returns information for an active Packet Data Network (PDN) connection. This command issues a valid response only when the modem is    activated.",
    "versions": ["v1.0.x", "v1.1.x", "v1.2.x", "v1.3.x"],
    "subCommands": {
      "set": {
        "title": "Set command",
        "shortDesc": "The set command attaches the User Equipment (UE) to or detaches the UE from the Packet Domain services.",
        "ref": "\n\n> *Note:*\n> The UE performs an attach automatically when activated. In normal operation there is no need to issue the `+CGATT` command.\n\nSyntax:\n\n```\n+CGATT=<state>\n```\n\nThe set command parameter and its defined values are the following:\n\n - &lt;state&gt;\n   - 0 – Detached\n   - 1 – Attached\n\n\nThe following command example performs an Evolved Packet System (EPS) attach:\n\n```\nAT+CGATT=1 OK\n```\n\n"
      }
    }
  },
  "cgauth": {
    "title": "Define PDN connection authentication parameters +CGAUTH",
    "shortDesc": "The `+CGAUTH` command specifies authentication parameters.",
    "versions": ["v1.0.x", "v1.1.x", "v1.2.x", "v1.3.x"],
    "subCommands": {
      "set": {
        "title": "Set command",
        "shortDesc": "The set command specifies authentication parameters for a Packet Data Network (PDN) connection specified by the ` <cid>` parameter.",
        "ref": "Syntax:\n\n```\n+CGAUTH=<cid>[,<auth_prot>[,<userid>[,<password>]]]\n```\n\nThe set command parameters and their defined values are the following:\n\n - &lt;cid&gt;\n   - Integer, 0–10.\n - &lt;auth_prot&gt;\n   - 0 – None. Username and password are removed if they have been specified.\n   - 1 – PAP\n   - 2 – CHAP\n - &lt;userid&gt;\n   - String\n - &lt;password&gt;\n   - String\n\n\nThe following command example sets authentication parameters for CID=1 context:\n\n```\nAT+CGAUTH=1,1,\"username\",\"password\" OK\n```\n\n"
      }
    }
  },
  "cgatt": {
    "title": "PS attach or detach +CGATT",
    "shortDesc": "The `+CGATT` command attaches the Mobile Termination (MT) to or detaches the MT from the Packet Domain    services.",
    "versions": ["v1.0.x", "v1.1.x", "v1.2.x", "v1.3.x"],
    "subCommands": {
      "test": {
        "title": "Test command",
        "shortDesc": "The test command returns a list of supported states.",
        "ref": "Response syntax:\n\n```\n+CGATT: (list of supported <state>s)\n```\n\nThe test command parameter and its defined values are the following:\n\n - \n   - \n\n\nThe following command example returns a list of supported states:\n\n```\nAT+CGATT=? +CGATT: (0,1) OK\n```\n\n"
      },
      "read": {
        "title": "Read command",
        "shortDesc": "The read command reads the state.",
        "ref": "Response syntax:\n\n```\n+CGATT: <state> \n```\n\nThe response parameters and their defined values are the following:\n\n - \n   - \n\n\nThe following command example reads the state in Evolved Packet System (EPS) attach state:\n\n```\nAT+CGATT? +CGATT: 1 OK\n```\n\n"
      }
    }
  },
  "cgact": {
    "title": "Activate PDP context +CGACT",
    "shortDesc": "The `+CGACT` command activates or deactivates a Packet Data Network (PDN) connection.",
    "versions": ["v1.0.x", "v1.1.x", "v1.2.x", "v1.3.x"],
    "subCommands": {
      "test": {
        "title": "Test command",
        "shortDesc": "The test command returns a list of supported states.",
        "ref": "Response syntax:\n\n```\n+CGACT: (list of supported <state>s)\n```\n\nThe test command parameter and its defined values are the following:\n\n - &lt;state&gt;\n   - 0 – Deactivate\n   - 1 – Activate\n\n\nThe following command example returns a list of supported states:\n\n```\nAT+CGACT=? +CGACT: (0,1) OK\n```\n\n"
      },
      "set": {
        "title": "Set command",
        "shortDesc": "The set command activates or deactivates a Packet Data Network (PDN) connection.",
        "ref": "\n\n> *Note:*\n> Initial PDN connection (cid 0) could not be activated or deactivated.\n\nFirst, the Packet Data Network (PDN) needs to be defined with the [`+CGDCONT`](cgdcont.dita#cgdcont) command.Syntax:\n\n```\n+CGACT=<state>,<cid>\n```\n\nThe set command parameters and their defined values are the following:\n\n - &lt;state&gt;\n   - 0 – Deactivate\n   - 1 – Activate\n - &lt;cid&gt;\n   - Integer, 0–10.\n\n\nThe following command example activates a bearer configured with CID 1:\n\n```\nAT+CGACT=1,1 OK\n```\n\n"
      },
      "read": {
        "title": "Read command",
        "shortDesc": "The read command reads a list of Packet Data Network (PDN) connections and states.",
        "ref": "Response syntax:\n\n```\n+CGACT: <cid>,<state>\n```\n\nThe read command parameters and their defined values are the following:\n\n - &lt;state&gt;\n   - 0 – Deactivate\n   - 1 – Activate\n - &lt;cid&gt;\n   - Integer, 0–10.\n\n\nThe following command example returns a list of connections with states:\n\n```\nAT+CGACT? +CGACT: 0,1 +CGACT: 1,1 OK\n```\n\n"
      }
    }
  },
  "ceppi": {
    "title": "Power preference indication for EPS +CEPPI",
    "shortDesc": "The `+CEPPI` command selects the power saving preference.",
    "versions": ["v1.0.x", "v1.1.x", "v1.2.x", "v1.3.x"],
    "subCommands": {
      "test": {
        "title": "Test command",
        "shortDesc": "The test command lists the supported power preferences.",
        "ref": "Syntax:\n\n```\n+CEPPI=(list of supported <power preference>s)\n```\n\nThe test command parameter and its defined values are the following:\n\n - \n   - \n\n\nThe following command example lists the supported power saving preferences:\n\n```\nAT+CEPPI=? +CEPPI: (0,1)\n```\n\n"
      },
      "set": {
        "title": "Set command",
        "shortDesc": "The set command selects if the User Equipment (UE) indicates to the network during radio connection that it prefers low power configuration.",
        "ref": "Syntax:\n\n```\n+CEPPI=<power_preference>\n```\n\nThe set command parameter and its defined values are the following:\n\n - &lt;power_preference&gt;\n   - 0 – Normal\n   - 1 – Low power consumption\n\n\nThe following command example selects the power saving preference:\n\n```\nAT+CEPPI=1 OK\n```\n\n"
      }
    }
  },
  "apnratectrl": {
    "title": "APN rate control %APNRATECTRL",
    "shortDesc": "The Nordic-proprietary `%APNRATECTRL` command requests Access Point Name (APN) rate control information.",
    "versions": ["v1.3.x≥1"],
    "subCommands": {
      "set": {
        "title": "Set command",
        "shortDesc": "The set command requests the configuration or status information of the Access Point Name (APN) rate control.",
        "ref": "The APN rate control configuration and status changes are available also as [`+CGEV`](cgev.dita#cgev) notifications.APN rate control is active only when the context is active. An indication of context deactivation, such as `+CGEV ME PDN DEACT <cid>`, received by a client indicates also that APN rate control configuration is removed for the context         identified by `<cid>`. If the context is activated again, a new APN rate control configuration is indicated to the client if it is configured by the         network.Syntax:\n\n```\n%APNRATECTRL=<mode>[,<cid>]\n```\n\nResponse syntax for status query:\n\n```\n%APNRATECTRL: <mode>,<cid>,<status>[,<remaining_time>]\n```\n\nResponse syntax for configuration query:\n\n```\n%APNRATECTRL: <mode>,<cid>,<number_of_packets>,<time_window>\n```\n\nThe set command parameters and their defined values are the following:\n\n - &lt;mode&gt;\n   - 0 – Request APN rate control status for a CID.\n   - 1 – Request APN rate control configurations.\n - &lt;cid&gt;\n   - Integer, 0 – 10.\n   - Mandatory in mode 0. Not used in mode 1.\n - &lt;status&gt;\n   - 0 – OFF. APN rate control is configured and currently not blocking uplink data.\n   - 1 – ON. APN rate control is configured and currently blocking uplink data.\n   - 2 – APN rate control is not configured for this CID.\n - &lt;remaining_time&gt;\n   - 0–604 800 – Remaining uplink data blocking time in seconds when status is `1`.\n   - Might be `0` if less than a full second remains, but blocking is still `ON`.\n - &lt;number_of_packets&gt;\n   - 0–16 777 215 – Number of data packets that the User Equipment (UE) is allowed to send during the time period indicated in               `<time_window>`.\n   - Values 0,0 of `<number_of_packets>`,`<time_window>` indicate that APN rate control is not configured.\n - &lt;time_window&gt;\n   - 60–604 800 – Time window in seconds (1 minute to 1 week).\n\n\nThe following command example requests the status of CID 1. APN rate control is `ON` with one minute remaining:\n\n```\nAT%APNRATECTRL=0,1 %APNRATECTRL: 0,1,1,60 OK \n```\n\nThe following command example requests the status of CID 2. APN rate control is `OFF`:\n\n```\nAT%APNRATECTRL=0,2 %APNRATECTRL: 0,2,0 OK \n```\n\nThe following command example requests APN rate control configurations. APN rate control is configured for CID 1 and 2:\n\n```\nAT%APNRATECTRL=1 %APNRATECTRL: 1,1,10,180 %APNRATECTRL: 1,2,100,60 OK \n```\n\nThe following command example requests APN rate control configurations. Only CID 0 is active. APN rate control is not configured:\n\n```\nAT%APNRATECTRL=1 %APNRATECTRL: 1,0,0 OK\n```\n\n"
      }
    }
  },
  "mob_termination_errors": {
    "title": "Mobile termination errors",
    "shortDesc": "For reference, see *3GPP 27.007 Ch. 9*.",
    "versions": [],
    "subCommands": {}
  },
  "cnec": {
    "title": "Network error code notification +CNEC",
    "shortDesc": "The `+CNEC` command activates or deactivates unsolicited reporting of error codes sent by the    network.",
    "versions": ["v1.0.x", "v1.1.x", "v1.2.x", "v1.3.x"],
    "subCommands": {
      "read": {
        "title": "Read command",
        "shortDesc": "The read command returns the current setting of `<n>`. ",
        "ref": "Response syntax:\n\n```\n+CNEC: <n>\n```\n\nThe read command parameter and its defined values are the following:\n\n - &lt;n&gt;\n   - 0 – Disable \n   - 8 – `+CNEC_EMM` enabled\n   - 16 – `+CNEC_ESM` enabled \n   - 24 – `+CNEC_EMM` and `+CNEC_ESM`\n\n\nThe following command example reads the `+CNEC` error code setting, both `CNEC_EMM` and `CNEC_ESM` enabled:\n\n```\nAT+CNEC? +CNEC: 24 OK\n```\n\n"
      },
      "set": {
        "title": "Set command",
        "shortDesc": "The set command activates or deactivates unsolicited reporting of error codes sent by the network.",
        "ref": "Syntax:\n\n```\n+CNEC=[<n>]\n```\n\nThe set command parameters and their defined values are the following:\n\n - &lt;n&gt;\n   - 0 – Disable unsolicited error reporting\n   - 8 – Enable unsolicited result code `+CNEC_EMM: <error_code>[,<cid>]` to report Evolved Packet System (EPS) mobility management errors\n   - 16 – Enable unsolicited result code `+CNEC_ESM: <error_code>[,<cid>]` to report EPS session management errors\n   - 24 – Enable unsolicited result codes for `+CNEC_EMM: <error_code>[,<cid>]` and `+CNEC_ESM: <error_code>[,<cid>]`\n - &lt;error_code&gt;\n   - *3GPP TS 24.301 Table 9.9.3.9.1* for EPS mobility management errors codes\n   - *3GPP TS 24.301 Table 9.9.4.4.1* for EPS session management errors codes\n - &lt;cid&gt;\n   - 0–10. `<cid>` is present if `<error_code>` is related to a specific `<cid>`.\n\n\nThe following command example enables `CNEC_ESM` error codes:\n\n```\nAT+CNEC=16 OK\n```\n\nThe following notification example shows EPS Mobility Management (EMM) Cause 22 (Congestion) received from the network:\n\n```\n+CNEC_EMM: 22\n```\n\n"
      }
    }
  },
  "cmee": {
    "title": "Mobile termination error notification +CMEE",
    "shortDesc": "The `+CMEE` command disables or enables the use of the final result code `+CME ERROR`.",
    "versions": ["v1.0.x", "v1.1.x", "v1.2.x", "v1.3.x"],
    "subCommands": {
      "set": {
        "title": "Set command",
        "shortDesc": "The set command disables or enables the use of the final result code `+CME ERROR`.",
        "ref": "Syntax: \n\n```\n+CMEE=[<n>]\n```\n\nThe set command parameter and its defined values are the following:\n\n - &lt;n&gt;\n   - 0 – Disable and use `ERROR` instead (default)\n   - 1 – Enable `+CME ERROR: <err>` result code and use numeric `<err>` values. `<err>` values are specified in *3GPP TS 27.007 Ch. 9.2*. Vendor-specific values listed in the command chapters, the value range starts from 512.\n\n\nThe following command example enables error codes in responses:\n\n```\nAT+CMEE=1 OK\n```\n\n"
      },
      "read": {
        "title": "Read command",
        "shortDesc": "The read command returns the current setting of `<n>`.",
        "ref": "Response syntax: \n\n```\n+CMEE: <n> \n```\n\nThe read command parameter and its defined values are the following:\n\n - &lt;n&gt;\n   - 0 – Disabled. `ERROR` used as the final response in case of failure.\n   - 1 – Enabled. `+CME ERROR: <err>` result code and numeric `<err>` values used.\n\n\nThe following command example reads the current error code setting:\n\n```\nAT+CMEE? +CMEE: 1 OK\n```\n\n"
      }
    }
  },
  "ceer": {
    "title": "Extended error report +CEER",
    "shortDesc": "The `+CEER` command returns an extended error report.",
    "versions": ["v1.0.x", "v1.1.x", "v1.2.x", "v1.3.x"],
    "subCommands": {}
  },
  "xtime": {
    "title": "Network time notification %XTIME",
    "shortDesc": "The Nordic-proprietary `%XTIME` command subscribes unsolicited network time       notifications.",
    "versions": ["v1.0.x", "v1.1.x", "v1.2.x", "v1.3.x"],
    "subCommands": {
      "set": {
        "title": "Set command",
        "shortDesc": "The set command subscribes unsolicited network time notifications. The notification is sent when EPS Mobility Management (EMM) information Protocol Data Unit (PDU) with time information is received.",
        "ref": "Syntax:\n\n```\n%XTIME=<n>\n```\n\nNotification syntax:\n\n```\n%XTIME: [<local_time_zone>],[<universal_time>],[<daylight_saving_time>]\n```\n\nThe set command and notification parameters and their defined values are the following:\n\n - &lt;n&gt;\n   - 0 – Unsubscribe unsolicited network time\n   - 1 – Subscribe unsolicited network time\n - &lt;local_time_zone&gt;\n   - String in hexadecimal format. 1-byte optional field for the local time zone as specified in *3GPP TS 24.008 Ch. 10.5.3.8 Time Zone* and received from network.\n - &lt;universal_time&gt;\n   - String in hexadecimal format. 7-byte optional field for universal time as specified in *3GPP TS 24.008 Ch. 10.5.3.9 Time Zone and Time* and received from network. \n - &lt;daylight_saving_time&gt;\n   - String in hexadecimal format. 1-byte optional field for daylight saving time as specified in *3GPP TS 24.008 Ch. 10.5.3.12 Daylight Saving Time* and received from network. \n\n\nThe following command example subscribes notifications:\n\n```\nAT%XTIME=1 OK\n```\n\nAn example of an unsolicited notification for network time with all parameters:\n\n```\n%XTIME: \"08\",\"81109251714208\",\"01\"\n```\n\nAn example of an unsolicited notification for network time without local time zone:\n\n```\n%XTIME: ,\"81109251714208\",\"01\"\n```\n\n"
      }
    }
  },
  "xrai": {
    "title": "Release assistance indication %XRAI",
    "shortDesc": "The Nordic-proprietary `%XRAI` command sets Release Assistance Indication (RAI).",
    "versions": ["v1.0.x", "v1.1.x", "v1.2.x", "v1.3.x"],
    "subCommands": {
      "set": {
        "title": "Set command",
        "shortDesc": "The set command sets Release Assistance Indication (RAI).",
        "ref": "Syntax:\n\n```\n%XRAI[=<rai>]\n```\n\nThe set command parameter and its defined values are the following:\n\n - &lt;rai&gt;\n   - RAI sent to the network\n   - 0 – Undefined, default\n   - 3 – Control plane one response (see *3GPP TS 24.301, subclause 9.9.4.25*)\n   - 4 – Control plane no response (see *3GPP TS 24.301, subclause 9.9.4.25*)\n\n\n\n\n> *Note:*\n> \n> \n>  - RAI is used in control plane data. The current release supports control plane data only in Narrowband Internet of Things (NB-IoT).\n>  - When `<rai>` is set to 3 or 4, the User Equipment (UE) includes RAI to the next control plane uplink data transmission until a new value is given. The network is not expecting more uplink data and releases the radio connection.             Further uplink data transfer requires additional signaling for establishing a radio             connection. \n>  - This method does not function properly when an application or device sends multiple packets to uplink without receiving anything in between. The `%XRAI` setting does not mark a specific packet as the last one, and the application does not             know when a packet has actually been sent.\n> \n> \n> \n\nThe command configuration is stored to Non-volatile Memory (NVM) approximately every 48 hours and when the modem is powered off with the `+CFUN=0` command.Active `%XPOFWARN` warning blocks the storing to NVM.The following command example sets RAI when the application has one packet to be sent and no response from the         network is expected:\n\n```\nAT%XRAI=4 OK\n```\n\nThis setting should be disabled only after it is clear that the data has been sent or the final receive has been         done. This indication could be received, for example, from [`+CSCON`](../packet_domain/cscon.dita#cscon) when the device enters LTE idle state."
      },
      "read": {
        "title": "Read command",
        "shortDesc": "The read command reads Release Assistance Indication (RAI).",
        "ref": "Response syntax:\n\n```\n%XRAI: <rai>\n```\n\nThe response parameters and their defined values are the following:\n\n - \n   - \n\n\nThe following command example reads RAI, the response being &quot;Control plane no response&quot;:\n\n```\nAT%XRAI? %XRAI: 4 OK\n```\n\n"
      }
    }
  },
  "xopname": {
    "title": "Operator name notification %XOPNAME",
    "shortDesc": "The Nordic-proprietary `%XOPNAME` command subscribes unsolicited operator name             notifications.",
    "versions": ["v1.0.x", "v1.1.x", "v1.2.x", "v1.3.x"],
    "subCommands": {
      "set": {
        "title": "Set command",
        "shortDesc": "The set command subscribes unsolicited operator name notifications. The notification is sent when EPS Mobility Management (EMM) information Protocol Data Unit (PDU) with the operator name is received.",
        "ref": "Syntax:\n\n```\n%XOPNAME=<n>\n```\n\nNotification syntax:\n\n```\n%XOPNAME: [<full_name>],[<short_name>],[<oper>]\n```\n\nThe set command and notification parameters and their defined values are the following:\n\n - &lt;n&gt;\n   - 0 – Unsubscribe unsolicited operator names\n   - 1 – Subscribe unsolicited operator names\n - &lt;full_name&gt;\n   - String in hexadecimal format. Optional field for the full operator name as specified in *3GPP TS 24.008 Ch. 10.5.3.5a Network Name* and received from network. The first octet describes the number of spare bits in the last octet, usage of country             initials, and the coding scheme of the network name. Octets 2−n specify the network             name.\n - &lt;short_name&gt;\n   - String in hexadecimal format. Optional field for a short operator name as specified in *3GPP TS 24.008 Ch. 10.5.3.5a Network Name* and received from network. The first octet describes the number of spare bits in the last octet, usage of country             initials, and the coding scheme of the network name. Octets 2−n specify the network             name.\n - &lt;oper&gt;\n   - String of digits. Mobile Country Code (MCC) and Mobile Network Code (MNC) values.\n\n\nThe following command example subscribes notifications:\n\n```\nAT%XOPNAME=1 OK\n```\n\nAn example of an unsolicited notification for a full and a short operator name:\n\n```\n%XOPNAME: \"88D6B23CAD7FBB41D7B4BCCC2ECFE7\",\"8B56FD15\",\"556776\"\n```\n\nAn example of an unsolicited notification for a short operator name:\n\n```\n%XOPNAME: ,\"8B56FD15\",\"556776\"\n```\n\n"
      }
    }
  },
  "xoperid": {
    "title": "Operator ID %XOPERID",
    "shortDesc": "The Nordic-proprietary `%XOPERID` command identifies the operator Universal Subscriber Identity Module (USIM).",
    "versions": ["v1.0.x", "v1.1.x", "v1.2.x", "v1.3.x"],
    "subCommands": {
      "set": {
        "title": "Set command",
        "shortDesc": "The set command returns the operator ID.",
        "ref": "Syntax:\n\n```\n%XOPERID\n```\n\nResponse syntax:\n\n```\n%XOPERID: <oper_id>\n```\n\nThe response parameter and its defined values are the following:\n\n - &lt;oper_id&gt;\n   - 0 – Operator not identified as any of those listed below\n   - 1 – Verizon\n   - 2 – AT&amp;T\n   - 3 – AT&amp;T FirstNet\n   - 4 – AT&amp;T Cricket\n   - 5 – AT&amp;T Jasper\n   - 6 – China Telecom\n   - 7 – Softbank\n   - 8 – Telstra\n   - 9 – Bell\n   - 10 – LG U+\n   - 11 – KDDI\n   - 12 – Truphone\n   - 13 – Telus Jasper V2\n   - 14 – Vodafone\n   - 15 – T-Mobile US\n   - 16 – Deutsche Telekom\n   - 17 – Rogers\n   - 18 – Orange\n   - 19 – KT\n\n\nThe following command example returns the operator ID:\n\n```\nAT%XOPERID %XOPERID: 1 OK\n```\n\n"
      }
    }
  },
  "xopconf": {
    "title": "Mobile network operator %XOPCONF",
    "shortDesc": "The Nordic-proprietary `%XOPCONF` command configures the modem for the selected mobile network    operator.",
    "versions": ["v1.1.x≥3", "v1.2.x≥7", "v1.3.x"],
    "subCommands": {
      "set": {
        "title": "Set command",
        "shortDesc": "The set command configures the modem to comply with the requirements of various mobile network operators.",
        "ref": "The command configuration is stored to Non-volatile Memory (NVM) approximately every 48 hours and when the modem is powered off with the `+CFUN=0` command. The stored configuration is in use when the device is powered on.Active `%XPOFWARN` warning blocks the storing to NVM.Syntax:\n\n```\n%XOPCONF=<op_conf>\n```\n\nThe set command parameter and its defined values are the following:\n\n - &lt;op_conf&gt;\n<!--  <pd>0 – Default</pd> -->   - Integer\n   - 1 – Automatically detected from International Mobile Subscriber Identity (IMSI)\n   - 2 – Verizon\n   - 3 – AT&amp;T\n   - 4 – China Telecom\n   - 5 – Softbank\n   - 6 – Telstra\n   - 7 – Bell\n   - 8 – LG U+\n   - 9 – KDDI\n   - 10 – Truphone\n   - 11 – Telus Jasper V2\n   - 12 – Vodafone\n   - 13 – T-Mobile\n   - 14 – Deutsche Telekom\n   - 15 – Rogers\n   - 16 – Orange\n   - 17 – KT\n\n\nThe following command example sets Verizon operator configuration:\n\n```\nAT%XOPCONF=2 OK\n```\n\n"
      },
      "read": {
        "title": "Read command",
        "shortDesc": "The read command reads the current mobile network operator configuration.",
        "ref": "Response syntax:\n\n```\n%XOPCONF: <op_conf>\n```\n\nThe read command response parameter and its defined values are the following:\n\n - \n   - \n\n\nThe following command example reads the configured operator:\n\n```\nAT%XOPCONF? AT%XOPCONF: 2 OK\n```\n\n"
      }
    }
  },
  "xnettime": {
    "title": "Network time support %XNETTIME",
    "shortDesc": "The Nordic-proprietary `%XNETTIME` command controls if the time received from the network is       used.",
    "versions": ["v1.1.x", "v1.2.x", "v1.3.x"],
    "subCommands": {
      "set": {
        "title": "Set command",
        "shortDesc": "The set command sets the requested network time support.",
        "ref": "Network time support is enabled by default. The command configuration is stored to Non-volatile Memory (NVM) approximately every 48 hours and when the modem is powered off with the `+CFUN=0` command.Active `%XPOFWARN` warning blocks the storing to NVM.The network time may be received in NITZ IE as a part of EMM information message or from SIB16. If both are available, the         SIB16 time is prioritized due to higher accuracy. SIB16 reception has its own control         options in addition to the network time support. If optional parameter for SIB16 support is         not set, the functionality is as specified in parameter value         2.Syntax:\n\n```\n%XNETTIME=<network_time_support>[,<sib16_support>]\n```\n\nThe set command parameter and its defined values are the following:\n\n - &lt;network_time_support&gt;\n   - 0 – Disable network time support.\n   - 1 – Enable network time support.\n - &lt;sib16_support&gt;\n   - 0 – Support for time information from SIB16 is disabled.\n   - 1 – The modem supports time information from SIB16. When a cell is changed before starting idle mode operations or entering a connection, the modem attempts to receive             SIB16 until it is received successfully. The cell selections might take more time, but             the time information from SIB16 is more likely available for applications after a cell             has been selected, for example, during the first connection that is established after             modem activation.\n   - 2 – The modem supports time information from SIB16. The SIB16 reception does not cause delays in cell selections, but the time information from SIB16 is available only after             the modem has been in RRC idle mode long enough to capture the broadcast message.\n\n\n\n\n> *Note:*\n> \n> \n>  - Setting `<sib16_support>` to `1` might cause a delay in establishing a connection after modem activation. The delay can be up to 40             seconds in LTE-M and up to 5 minutes 30 seconds in Narrowband Internet of Things (NB-IoT) in every cell where connection is attempted until time information from SIB16 is received.\n>  - Setting `<sib16_support>` to `1` or `2` does not stop the modem from selecting a cell if SIB16 reception fails, for example, due to poor radio conditions. The modem makes more attempts later to             receive time information from SIB16 during normal idle mode operation before             establishing a connection.\n> \n> \n> \n\nThe following command example disables network time support:\n\n```\nAT%XNETTIME=0 OK\n```\n\n"
      },
      "read": {
        "title": "Read command",
        "shortDesc": "The read command reads network time support.",
        "ref": "Response syntax:\n\n```\n%XNETTIME: <network_time_support>[,<sib16_support>]\n```\n\nThe response parameter and its defined values are the following:\n\n - \n   - \n - \n   - \n\n\nThe following command example reads network time support:\n\n```\nAT%XNETTIME? %XNETTIME: 0 OK\n```\n\n"
      }
    }
  },
  "xmonitor": {
    "title": "Modem parameters %XMONITOR",
    "shortDesc": "The Nordic-proprietary `%XMONITOR` command reads a set of modem parameters.",
    "versions": ["v1.0.x", "v1.1.x", "v1.2.x", "v1.3.x"],
    "subCommands": {
      "set": {
        "title": "Set command",
        "shortDesc": "The set command reads modem parameters.",
        "ref": "Syntax:\n\n```\n%XMONITOR\n```\n\nResponse syntax:\n\n```\n%XMONITOR: <reg_status>,[<full_name>,<short_name>,<plmn>,<tac>,<AcT>,<band>,<cell_id>, <phys_cell_id>,<EARFCN>,<rsrp>,<snr>,<NW-provided_eDRX_value>,<Active-Time>,<Periodic-TAU>]\n```\n\nResponse syntax:\n\n```\n%XMONITOR: <reg_status>,[<full_name>,<short_name>,<plmn>,<tac>,<AcT>,<band>,<cell_id>, <phys_cell_id>,<EARFCN>,<rsrp>,<snr>,<NW-provided_eDRX_value>,<Active-Time>,&lt;Periodic-TAU-ext&gt;, <Periodic-TAU>]\n```\n\nThe response parameters and their defined values are the following:\n\n> *Note:*\n> The value is applicable only in WB-S1 mode. If received in NB-S1 mode it is interpreted as if         the Extended DRX parameters IE were not included in the message by this version of the         protocol.\n\n\n\n> *Note:*\n> The value is applicable only in WB-S1 mode. If received in NB-S1 mode it is interpreted as 0010 by this version of the protocol.\n\n\n\n> *Note:*\n> The value is applicable only in NB-S1 mode. If received in WB-S1 mode it is interpreted as 1101 by this version of the protocol.\n\n\n\n - &lt;reg_status&gt;\n   - 0 – Not registered. User Equipment (UE) is not currently searching for an operator to register to.\n   - 1 – Registered, home network\n   - 2 – Not registered, but UE is currently trying to attach or searching an operator to register to\n   - 3 – Registration denied\n   - 4 – Unknown (for example, out of Evolved Terrestrial Radio Access Network (E-UTRAN) coverage)\n   - 5 – Registered, roaming\n   - 90 – Not registered due to Universal Integrated Circuit Card (UICC) failure\n   - \n\n> *Note:*\n> The optional part is included in the response only when `<reg_status>` is 1 or 5. Some parameters may not be present in specific circumstances. For example, `<phys_cell_id>`, `<EARFCN>`, `<rsrp>`, and `<snr>` are not available when the device is not camped on a cell.\n\n\n - &lt;full_name&gt;\n   - String in alphanumeric format. Operator name.\n - &lt;short_name&gt;\n   - String in alphanumeric format. Operator name.\n - &lt;plmn&gt;\n   - String of digits. Mobile Country Code (MCC) and Mobile Network Code (MNC) values.\n - &lt;tac&gt;\n   - String in hexadecimal format. 2-byte Tracking Area Code (TAC).\n - &lt;AcT&gt;\n   - 7 – E-UTRAN\n   - 9 – E-UTRAN NB-S1\n - &lt;band&gt;\n   - Integer, 1−68. See *3GPP 36.101*. The value is 0 when current band information is not available.\n - &lt;cell_id&gt;\n   - String in hexadecimal format. 4-byte E-UTRAN cell ID.\n - &lt;phys_cell_id&gt;\n   - Integer. Physical cell ID.\n - &lt;EARFCN&gt;\n   - Integer. E-UTRA Absolute Radio Frequency Channel Number (EARFCN) for a given cell where EARFCN is as defined in *3GPP TS 36.101*.\n - \n   - \n - \n   - \n\n\n\n\n - &lt;NW-provided_eDRX_value&gt;\n   - String. Half a byte in 4-bit format. The Extended Discontinuous Reception (eDRX) value refers to bit 4 to 1 of octet 3 of the Extended DRX parameters information element (see               *3GPP TS 24.008, subclause 10.5.5.32*).Bit4 3 2 1 – E-UTRAN e-I-DRX cycle length duration0 0 0 0 – 5.12 seconds[](#xmonitor_set/wbs1_fn)0 0 0 1 – 10.24 seconds[](#xmonitor_set/wbs1_fn)0 0 1 0 – 20.48 seconds0 0 1 1 – 40.96 seconds0 1 0 0 – 61.44 seconds[](#xmonitor_set/nbs1_fn)0 1 0 1 – 81.92 seconds0 1 1 0 – 102.4 seconds[](#xmonitor_set/nbs1_fn)0 1 1 1 – 122.88 seconds[](#xmonitor_set/nbs1_fn)1 0 0 0 – 143.36 seconds[](#xmonitor_set/nbs1_fn)1 0 0 1 – 163.84 seconds1 0 1 0 – 327.68 seconds1 0 1 1 – 655,36 seconds1 1 0 0 – 1310.72 seconds1 1 0 1 – 2621.44 seconds1 1 1 0 – 5242.88 seconds[](#xmonitor_set/1101_fn)1 1 1 1 – 10485.76 seconds[](#xmonitor_set/1101_fn)\n - &lt;Active-Time&gt;\n   - String. 1 byte in 8-bit format.Optional. Timer value updated if present. If not present, the value of the requested Active-Time is set to the manufacturer-specific               default. For the coding and value range, see the GPRS Timer 2 IE in *3GPP TS 24.008* Table 10.5.163/3GPP TS 24.008.Bits 5 to 1 represent the binary coded timer value.Bits 8 to 6 define the timer value unit for the General Packet Radio Services (GPRS) timer as follows:Bits8 7 60 0 0 – Value is incremented in multiples of 2 seconds0 0 1 – Value is incremented in multiples of 1 minute0 1 0 – Value is incremented in multiples of 6 minutes1 1 1 – Value indicates that the timer is deactivated\n - &lt;Periodic-TAU&gt;\n   - String. 1 byte in 8-bit format. \n   - Indicates the extended periodic Tracking Area Update (TAU) value (T3412_EXT extended value) allocated to the device in E-UTRAN. For the coding and value range, see             the GPRS Timer 3 IE in *3GPP TS 24.008* Table 10.5.163a/3GPP TS 24.008.\n   - GPRS Timer 3 value (octet 3).\n   - Bits 5 to 1 represent the binary coded timer value. \n   - Bits 8 to 6 defines the timer value unit for the GPRS timer as follows: \n   - Bits\n   - 8 7 6\n   - 0 0 0 – Value is incremented in multiples of 10 minutes\n   - 0 0 1 – Value is incremented in multiples of 1 hour\n   - 0 1 0 – Value is incremented in multiples of 10 hours\n   - 0 1 1 – Value is incremented in multiples of 2 seconds\n   - 1 0 0 – Value is incremented in multiples of 30 seconds\n   - 1 0 1 – Value is incremented in multiples of 1 minute\n   - 1 1 0 – Value is incremented in multiples of 320 hours\n   - 1 1 1 – Value indicates that the timer is deactivated\n - &lt;Periodic-TAU-ext&gt;\n   - String. 1 byte in 8-bit format. \n   - Indicates the extended periodic TAU value (T3412_EXT extended value) allocated to the device in E-UTRAN. For the coding and value range, see the GPRS Timer 3 IE in *3GPP TS 24.008* Table 10.5.163a/3GPP TS 24.008.\n   - GPRS Timer 3 value (octet 3).\n   - Bits 5 to 1 represent the binary coded timer value. \n   - Bits 8 to 6 defines the timer value unit for the GPRS timer as follows: \n   - Bits\n   - 8 7 6\n   - 0 0 0 – Value is incremented in multiples of 10 minutes\n   - 0 0 1 – Value is incremented in multiples of 1 hour\n   - 0 1 0 – Value is incremented in multiples of 10 hours\n   - 0 1 1 – Value is incremented in multiples of 2 seconds\n   - 1 0 0 – Value is incremented in multiples of 30 seconds\n   - 1 0 1 – Value is incremented in multiples of 1 minute\n   - 1 1 0 – Value is incremented in multiples of 320 hours\n   - 1 1 1 – Value indicates that the timer is deactivated\n - &lt;Periodic-TAU&gt;\n   - String. 1 byte in 8-bit format. Optional. Timer value updated if present. If not present, the value of the requested Periodic-TAU is set to the               manufacturer-specific default. For the coding and value range, see the GPRS Timer IE               in *3GPP TS 24.008* Table 10.5.172/3GPP TS 24.008.\n   - Timer value (octet 2).\n   - Bits 5 to 1 represent the binary coded timer value.\n   - Bits 8 to 6 defines the timer value unit for the GPRS timer as follows:\n   - Bits\n   - 8 7 6\n   - 0 0 0 – Value is incremented in multiples of 2 seconds\n   - 0 0 1 – Value is incremented in multiples of 1 minute\n   - 0 1 0 – Value is incremented in multiples of 6 minutes\n   - 1 1 1 – Value indicates that the timer is deactivated\n\n\nThe following command example reads modem parameters:\n\n```\nAT%XMONITOR %XMONITOR: 1,\"EDAV\",\"EDAV\",\"26295\",\"00B7\",7,4,\"00011B07\",7,2300,63,39,\"\",         \"11100000\",\"11100000\"         OK\n```\n\nThe following command example reads modem parameters:\n\n```\nAT%XMONITOR %XMONITOR: 1,\"EDAV\",\"EDAV\",\"26295\",\"00B7\",7,4,\"00011B07\",7,2300,63,39,\"\",         \"11100000\",\"11100000\",\"00000000\"         OK\n```\n\n"
      }
    }
  },
  "xdrx": {
    "title": "DRX/eDRX config %XDRX",
    "shortDesc": "The Nordic-proprietary `%XDRX` command is used to control the Discontinuous Reception (DRX) parameters.",
    "versions": [],
    "subCommands": {
      "test": {
        "title": "Test command",
        "shortDesc": "The test command is not supported.",
        "ref": ""
      },
      "set": {
        "title": "Set command",
        "shortDesc": "The set command is used to provide information of the application use case to modem protocols so that they could negotiate sleep periods with the network. This means that the     network can adjust the time when data is forwarded from the base station to the device. The     configured value is stored in the nonvolatile memory.",
        "ref": "Syntax:\n\n```\n%XDRX=<drx_cycle>\n```\n\nThe set command parameters and their defined values are the following:\n\n - &lt;drx_cycle&gt;, &lt;NW-provided_DRX_value&gt;\n   - 0 – No Discontinuous Reception (DRX)\n   - 1 – DRX cycle 0.32 seconds, T = 32\n   - 2 – DRX cycle 0.64 seconds, T = 64\n   - 3 – DRX cycle 1.28 seconds, T = 128\n   - 4 – DRX cycle 2.56 seconds, T = 256\n   - 5 – WB Evolved Terrestrial Radio Access Network (E-UTRAN) eDRX cycle 5.12 seconds\n   - 6 – WB E-UTRAN eDRX cycle 10.24 seconds\n   - 7 – E-UTRAN eDRX cycle 20.48 seconds\n   - 8 – E-UTRAN eDRX cycle 40.96 seconds\n   - 9 – WB E-UTRAN eDRX cycle 61.44 seconds\n   - 10 – E-UTRAN eDRX cycle 81.92 seconds\n   - 11 – WB E-UTRAN eDRX cycle 102.4 seconds\n   - 12 – WB E-UTRAN eDRX cycle 122.88 seconds\n   - 13 – WB E-UTRAN eDRX cycle 143.36 seconds\n   - 14 – E-UTRAN eDRX cycle 163.84 seconds\n   - 15 – E-UTRAN eDRX cycle 327.68 seconds\n   - 16 – E-UTRAN eDRX cycle 655.36 seconds\n   - 17 – E-UTRAN eDRX cycle 1310.72 seconds\n   - 18 – E-UTRAN eDRX cycle 2621.44 seconds\n   - 19 – NB E-UTRAN eDRX cycle 5242.88 seconds\n   - 255 – DRX value not specified by the MS\n\n\nThe following command example sets DRX to an extended cycle length of 81.92 seconds:\n\n```\nAT%XDRX=10 OK\n```\n\n"
      },
      "read": {
        "title": "Read command",
        "shortDesc": "The read command is used to read the requested Discontinuous Reception (DRX) parameters and parameters provided by the network. ",
        "ref": "Response syntax:\n\n```\n%XDRX: <drx_cycle>, <NW-provided_DRX_value>\n```\n\nThe read command parameters and their defined values are the same as for the set command. See %XDRX [Set command parameters](xdrx_set.dita#xdrx_set/xdrx_param).The following command example reads the current DRX setting:\n\n```\nAT%XDRX? %XDRX: 10 OK\n```\n\n"
      }
    }
  },
  "xdeepsearch": {
    "title": "Weak cell detection %XDEEPSEARCH",
    "shortDesc": "The Nordic-proprietary `%XDEEPSEARCH` command supports averaging cell search mode to detect weak       cells.",
    "versions": ["v1.1.x", "v1.2.x", "v1.3.x"],
    "subCommands": {
      "test": {
        "title": "Test command",
        "shortDesc": "The test command triggers averaging cell search mode to detect weak cells. The search     is initiated when the next search due to unavailable network services is started. ",
        "ref": "\n\n> *Note:*\n> The feature must be enabled using the set command before the test command can be successfully performed.\n\nResponse syntax:\n\n```\n%XDEEPSEARCH\n```\n\nThe following command example triggers deep search:\n\n```\nAT%XDEEPSEARCH=? AT%XDEEPSEARCH OK\n```\n\n"
      },
      "set": {
        "title": "Set command",
        "shortDesc": "The set command sets the support for averaging cell search mode to detect weak cells.",
        "ref": "The feature is available in Narrowband Internet of Things (NB-IoT) and it increases the probability to find weak cells. When the setting is disabled, it stops the possible ongoing         deep searches immediately. The command configuration is stored to Non-volatile Memory (NVM) approximately every 48 hours and when the modem is powered off with the `+CFUN=0` command.Active `%XPOFWARN` warning blocks the storing to NVM.\n\n> *Note:*\n> Enabling this command reduces battery         lifetime.\n\nSyntax:\n\n```\n%XDEEPSEARCH=<deep_search>\n```\n\nThe set command parameter and its defined values are the following:\n\n - &lt;deep_search&gt;\n   - 0 – Disable deep search\n   - 1 – Enable deep search\n\n\nThe following command example enables deep search support:\n\n```\nAT%XDEEPSEARCH=1 OK\n```\n\n"
      },
      "read": {
        "title": "Read command",
        "shortDesc": "The read command reads the status of deep search.",
        "ref": "Response syntax:\n\n```\n%XDEEPSEARCH: <deep_search>\n```\n\nThe response parameter and its defined values are the following:\n\n - \n   - \n\n\nThe following command example reads deep search availability:\n\n```\nAT%XDEEPSEARCH? %XDEEPSEARCH:1 OK\n```\n\n"
      }
    }
  },
  "rel14feat": {
    "title": "3GPP Release 14 features %REL14FEAT",
    "shortDesc": "The Nordic-proprietary `%REL14FEAT` command enables the supported 3GPP Release 14 features on the modem.",
    "versions": ["v1.3.x"],
    "subCommands": {}
  },
  "redmob": {
    "title": "Reduced mobility feature configuration %REDMOB",
    "shortDesc": "The Nordic-proprietary `%REDMOB` command is used to reduce LTE idle mode mobility, such as swapping between cells in stationary use cases. The command can be used   according to the relaxed monitoring standard defined in *3GPP TS 36.304 Ch. 5.2.4.12* or in a Nordic-proprietary way.",
    "versions": ["v1.3.x≥2"],
    "subCommands": {
      "set": {
        "title": "Set command",
        "shortDesc": "The set command is used to control features that aim to reduce LTE idle mode mobility.",
        "ref": "Syntax:\n\n```\n%REDMOB=<mode>\n```\n\nThe set command parameter and its defined values are the following:\n\n - &lt;mode&gt;\n   - 0 – Default. Functionality according to the 3GPP relaxed monitoring feature.\n\n> *Note:*\n> The 3GPP relaxed monitoring feature is not supported in current modem release versions.               The modem functionality in `<mode>``0` is the same as in `<mode >``2`. The 3GPP relaxed monitoring feature will be available in future releases as the default functionality.\n\n\n   - 1 – Enable Nordic-proprietary reduced mobility feature.\n   - 2 – Full measurements for best possible mobility. Disable the 3GPP relaxed monitoring and Nordic-proprietary reduced mobility features.\n\n\nThe following command example enables the Nordic-proprietary reduced mobility feature:\n\n```\nAT%REDMOB=1 OK \n```\n\nThe following command example disables all reduced mobility functionality:\n\n```\nAT%REDMOB=2 OK\n```\n\n"
      },
      "read": {
        "title": "Read command",
        "shortDesc": "The read command returns the current configuration.",
        "ref": "Response syntax:\n\n```\n%REDMOB: <mode>\n```\n\nThe read command parameters and their defined values are the following:\n\n - &lt;mode&gt;\n   - 0 – Reduced mobility features disabled. \n   - 1 – Nordic-proprietary reduced mobility enabled.\n   - 2 – Reduced mobility features disabled.\n\n\nThe following command example reads the configuration when the Nordic-proprietary reduced mobility feature is enabled:\n\n```\nAT%REDMOB? %REDMOB: 1 OK \n```\n\nThe following command example reads the configuration when reduced mobility feature is disabled:\n\n```\nAT%REDMOB? %REDMOB: 2 OK\n```\n\n"
      }
    }
  },
  "rai": {
    "title": "Release assistance indication %RAI",
    "shortDesc": "The Nordic-proprietary `%RAI` command enables and disables Release Assistance Indication (RAI) support.",
    "versions": ["v1.3.x"],
    "subCommands": {
      "set": {
        "title": "Set command",
        "shortDesc": "The set command enables and disables the support of the Release Assistance Indication (RAI) feature. The command configuration is stored to Non-volatile Memory (NVM) approximately every 48 hours and when the modem is powered off with the `+CFUN=0` command.",
        "ref": "Active `%XPOFWARN` warning blocks the storing to NVM.\n\n> *Note:*\n> Enabling RAI requires feature activation with the [`%REL14FEAT`](rel14feat.dita#rel14feat) command.\n\nSyntax:\n\n```\n%RAI[=<rai>]\n```\n\nThe set command parameter and its defined values are the following:\n\n - &lt;rai&gt;\n   - 0 – Disabled\n   - 1 – Enabled\n\n\nThe following command example enables RAI feature support:\n\n```\nAT%RAI=1 OK\n```\n\n"
      },
      "read": {
        "title": "Read command",
        "shortDesc": "The read command reads the Release Assistance Indication (RAI) support value.",
        "ref": "Syntax:\n\n```\n%RAI: <rai>\n```\n\nThe following command example reads the RAI support value:\n\n```\nAT%RAI? %RAI: 1 OK\n```\n\n"
      }
    }
  },
  "periodicsearchconf": {
    "title": "Periodic cell search configuration %PERIODICSEARCHCONF",
    "shortDesc": "The Nordic-proprietary `%PERIODICSEARCHCONF` command is used to configure periodic cell searches in limited service state.",
    "versions": ["v1.3.x≥1"],
    "subCommands": {
      "set": {
        "title": "Set commandExample of two different types of search patternsLength of sleeps in search pattern 1Length of sleeps in search pattern 2",
        "shortDesc": "The set command can be used to write, read, and clear periodic search configuration and to start a search. The configuration affects the periodic searches that the User Equipment (UE) performs in limited service state to obtain normal service.",
        "ref": "Syntax:\n\n```\n%PERIODICSEARCHCONF=<mode>[,<loop>,<return_to_pattern>,<band_optimization>,<pattern_1> [,<pattern_2>][,<pattern_3>][,<pattern_4>]]\n```\n\nResponse syntax for mode 1:\n\n```\n%PERIODICSEARCHCONF: <loop>,<return_to_pattern>,<band_optimization>,<pattern_1>[,<pattern_2>][,<pattern_3>][,<pattern_4>]\n```\n\nThe set command parameters and their defined values are the following:\n\n - &lt;mode&gt;\n   - Selects the performed operation. The additional optional parameters are valid only for mode 0.\n   - 0 – Write.\n   - 1 – Read.\n   - 2 – Clear.\n   - 3 – Search now.\n\n> *Note:*\n> When `<mode>` is 3, the response is always `OK`, which indicates that the request has been delivered to the modem. The search is performed only when the modem is in sleep state between               periodic searches.\n\n\n - &lt;loop&gt;\n   - Indicates if the last given search pattern is looped from the beginning when the pattern has ended. If several search patterns are configured,               `<loop>` impacts only the last pattern.\n   - 0 – No loop.\n   - 1 – Loop last search pattern.\n - &lt;return_to_pattern&gt;\n   - Indicates if the modem can return to a given search pattern with shorter sleeps, for example, when radio conditions change and the given pattern index has already been             exceeded.\n   - 0 – No return.\n   - 1–4 – Return to search pattern index 1–4.\n - &lt;band_optimization&gt;\n   - 0 – No optimization. Every periodic search is an all band search.\n   - 1 – Use default optimizations predefined by the modem. Predefinition depends on the active data profile, which can be configured with [`%XDATAPRFL`](../mob_termination_ctrl_status/xdataprfl.dita#xdataprfl).\n   - 2 – Every second periodic search is an all band search.\n   - 3 – Every third periodic search is an all band search.\n   - 4 – Every fourth periodic search is an all band search.\n   - …\n   - 20 – Every 20th periodic search is an all band search.\n - &lt;pattern_1…pattern_4&gt;\n   - The write command and response to the read command can contain 1–4 search pattern entries. Each pattern entry is range or table type and enclosed in quotation marks             (&quot;pattern_1&quot;, &quot;pattern_2&quot;).\n   - Range type search pattern: &quot;&lt;type&gt;,&lt;initial_sleep&gt;, &lt;final_sleep&gt;,[&lt;time_to_final_sleep&gt;], &lt;pattern_end_point&gt;&quot;\n   - Table type search pattern: &quot;&lt;type&gt;,&lt;val1&gt;[,&lt;val2&gt;][,&lt;val3&gt;][,&lt;val4&gt;][,&lt;val5&gt;]&quot;\n\n\nThe following parameters describe the content of `<pattern 1...pattern4>`:\n\n - &lt;type&gt;\n   - 0 – Range.\n   - 1 – Table.\n - &lt;initial_sleep&gt;\n   - 0–65535 seconds.\n   - Sleep time between searches in the beginning of the range.\n - &lt;final_sleep&gt;\n   - 0–65535 seconds.\n   - Sleep time between searches in the end of the range.\n - &lt;time_to_final_sleep&gt;\n   - 0–1080 minutes. Optional.\n   - Target time for achieving the `<final_sleep>` value. This can be used to determine the angle factor between the `<initial_sleep>` and `<final_sleep>` times. The timeline for the `<time_to_final_sleep>` starts from the beginning of the search pattern.\n   - If given, the value cannot be greater than the value of `<pattern_end_point>` in the same search pattern. If not given, the angle factor is calculated using the `<pattern_end_point>` value so that the `<final_sleep>` value is reached at the point of `<pattern_end_point>`.\n - &lt;pattern_end_point&gt;\n   - 0–1080 minutes.\n   - Time that must elapse before entering the next search pattern. The timeline for `<pattern_end_point>` starts from the beginning of the limited service starting point which is the moment when the first sleep period started.\n - &lt;val1...val5&gt;\n   - 0–65535 seconds.\n   - 1–5 sleep time values between searches. After going through all values, the last value of the last search pattern is repeated if not configured differently by the               `<loop>` or `<return_to_pattern>` parameters.\n\n\nThe following diagram shows an example of two configured search patterns&apos; behavior on a timeline. The first search pattern is table type, and the second search pattern is range         type.The following diagram shows the length of sleeps in search pattern 1 in [](#periodicsearchconf_set/fig_e1h_jyq_2rb).The following diagram shows the length of sleeps in search pattern 2 in [](#periodicsearchconf_set/fig_e1h_jyq_2rb). The sleep time reaches the `<final_sleep>` value in 10 minutes according to the `<time_to_final_sleep>` parameter.The following command example configures one range type search pattern without the optional `<time_to_final_sleep>` parameter:\n\n```\nAT%PERIODICSEARCHCONF=0,0,0,10,\"0,60,3600,,600\" OK \n```\n\nThe following command example reads the configuration:\n\n```\nAT%PERIODICSEARCHCONF=1 %PERIODICSEARCHCONF: 0,0,10,\"0,60,3600,,600\" OK \n```\n\nThe following command example configures one range type search pattern with the optional `<time_to_final_sleep>` parameter and additional table type search pattern with three sleep time values that are looped when the pattern has ended:\n\n```\nAT%PERIODICSEARCHCONF=0,1,0,10,\"0,60,3600,300,600\",\"1,60,120,3600\" OK \n```\n\nThe following command example requests an extra search now:\n\n```\nAT%PERIODICSEARCHCONF=3 OK \n```\n\nThe following command example clears the configuration:\n\n```\nAT%PERIODICSEARCHCONF=2 OK \n```\n\nThe following command example reads the configuration when no configuration is stored:\n\n```\nAT%PERIODICSEARCHCONF=1 %PERIODICSEARCHCONF: OK\n```\n\nThe modem uses specific periodic search patterns for each power level defined in the [`%XDATAPRFL`](../mob_termination_ctrl_status/xdataprfl.dita#xdataprfl) command. The following commands correspond to the search pattern configurations used for each power level. They are default configurations,         and any specific periodic cell search configuration overrides them.Ultra low power:\n\n```\nAT%PERIODICSEARCHCONF=0,0,0,1,\"0,10,40,,5\",\"1,300,600,1800,1800,3600\"\n```\n\nLow power:\n\n```\nAT%PERIODICSEARCHCONF=0,0,0,1,\"0,10,40,,5\",\"1,300,600\"\n```\n\nNormal:\n\n```\nAT%PERIODICSEARCHCONF=0,0,0,1,\"0,10,40,5,15\",\"1,60,90,300\"\n```\n\nPerformance:\n\n```\nAT%PERIODICSEARCHCONF=0,0,0,1,\"0,10,40,5,15\",\"1,60,90\"\n```\n\nHigh performance:\n\n```\nAT%PERIODICSEARCHCONF=0,0,0,1,\"1,10\",\"0,10,40,,15\"\n```\n\nFor more information on data profile power levels, see [](../mob_termination_ctrl_status/xdataprfl.dita#xdataprfl). "
      }
    }
  },
  "nw_service": {
    "title": "Network service related commands",
    "shortDesc": "For reference, see *3GPP 27.007 Ch. 7*.",
    "versions": [],
    "subCommands": {}
  },
  "cpsms": {
    "title": "Power saving mode setting +CPSMS",
    "shortDesc": "The `+CPSMS` command controls Power Saving Mode (PSM) settings.",
    "versions": ["v1.0.x", "v1.1.x", "v1.2.x", "v1.3.x"],
    "subCommands": {
      "set": {
        "title": "Set command",
        "shortDesc": "The set command sets the power saving mode. Sets activity timer and Power Saving Mode (PSM) period after Non-access Stratum (NAS) signaling connection release. The command configuration is stored to Non-volatile Memory (NVM) approximately every 48 hours and when the modem is powered off with the `+CFUN=0` command.",
        "ref": "Active `%XPOFWARN` warning blocks the storing to NVM.Syntax:\n\n```\n+CPSMS=[<mode>[,<Requested_Periodic-RAU>,<Requested_GPRS-READY-timer> ,<Requested_Periodic-TAU>[,<Requested_Active-Time>]]]\n```\n\nThe command can be given as `+CPSMS=` (with all parameters omitted). In this form, the parameter `<mode>` is set to 0, the use of PSM is disabled, and data for all parameters is set to the manufacturer-specific default values.The set command parameters and their defined values are the following:\n\n - &lt;mode&gt;\n   - 0 – Disable power saving mode\n   - 1 – Enable power saving mode\n - &lt;Requested_Periodic-RAU&gt;\n   - Ignored\n - &lt;Requested_GPRS-READY-timer&gt;\n   - Ignored\n - &lt;Requested_Periodic-TAU&gt;\n   - String. 1 byte in 8-bit format. Optional. Timer value updated if present. If not present, the value of the requested Periodic-TAU is set to the               manufacturer-specific default. For the coding and value range, see the GPRS Timer 3 IE               in *3GPP TS 24.008* Table 10.5.163a/3GPP TS 24.008.Bits 5 to 1 represent the binary coded timer value.Bits 8 to 6 define the timer value unit for the General Packet Radio Services (GPRS) timer as follows:Bits8 7 60 0 0 – Value is incremented in multiples of 10 minutes0 0 1 – Value is incremented in multiples of 1 hour0 1 0 – Value is incremented in multiples of 10 hours0 1 1 – Value is incremented in multiples of 2 seconds1 0 0 – Value is incremented in multiples of 30 seconds1 0 1 – Value is incremented in multiples of 1 minute1 1 0 – Value is incremented in multiples of 320 hours\n\n> *Note:*\n> Interpreted as 1 hour if the request sent to network is not integrity protected. After registration, check the value given by the network (see [`+CEREG`](cereg.dita#cereg)). If 1 hour unit is given, disable and enable PSM using commands `+CPSMS=0` and `+CPSMS=1`.\n\n1 1 1 – Value indicates that the timer is deactivated\n   - \n\n> *Note:*\n> If the Universal Subscriber Identity Module (USIM) profile in use is a Verizon one, the minimum value for `<Requested_Periodic-TAU>` is 190 minutes. \n\n\n - &lt;Requested_Active-Time&gt;\n   - String. 1 byte in 8-bit format.Optional. Timer value updated if present. If not present, the value of the requested Active-Time is set to the manufacturer-specific               default. For the coding and value range, see the GPRS Timer 2 IE in *3GPP TS 24.008* Table 10.5.163/3GPP TS 24.008.Bits 5 to 1 represent the binary coded timer value.Bits 8 to 6 define the timer value unit for the GPRS timer as follows:Bits8 7 60 0 0 – Value is incremented in multiples of 2 seconds0 0 1 – Value is incremented in multiples of 1 minute0 1 0 – Value is incremented in multiples of 6 minutes1 1 1 – Value indicates that the timer is deactivated\n\n\nThe following command example enables power saving mode and set timer values. Set Periodic-TAU timer to 10 minutes and Active-Time to 1       minute:\n\n```\nAT+CPSMS=1,\"\",\"\",\"10101010\",\"00100001\" OK\n```\n\nThe following command example disables power saving mode:\n\n```\nAT+CPSMS=0 OK\n```\n\nThe following command example disables power saving mode and sets timer to default values:\n\n```\nAT+CPSMS= OK\n```\n\n"
      },
      "read": {
        "title": "Read command",
        "shortDesc": "The read command reads the current Power Saving Mode (PSM) settings.",
        "ref": "Response syntax:\n\n```\n+CPSMS: <mode>,[<Requested_Periodic-RAU>],[<Requested_GPRS-READY-timer>],[<Requested_Periodic-TAU>],[<Requested_Active-Time>] \n```\n\nThe read command parameters and their defined values are the following:\n\n - \n   - \n\n\nThe following command example reads the current power saving mode settings:\n\n```\nAT+CPSMS? +CPSMS: 1,,,\"10101111\",\"01101100\" OK\n```\n\n"
      }
    }
  },
  "cops_nordic": {
    "title": "Forced PLMN search %COPS",
    "shortDesc": "The Nordic-proprietary `%COPS` command performs a forced Public Land Mobile Network (PLMN) search.",
    "versions": ["v1.1.x", "v1.2.x", "v1.3.x"],
    "subCommands": {
      "test": {
        "title": "Test command",
        "shortDesc": "The test command searches the Public Land Mobile Network (PLMN) and returns a list of operators found. ",
        "ref": "The command is similar to the [`+COPS`](cops.dita#cops) command with the exception that the `%COPS` test command is considered a high priority search. This means that, for example, data transfer is suspended, pagings         lost, and registration is not maintained. In other words, the search is not delayed because         of any other procedure.Response syntax:\n\n```\n%COPS: [(<stat>,long alphanumeric <oper>,short alphanumeric <oper>,numeric <oper>[,<AcT>])]\n```\n\nThe test command parameters and their defined values are the following:\n\n - \n   - \n - &lt;stat&gt;\n   - 0 – Unknown\n   - 1 – Available\n   - 2 – Current\n   - 3 – Forbidden\n - \n   - \n\n\nThe following command example is used for a manual network search:\n\n```\nAT%COPS=? %COPS: (2,\"\",\"\",\"26201\",7),(1,\"\",\"\",\"26202\",7) OK\n```\n\n"
      },
      "set": {
        "title": "Set command",
        "shortDesc": "The set command is not supported.",
        "ref": ""
      }
    }
  },
  "cops": {
    "title": "PLMN selection +COPS",
    "shortDesc": "The `+COPS` command selects a Public Land Mobile Network (PLMN) automatically or manually, and reads and searches the current mobile    network.",
    "versions": ["v1.0.x", "v1.1.x", "v1.2.x", "v1.3.x"],
    "subCommands": {
      "test": {
        "title": "Test command",
        "shortDesc": "The test command searches the mobile network and returns a list of operators found. If the search is interrupted, the search returns existing results and the list may be     incomplete.",
        "ref": "Response syntax:\n\n```\n+COPS: [(<stat>,long alphanumeric <oper>,short alphanumeric <oper>,numeric <oper>[,<AcT>])]\n```\n\n\n\n - +CME ERROR codes\n   - 516 – Radio connection is active\n   - 521 – Public Land Mobile Network (PLMN) search interrupted, partial results\n\n\nThe test command parameters and their defined values are the following:\n\n - \n   - \n - &lt;stat&gt;\n   - 0 – Unknown\n   - 1 – Available\n   - 2 – Current\n   - 3 – Forbidden\n - \n   - \n\n\n\n\n> *Note:*\n> \n> \n>  - The command fails if the device has an active radio connection. It returns `ERROR` or `+CME ERROR: 516`.\n>  - The time needed to perform a network search depends on device configuration and network conditions.\n> \n> \n> \n\nThe following command example is used for a manual network search:\n\n```\nAT+COPS=? +COPS: (2,\"\",\"\",\"26201\",7),(1,\"\",\"\",\"26202\",7) OK\n```\n\n"
      },
      "set": {
        "title": "Set command",
        "shortDesc": "The set command selects a mobile network automatically or manually. The command configuration is stored to Non-volatile Memory (NVM) approximately every 48 hours and when the modem is powered off with the `+CFUN=0` command.",
        "ref": "Active `%XPOFWARN` warning blocks the storing to NVM.Syntax:\n\n```\n+COPS=[<mode>[,<format>[,<oper>]]]\n```\n\nThe set command parameters and their defined values are the following:\n\n - &lt;mode&gt;\n   - 0 – Automatic network selection\n   - 1 – Manual network selection\n   - 3 – Set `<format>` of `+COPS` read command response\n - &lt;format&gt;\n   - 0 – Long alphanumeric `<oper>` format. Only for `<mode>` 3.\n   - 1 – Short alphanumeric `<oper>` format. Only for `<mode>` 3.\n   - 2 – Numeric `<oper>` format\n - &lt;oper&gt;\n   - String of digits. Mobile Country Code (MCC) and Mobile Network Code (MNC) values.\n\n\nFor manual selection, only the numeric string format is supported and `<oper>` is mandatory.The following command example selects the automatic network selection:\n\n```\nAT+COPS=0 OK\n```\n\nThe following command manually selects network       24407:\n\n```\nAT+COPS=1,2,\"24407\" OK\n```\n\n"
      },
      "read": {
        "title": "Read command",
        "shortDesc": "The read command reads the current mobile network.",
        "ref": "Response syntax:\n\n```\n+COPS: <mode>[,<format>,<oper>,[AcT>]]\n```\n\nThe read command parameters and their defined values are the following:\n\n - &lt;mode&gt;\n   - 0 – Automatic network selection\n   - 1 – Manual network selection\n   - 2 – Deregistered. Only for the read command.\n - &lt;format&gt;\n   - 0 – Long alphanumeric `<oper>` format\n   - 1 – Short alphanumeric `<oper>` format\n   - 2 – Numeric `<oper>` format\n\n\n\n\n - &lt;oper&gt;\n   - String in double quotes. Operator name or Mobile Country Code (MCC) and Mobile Network Code (MNC) values.\n - &lt;AcT&gt;\n   - 7 – Evolved Terrestrial Radio Access Network (E-UTRAN)\n   - 9 – E-UTRAN (NB-S1 mode)\n\n\nThe following command example reads the current selection mode and network:\n\n```\nAT+COPS? +COPS: 0,2,\"26201\",7 OK\n```\n\nThe following command example reads the current selection mode and network with the operator name in alphanumeric format:\n\n```\nAT+COPS? +COPS: 0,0,\"RADIOLINJA\",7 OK\n```\n\n"
      }
    }
  },
  "copn": {
    "title": "Operator name +COPN",
    "shortDesc": "The `+COPN` command reads operator names.",
    "versions": ["v1.0.x", "v1.1.x", "v1.2.x", "v1.3.x"],
    "subCommands": {
      "test": {
        "title": "Test command",
        "shortDesc": "The test command is not supported.",
        "ref": ""
      },
      "set": {
        "title": "Set command",
        "shortDesc": "The set command reads operator names.",
        "ref": "Syntax:\n\n```\n+COPN\n```\n\n\n\n> *Note:*\n> The device does not have operator names stored in it.\n\nThe following command example reads operator names:\n\n```\nAT+COPN OK \n```\n\n"
      },
      "read": {
        "title": "Read command",
        "shortDesc": "The read command is not supported.",
        "ref": ""
      }
    }
  },
  "cereg": {
    "title": "Network registration status notification +CEREG",
    "shortDesc": "The `+CEREG` command subscribes unsolicited network status notifications.",
    "versions": ["v1.0.x", "v1.1.x", "v1.2.x", "v1.3.x"],
    "subCommands": {
      "test": {
        "title": "Test command",
        "shortDesc": "The test command returns a list of supported modes as a compound value.",
        "ref": "Response syntax:\n\n```\n+CEREG: (supported modes)\n```\n\nThe test command parameter and its defined values are the following:\n\n - \n   - \n\n\nThe following command example shows supported unsolicited results codes:\n\n```\nAT+CEREG=? +CEREG: (0-5) OK\n```\n\n"
      },
      "set": {
        "title": "Set command",
        "shortDesc": "The set command subscribes unsolicited network status notifications.",
        "ref": "Syntax:\n\n```\n+CEREG=<n>\n```\n\nThe set command parameter and its defined values are the following:\n\n - &lt;n&gt;\n   - 0 – Unsubscribe unsolicited result codes\n   - 1 – Subscribe unsolicited result codes `+CEREG:<stat>`\n   - 2 – Subscribe unsolicited result codes `+CEREG:<stat>[,<tac>,<ci>,<AcT>]`\n   - 3 – Subscribe unsolicited result codes `+CEREG:<stat>[,<tac>,<ci>,<AcT>[,<cause_type>,<reject_cause>]]`\n   - 4 – Subscribe unsolicited result codes `+CEREG: <stat>[,[<tac>],[<ci>],[<AcT>][,,[,[<Active-Time>],[<Periodic-TAU>]]]]`\n   - 5 – Subscribe unsolicited result codes `+CEREG: <stat>[,[<tac>],[<ci>],[<AcT>][,[<cause_type>],[<reject_cause>][,[<Active-Time>],[<Periodic-TAU>]]]]`\n\n\nFor the notification syntax parameters, see [](cereg_read.dita#cereg_read).The following command example subscribes notifications with level 2: \n\n```\nAT+CEREG=2 OK\n```\n\nUnsolicited notification level 1, trying to attach:\n\n```\n+CEREG: 2\n```\n\nUnsolicited notification level 2, registered:\n\n```\n+CEREG: 1,\"002F\",\"0012BEEF\",7\n```\n\n"
      },
      "read": {
        "title": "Read command",
        "shortDesc": "The read command reads current network registration status.",
        "ref": "Response syntax:\n\n```\n+CEREG: <n>,<stat>[,[<tac>],[<ci>],[<AcT>][,<cause_type>],[<reject_cause>][,[<Active-Time>],[<Periodic-TAU>]]]]\n```\n\nThe read command parameters and their defined values are the following: \n\n - \n   - \n - &lt;stat&gt;\n   - 0 – Not registered. User Equipment (UE) is not currently searching for an operator to register to.\n   - 1 – Registered, home network\n   - 2 – Not registered, but UE is currently trying to attach or searching an operator to register to\n   - 3 – Registration denied\n   - 4 – Unknown (for example, out of Evolved Terrestrial Radio Access Network (E-UTRAN) coverage)\n   - 5 – Registered, roaming\n   - 90 – Not registered due to Universal Integrated Circuit Card (UICC) failure\n - &lt;tac&gt;\n   - String in hexadecimal format. 2-byte Tracking Area Code (TAC).\n - &lt;ci&gt;\n   - String in hexadecimal format. 4-byte E-UTRAN cell ID.\n - &lt;AcT&gt;\n   - 7 – E-UTRAN\n   - 9 – E-UTRAN NB-S1\n - &lt;cause_type&gt;\n   - 0 – `<reject_cause>` contains an EPS Mobility Management (EMM) cause value. See *3GPP TS 24.301 Annex A*.\n - &lt;reject_cause&gt;\n   - EMM cause value. See *3GPP TS 24.301 Annex A*\n - &lt;Active-Time&gt;\n   - String. 1 byte in 8-bit format.\n   - Indicates the Active Time value (T3324) allocated to the device in E-UTRAN. For the coding and value range, see the GPRS Timer 2 IE in *3GPP TS 24.008* Table 10.5.163/3GPP TS 24.008.\n   - The device can enter Power Saving Mode (PSM) state in LTE idle mode when the `<Active-Time>` parameter has a valid value where at least one of bits 6–8 is set to `0`. The length of PSM sleep is the value that remains from the value configured for periodic TAU after active time has elapsed, which             is T3324 subtracted from T3412.\n - &lt;Periodic-TAU&gt;\n   - String. 1 byte in 8-bit format. \n   - Indicates the extended periodic Tracking Area Update (TAU) value (T3412) allocated to the device in E-UTRAN. For the coding and value range, see the GPRS Timer 3             IE in *3GPP TS 24.008* Table 10.5.163a/3GPP TS 24.008.\n   - A deactivated value where bits 6–8 are set to `1` after a successful LTE Attach or TAU means that the network configures the periodic TAU or PSM cycle length             using a non-extended format with General Packet Radio Services (GPRS) timer instead of GPRS timer 3. The configured value of T3412 can be read with the `%XMONITOR` command. The response includes the value in a format selected by the network. \n\n\nThe following command example reads the current registration status:\n\n```\nAT+CEREG? +CEREG: 2,1,\"002F\",\"0012BEEF\",7 OK\n```\n\n"
      }
    }
  },
  "cedrxs": {
    "title": "eDRX setting +CEDRXS",
    "shortDesc": "The `+CEDRXS` command controls the setting of Extended Discontinuous Reception (eDRX) parameters.",
    "versions": ["v1.0.x", "v1.1.x", "v1.2.x", "v1.3.x"],
    "subCommands": {
      "set": {
        "title": "Set command",
        "shortDesc": "The set command sets the requested Extended Discontinuous Reception (eDRX) parameters. The command configuration is stored to Non-volatile Memory (NVM) approximately every 48 hours and when the modem is powered off with the `+CFUN=0` command.",
        "ref": "Active `%XPOFWARN` warning blocks the storing to NVM.When an eDRX parameter is changed, the default Paging Time Window (PTW) is set. If other than the default PTW has to be used, the [`%XPTW`](../mob_termination_ctrl_status/xptw.dita#xptw) command shall be sent after the `+CEDRXS` command. To ensure a proper amount of paging occasions and time for reception with all possible DRX cycle lengths, it is recommended to set the PTW         length to 5.12 s or longer for LTE-M and to 10.24 s or longer for Narrowband Internet of Things (NB-IoT) when possible. \n\n> *Note:*\n> The PTW length shall be set to be smaller than the eDRX length provided by the network.\n\n\n\n> *Note:*\n> The value is applicable only in WB-S1 mode. If received in NB-S1 mode it is interpreted as if the Extended DRX parameters IE were not included in the message by this           version of the protocol.\n\n\n\n> *Note:*\n> The value is applicable only in WB-S1 mode. If received in NB-S1 mode it is interpreted as 0010 by this version of the           protocol.\n\n\n\n> *Note:*\n> The value is applicable only in NB-S1 mode. If received in WB-S1 mode it is interpreted as 1101 by this version of the         protocol.\n\nSyntax:\n\n```\n+CEDRXS=[<mode>,[,<AcT-type>[,<Requested_eDRX_value>]]]\n```\n\nUnsolicited result code         syntax:\n\n```\n+CEDRXP: <AcT-type>[,<Requested_eDRX_value>[,<NW-provided_eDRX_value> [,<Paging_time_window>]]]\n```\n\nThe set command parameters and their defined values are the following:\n\n - &lt;mode&gt;\n   - 0 − Disable the use of eDRX\n   - 1 − Enable the use of eDRX\n   - 2 − Enable the use of eDRX and enable the unsolicited result code\n   - 3 − Disable the use of eDRX and discard all parameters for eDRX or, if available, reset to the manufacturer-specific default values\n - &lt;ActT-type&gt;\n   - 0 – Current cell is not using eDRX. Used only in the unsolicited result code.\n   - 4 − Evolved Terrestrial Radio Access Network (E-UTRAN) (WB-S1 mode)\n   - 5 − E-UTRAN (NB-S1 mode)\n - &lt;Requested_eDRX_value&gt;\n   - String. Half a byte in 4-bit format. The eDRX value refers to bit 4 to 1 of octet 3 of the Extended DRX parameters information element (see *3GPP TS 24.008, subclause 10.5.5.32*). Optional. If not present, the value of the requested eDRX period is set to the manufacturer-specific default.\n   - Bit\n   - 4 3 2 1 – E-UTRAN eDRX cycle length duration0 0 0 0 – 5.12 seconds[](#cedrxs_set/wbs1_fn)0 0 0 1 – 10.24 seconds[](#cedrxs_set/wbs1_fn)0 0 1 0 – 20.48 seconds0 0 1 1 – 40.96 seconds0 1 0 0 – 61.44 seconds[](#cedrxs_set/nbs1_fn)0 1 0 1 – 81.92 seconds0 1 1 0 – 102.4 seconds[](#cedrxs_set/nbs1_fn)0 1 1 1 – 122.88 seconds[](#cedrxs_set/nbs1_fn)1 0 0 0 – 143.36 seconds[](#cedrxs_set/nbs1_fn)1 0 0 1 – 163.84 seconds1 0 1 0 – 327.68 seconds1 0 1 1 – 655,36 seconds1 1 0 0 – 1310.72 seconds1 1 0 1 – 2621.44 seconds1 1 1 0 – 5242.88 seconds[](#cedrxs_set/1101_fn)1 1 1 1 – 10485.76 seconds[](#cedrxs_set/1101_fn)\n - &lt;NW-Provided_eDRX_value&gt;\n   - String. Half a byte in 4-bit format. The eDRX value refers to bit 4 to 1 of octet 3 of the Extended DRX parameters information element (see *3GPP TS 24.008, subclause 10.5.5.32*).\n   - Bit\n   - 4 3 2 1 – E-UTRAN eDRX cycle length duration0 0 0 0 – 5.12 seconds[](#cedrxs_set/wbs1_fn)0 0 0 1 – 10.24 seconds[](#cedrxs_set/wbs1_fn)0 0 1 0 – 20.48 seconds0 0 1 1 – 40.96 seconds0 1 0 0 – 61.44 seconds[](#cedrxs_set/nbs1_fn)0 1 0 1 – 81.92 seconds0 1 1 0 – 102.4 seconds[](#cedrxs_set/nbs1_fn)0 1 1 1 – 122.88 seconds[](#cedrxs_set/nbs1_fn)1 0 0 0 – 143.36 seconds[](#cedrxs_set/nbs1_fn)1 0 0 1 – 163.84 seconds1 0 1 0 – 327.68 seconds1 0 1 1 – 655,36 seconds1 1 0 0 – 1310.72 seconds1 1 0 1 – 2621.44 seconds1 1 1 0 – 5242.88 seconds[](#cedrxs_set/1101_fn)1 1 1 1 – 10485.76 seconds[](#cedrxs_set/1101_fn)\n - &lt;Paging_time_window&gt;\n   - String. Half a byte in 4-bit format. The paging time window refers to bit 8 to 5 of octet 3 of the Extended DRX parameters information element (see *3GPP TS 24.008, subclause 10.5.5.32*). \n   - LTE-M mode\n   - Bit\n   - 4 3 2 1 – PTW length0 0 0 0 – 1.28 seconds0 0 0 1 – 2.56 seconds0 0 1 0 – 3.84 seconds0 0 1 1 – 5.12 seconds0 1 0 0 – 6.4 seconds0 1 0 1 – 7.68 seconds0 1 1 0 – 8.96 seconds0 1 1 1 – 10.24 seconds1 0 0 0 – 11.52 seconds1 0 0 1 – 12.8 seconds1 0 1 0 – 14.08 seconds1 0 1 1 – 15.36 seconds1 1 0 0 – 16.64 seconds1 1 0 1 – 17.92 seconds1 1 1 0 – 19.20 seconds1 1 1 1 – 20.48 seconds\n   - NB-IoT mode\n   - Bit\n   - 4 3 2 1 – PTW length0 0 0 0 – 2.56 seconds0 0 0 1 – 5.12 seconds0 0 1 0 – 7.68 seconds0 0 1 1 – 10.24 seconds0 1 0 0 – 12.8 seconds0 1 0 1 – 15.36 seconds0 1 1 0 – 17.92 seconds0 1 1 1 – 20.48 seconds1 0 0 0 – 23.04 seconds1 0 0 1 – 25.6 seconds1 0 1 0 – 28.16 seconds1 0 1 1 – 30.72 seconds1 1 0 0 – 33.28 seconds1 1 0 1 – 35.84 seconds1 1 1 0 – 38.4 seconds1 1 1 1 – 40.96 seconds\n\n\nThe following command example enables eDRX and sets the requested eDRX value:\n\n```\nAT+CEDRXS=1,4,\"1000\" OK\n```\n\nThe unsolicited notification when `<mode>` 2 is used:\n\n```\n+CEDRXP: 4,\"1000\",\"0101\",\"1011\" OK\n```\n\n"
      },
      "read": {
        "title": "Read command",
        "shortDesc": "The read command is used to read the requested Extended Discontinuous Reception (eDRX) parameters. ",
        "ref": "Response syntax:\n\n```\n+CEDRXS: <AcT-type>,<Requested_eDRX_value>\n```\n\nThe read command parameters and their defined values are the following:\n\n - \n   - \n - &lt;Requestd_eDRX_value&gt;\n   - String. Half a byte in 4-bit format. The eDRX value refers to bit 4 to 1 of octet 3 of the Extended DRX parameters information element (see *3GPP TS 24.008, subclause 10.5.5.32*). \n\n\nThe following command example reads the requested eDRX value:\n\n```\nAT+CEDRXS? +CEDRXS: 4,\"0001\" OK\n```\n\n"
      }
    }
  },
  "cedrxrdp": {
    "title": "EDRX dynamic parameters +CEDRXRDP",
    "shortDesc": "The `+CEDRXRDP` command reads dynamic Extended Discontinuous Reception (eDRX) parameters.",
    "versions": ["v1.0.x", "v1.1.x", "v1.2.x", "v1.3.x"],
    "subCommands": {
      "set": {
        "title": "Set command",
        "shortDesc": "The set command reads dynamic Extended Discontinuous Reception (eDRX) parameters.",
        "ref": "Syntax:\n\n```\n+CEDRXRDP\n```\n\nResponse syntax:\n\n```\n+CEDRXRDP: <AcT-type>[,<Requested_eDRX_value>[,<NW-provided_eDRX_value>[,<Paging_time_window>]]]\n```\n\nThe set command parameters and their defined values are the following:\n\n> *Note:*\n> The value is applicable only in WB-S1 mode. If received in NB-S1 mode, it is interpreted as if           the Extended DRX parameters IE were not included in the message by this version of the           protocol.\n\n\n\n> *Note:*\n> The value is applicable only in WB-S1 mode. If received in NB-S1 mode, it is interpreted as 0010 by this version of the protocol.\n\n\n\n> *Note:*\n> The value is applicable only in NB-S1 mode. If received in WB-S1 mode, it is interpreted as 1101 by this version of the protocol.\n\n\n\n - &lt;ActT-type&gt;\n   - 0 – Current cell not using eDRX\n   - 4 – Evolved Terrestrial Radio Access Network (E-UTRAN) (WB-S1 mode)\n   - 5 – E-UTRAN (NB-S1 mode)\n - \n   - \n - &lt;NW-Provided_eDRX_value&gt;\n   - String. Half a byte in 4-bit format. The eDRX value refers to bit 4 to 1 of octet 3 of the Extended DRX parameters information element (see *3GPP TS 24.008, subclause 10.5.5.32*).\n   - Bit\n   - 4 3 2 1 – E-UTRAN eDRX cycle length duration0 0 0 0 – 5.12 seconds[](#cedrxrdp_set/wbs1_fn)0 0 0 1 – 10.24 seconds[](#cedrxrdp_set/wbs1_fn)0 0 1 0 – 20.48 seconds0 0 1 1 – 40.96 seconds0 1 0 0 – 61.44 seconds[](#cedrxrdp_set/nbs1_fn)0 1 0 1 – 81.92 seconds0 1 1 0 – 102.4 seconds[](#cedrxrdp_set/nbs1_fn)0 1 1 1 – 122.88 seconds[](#cedrxrdp_set/nbs1_fn)1 0 0 0 – 143.36 seconds[](#cedrxrdp_set/nbs1_fn)1 0 0 1 – 163.84 seconds1 0 1 0 – 327.68 seconds1 0 1 1 – 655,36 seconds1 1 0 0 – 1310.72 seconds1 1 0 1 – 2621.44 seconds1 1 1 0 – 5242.88 seconds[](#cedrxrdp_set/1101_fn)1 1 1 1 – 10485.76 seconds[](#cedrxrdp_set/1101_fn)\n - \n   - \n\n\nThe following command example reads eDRX parameters:\n\n```\nAT+CEDRXRDP +CEDRXRDP: 4,\"0011\",\"0010\",\"1001\" OK\n```\n\n"
      }
    }
  },
  "shortswver": {
    "title": "Short software identification %SHORTSWVER ",
    "shortDesc": "The Nordic-proprietary `%SHORTSWVER` command requests short software identification.",
    "versions": ["v1.1.x", "v1.2.x", "v1.3.x", "pti_v1.1.x≥1"],
    "subCommands": {
      "set": {
        "title": "Set command",
        "shortDesc": "The set command requests short software identification. ",
        "ref": "Syntax:\n\n```\n%SHORTSWVER\n```\n\nResponse syntax:\n\n```\n%SHORTSWVER: <version_string>\n```\n\nThe response parameter and its defined value are the following:\n\n - &lt;version_string&gt;\n   - String without double quotes. Short software identification.\n\n\nThe following command example requests short software identification:\n\n```\nAT%SHORTSWVER %SHORTSWVER: nrf9160_1.1.2 OK\n```\n\n"
      }
    }
  },
  "odisntf": {
    "title": "ODIS notification +ODISNTF",
    "shortDesc": "The `+ODISNTF` command subscribes unsolicited ODIS notifications.",
    "versions": ["v1.2.x", "v1.3.x"],
    "subCommands": {
      "set": {
        "title": "Set command",
        "shortDesc": "The set command subscribes ODIS notifications.",
        "ref": "The notifications are triggered by modifications to ODIS fields.Syntax:\n\n```\n+ODISNTF=<reporting> \n```\n\nNotification syntax:\n\n```\n+ODISNTF: <HDID>,<HDMAN>,<HDMOD>,<HDSW>\n```\n\nThe set command parameter and its defined values are the following:\n\n - &lt;reporting&gt;\n   - 0 – Unsubscribe unsolicited notifications\n   - 1 – Subscribe unsolicited notifications\n\n\nThe following command example subscribes ODIS notifications:\n\n```\nAT+ODISNTF=1 OK\n```\n\nThe following is an example of an unsolicited ODIS notification:\n\n```\n+ODISNTF: \"HDID01\",\"HDMAN01\",\"HDMOD01\",\"HDSW01\"\n```\n\n"
      }
    }
  },
  "odis": {
    "title": "Set and read ODIS fields +ODIS",
    "shortDesc": "The `+ODIS` command sets and reads ODIS fields.",
    "versions": ["v1.2.x", "v1.3.x"],
    "subCommands": {
      "set": {
        "title": "Set command",
        "shortDesc": "The set command sets ODIS fields. The command configuration is stored to Non-volatile Memory (NVM) approximately every 48 hours and when the modem is powered off with the `+CFUN=0` command.<!-- This is conrefed in several topics -->",
        "ref": "Active `%XPOFWARN` warning blocks the storing to NVM.<!-- This is conrefed in several topics -->Syntax:\n\n```\n+ODIS=<HDID>,<HDMAN>,<HDMOD>,<HDSW>\n```\n\nThe set command parameters and their defined values are the following:\n\n - &lt;HDID&gt;\n   - String in alphanumeric format. Host device ID.\n -  &lt;HDMAN&gt;\n   - String in alphanumeric format. Host device manufacturer.\n - &lt;HDMOD&gt;\n   - String in alphanumeric format. Host device model.\n - &lt;HDSW&gt;\n   - String in alphanumeric format. Host device software version.\n\n\nThe following command example sets host device ID to HDID01, host device manufacturer to HDMAN01, host device model to HDMOD01, and host device software version to         HDSW01:\n\n```\nAT+ODIS=\"HDID01\",\"HDMAN01\",\"HDMOD01\",\"HDSW01\" OK\n```\n\n"
      },
      "read": {
        "title": "Read command",
        "shortDesc": "The read command reads ODIS fields.",
        "ref": "The response includes all values except the host device ID.Response syntax:\n\n```\n+ODIS: <HDMAN>,<HDMOD>,<HDSW>\n```\n\nThe following command example reads the current values:\n\n```\nAT+ODIS? +ODIS: \"HDMAN01\",\"HDMOD01\",\"HDSW01\" OK\n```\n\n"
      }
    }
  },
  "modemuuid": {
    "title": "Modem build UUID %XMODEMUUID",
    "shortDesc": "The Nordic-proprietary `%XMODEMUUID` command requests the UUID of a modem build.",
    "versions": ["v1.2.x", "v1.3.x", "pti_v1.1.x≥1"],
    "subCommands": {
      "set": {
        "title": "Set command",
        "shortDesc": "The set command requests the UUID of a modem build.",
        "ref": "Syntax:\n\n```\n%XMODEMUUID\n```\n\nResponse syntax:\n\n```\n%XMODEMUUID: <UUID>\n```\n\nThe response parameter and its defined value are the following:\n\n - &lt;UUID&gt;\n   - String without double quotes. UUID of the modem build.\n\n\nThe following command example requests the UUID of a modem build:\n\n```\nAT%XMODEMUUID %XMODEMUUID: 25c95751-efa4-40d4-8b4a-1dcaab81fac9 OK\n```\n\n"
      }
    }
  },
  "hwver": {
    "title": "Hardware identification %HWVERSION ",
    "shortDesc": "The Nordic-proprietary `%HWVERSION` command requests hardware identification.",
    "versions": ["v1.1.x", "v1.2.x", "v1.3.x", "pti_v1.1.x≥1"],
    "subCommands": {}
  },
  "general": {
    "title": "General",
    "shortDesc": "The general commands are for the identification of the device.",
    "versions": [],
    "subCommands": {}
  },
  "cgsn": {
    "title": "Product serial number identification +CGSN",
    "shortDesc": "The `+CGSN` command requests product serial number identification.",
    "versions": ["v1.0.x", "v1.1.x", "v1.2.x", "v1.3.x", "pti_v1.1.x≥1"],
    "subCommands": {
      "test": {
        "title": "Test command",
        "shortDesc": "The test command returns a list of supported `<snt>` values.",
        "ref": "Response syntax:\n\n```\n+CGSN: (list of supported <snt>s)\n```\n\nThe test command parameter and its defined values are the following:\n\n - \n   - \n\n\nThe following command example reads the supported types of product serial number identifications:\n\n```\nAT+CGSN=? +CGSN: (0-3) OK\n```\n\n"
      },
      "set": {
        "title": "Set command",
        "shortDesc": "The set command requests product serial number identification.",
        "ref": "Syntax:\n\n```\n+CGSN[=<snt>]\n```\n\nThe set command parameters and their defined values are the following:\n\n - &lt;snt&gt;\n   - 0 – Respond with `<sn>` (default)\n   - 1 – Respond with `+CGSN: <imei>`\n   - 2 – Respond with `+CGSN: <imeisv>`\n   - 3 – Respond with `+CGSN: <svn>`\n - &lt;sn&gt;\n   - Information text determined by the manufacturer. Up to 2048 characters. Electronic Serial Number (ESN) returned if available. International Mobile (Station) Equipment Identity (IMEI) returned if ESN not available.\n - &lt;imei&gt;\n   - String in decimal format indicating the IMEI. Composed of Type Allocation Code (TAC) (8 digits), Serial Number (SNR) (6 digits), and Check Digit (CD) (1 digit).\n - &lt;imeisv&gt;\n   - String in decimal format indicating the International Mobile (Station) Equipment Identity, Software Version (IMEISV). The 16 digits of IMEISV are composed of TAC (8 digits), SNR (6 digits), and Software Version Number (SVN) (2 digits).\n - &lt;svn&gt;\n   - String in decimal format indicating the current SVN which is part of IMEISV.\n\n\nResponse syntax when `<snt>=0` (or omitted):\n\n```\n<sn>\n```\n\nResponse syntax for other `<snt>` values:\n\n```\n+CGSN: <string>\n```\n\nwhere `<string> `can be `<imei>`, `<imeisv>`, or `<svn>`. The following command example reads the serial       number:\n\n```\nAT+CGSN 352656100367872 OK\n```\n\nThe following command example reads the IMEI:\n\n```\nAT+CGSN=1 +CGSN: \"352656100367872\" OK\n```\n\n"
      }
    }
  },
  "cgmr": {
    "title": "Revision identification +CGMR",
    "shortDesc": "The `+CGMR` command requests modem firmware revision identification.",
    "versions": ["v1.0.x", "v1.1.x", "v1.2.x", "v1.3.x", "pti_v1.1.x≥1"],
    "subCommands": {
      "set": {
        "title": "Set command",
        "shortDesc": "The set command requests revision identification. ",
        "ref": "Syntax:\n\n```\n+CGMR\n```\n\nResponse syntax:\n\n```\n<revision>\n```\n\nThe `<revision>` parameter returns a string of up to 2048 characters followed by `<CR><LF>OK`.The following command example reads the revision ID:\n\n```\nAT+CGMR mfw_nrf9160_1.1.1 OK\n```\n\n"
      }
    }
  },
  "cgmm": {
    "title": "Model identification +CGMM",
    "shortDesc": "For reference, see *3GPP 27.007 Ch. 5.2*.",
    "versions": ["v1.0.x", "v1.1.x", "v1.2.x", "v1.3.x", "pti_v1.1.x≥1"],
    "subCommands": {
      "set": {
        "title": "Set command",
        "shortDesc": "The set command requests System in Package (SiP) model identification.",
        "ref": "Syntax: \n\n```\n+CGMM\n```\n\nResponse syntax:\n\n```\n<model>\n```\n\nThe `<model>` parameter returns a string of up to 2048 characters followed by` <CR><LF>OK`.The following command example reads the model ID:\n\n```\nAT+CGMM nRF9160-SICA OK\n```\n\n"
      }
    }
  },
  "cgmi": {
    "title": "Manufacturer identification +CGMI",
    "shortDesc": "The `+CGMI` command requests manufacturer identification.",
    "versions": ["v1.0.x", "v1.1.x", "v1.2.x", "v1.3.x", "pti_v1.1.x≥1"],
    "subCommands": {
      "set": {
        "title": "Set command",
        "shortDesc": "The set command requests manufacturer identification.",
        "ref": "Syntax:\n\n```\n+CGMI\n```\n\nResponse syntax:\n\n```\n<manufacturer>\n```\n\nThe `<manufacturer>` parameter returns a string of up to 2048 characters followed by `<CR><LF>`.The following command example reads the manufacturer ID: \n\n```\nAT+CGMI Nordic Semiconductor ASA OK\n```\n\n"
      }
    }
  },
  "did": {
    "title": "SiP 2DID %2DID",
    "shortDesc": "The Nordic-proprietary `%2DID` command reads the 2DID of the nRF9160 System in Package (SiP). The 2DID corresponds to the two-dimensional barcode etched on top of the module.",
    "versions": ["v1.3.x"],
    "subCommands": {
      "set": {
        "title": "Set command",
        "shortDesc": "The set command reads the 2DID (SERIAL_NUMBER_A) of the nRF9160 System in Package (SiP). If the 2DID has not been written to the device, the response is an empty string.",
        "ref": "Syntax:\n\n```\n%2DID\n```\n\nThe following command example reads the 2DID when a 2DID exists on the device:\n\n```\nAT%2DID %2DID: \"F1413BQF072303\" OK \n```\n\nThe following command example reads the 2DID when a 2DID does not exist on the device:\n\n```\nAT%2DID %2DID: \"\" OK\n```\n\n"
      }
    }
  },
  "xvbatlvl": {
    "title": "Battery voltage low level notification %XVBATLVL",
    "shortDesc": "The Nordic-proprietary `%XVBATLVL` command subscribes unsolicited battery voltage low level       notifications.",
    "versions": ["v1.1.x", "v1.2.x", "v1.3.x"],
    "subCommands": {
      "set": {
        "title": "Set command",
        "shortDesc": "The set command subscribes unsolicited notifications of battery voltage low level. The command configuration is stored to Non-volatile Memory (NVM) approximately every 48 hours and when the modem is powered off with the `+CFUN=0` command.",
        "ref": "Active `%XPOFWARN` warning blocks the storing to NVM.Syntax:\n\n```\n%XVBATLVL=<n>\n```\n\nNotification syntax:\n\n```\n%XVBATLOWLVL: <battery_voltage>\n```\n\nThe set command parameter and its defined values are the following:\n\n - &lt;n&gt;\n   - 0 – Unsubscribe unsolicited notifications of battery voltage low level\n   - 1 – Subscribe unsolicited notifications of battery voltage low level\n\n\nThe notification parameter and its defined values are the following:\n\n - &lt;battery_voltage&gt;\n   - Integer, 3000–5000 mV.\n   - 0 – No valid battery voltage available\n\n\nThe following command example subscribes unsolicited notifications of battery voltage low level:\n\n```\nAT%XVBATLVL=1 OK \n```\n\nThe following notification example indicates that the battery voltage level is under the currently set battery voltage         low level when the level has been set to 3750       mV:\n\n```\n%XVBATLOWLVL: 3700\n```\n\n"
      }
    }
  },
  "xvbatlowlvl": {
    "title": "Battery voltage low level %XVBATLOWLVL",
    "shortDesc": "The Nordic-proprietary `%XVBATLOWLVL` command sets the battery voltage low level for a modem. If notifications of battery voltage low level have been subscribed, the     modem sends clients a notification when the measured battery voltage is below the defined level.     The modem reads sensors periodically in connected mode. The default period is 60 seconds. If the     temperature or voltage gets close to the set threshold, a shorter period is       used.",
    "versions": ["v1.1.x", "v1.2.x", "v1.3.x"],
    "subCommands": {
      "set": {
        "title": "Set command",
        "shortDesc": "The set command sets the battery voltage low level for a modem. The command configuration is stored to Non-volatile Memory (NVM) approximately every 48 hours and when the modem is powered off with the `+CFUN=0` command.",
        "ref": "Active `%XPOFWARN` warning blocks the storing to NVM.Syntax:\n\n```\n%XVBATLOWLVL=<battery_level>\n```\n\nThe set command parameter and its defined value are the following:\n\n - &lt;battery_level&gt;\n   - Integer, 3100–5000 mV. Factory default 3300 mV.\n\n\nThe following command example sets the battery voltage low level to 3500 mV:\n\n```\nAT%XVBATLOWLVL=3500 OK\n```\n\n"
      },
      "read": {
        "title": "Read command",
        "shortDesc": "The read command reads the battery voltage low level from a modem.",
        "ref": "Response syntax:\n\n```\n%XVBATLOWLVL?\n```\n\nThe following command example reads the current value of the battery voltage low level:\n\n```\nAT%XVBATLOWLVL? %XVBATLOWLVL: 3500 OK\n```\n\n"
      }
    }
  },
  "xvbat": {
    "title": "Battery voltage %XVBAT",
    "shortDesc": "The Nordic-proprietary `%XVBAT` command reads battery voltage.",
    "versions": ["v1.0.x", "v1.1.x", "v1.2.x", "v1.3.x", "pti_v1.1.x≥1"],
    "subCommands": {
      "set": {
        "title": "Set command",
        "shortDesc": "The set command reads the battery voltage in mV. ",
        "ref": "Syntax:\n\n```\n%XVBAT\n```\n\nResponse syntax:\n\n```\n +XVBAT: <vbat>\n```\n\nThe response parameter is the following:\n\n - &lt;vbat&gt;\n   - Integer. Battery voltage in mV, with a resolution of 4 mV. \n\n\nThe following command example reads the battery voltage and the response is for a successful case:\n\n```\nAT%XVBAT %XVBAT: 3600 OK\n```\n\n"
      }
    }
  },
  "xtemphighlvl": {
    "title": "High level for internal temperature %XTEMPHIGHLVL",
    "shortDesc": "The Nordic-proprietary `%XTEMPHIGHLVL` command sets the high level to internal temperature in the    modem.",
    "versions": ["v1.0.x", "v1.1.x", "v1.2.x", "v1.3.x"],
    "subCommands": {
      "set": {
        "title": "Set command",
        "shortDesc": "The set command sets the high internal temperature level for the notification in the `%XTEMP` command.",
        "ref": "When the high temperature level is reached, data transmission should be controlled and minimized to prevent modem overheating. The command configuration is stored to Non-volatile Memory (NVM) approximately every 48 hours and when the modem is powered off with the `+CFUN=0` command.Active `%XPOFWARN` warning blocks the storing to NVM.Syntax:\n\n```\n%XTEMPHIGHLVL=<temperature>\n```\n\nThe set command parameter and its defined value are the following:\n\n - &lt;temperature&gt;\n   - Integer. \n   - Celsius degrees between 1 and 85. Factory default 55.\n   - Celsius degrees between 1 and 90. Factory default 55.\n\n\nThe following command example sets the high temperature level:\n\n```\nAT%XTEMPHIGHLVL=60 OK\n```\n\n"
      },
      "read": {
        "title": "Read command",
        "shortDesc": "The read command reads the internal high temperature level of a modem.",
        "ref": "When a high temperature level is reached, data transmission should be controlled and minimized to prevent modem overheating.Syntax:\n\n```\n%XTEMPHIGHLVL?\n```\n\nThe following command example reads the current internal high temperature level:\n\n```\nAT%XTEMPHIGHLVL? %XTEMPHIGHLVL: 60 OK\n```\n\n"
      }
    }
  },
  "xtemp": {
    "title": "Internal temperature notification %XTEMP",
    "shortDesc": "The Nordic-proprietary `%XTEMP` command subscribes unsolicited internal temperature notifications. The modem reads sensors periodically in connected mode. The default   period is 60 seconds. If the temperature or voltage gets close to the critical temperature, a   shorter period is    used.",
    "versions": ["v1.0.x", "v1.1.x", "v1.2.x", "v1.3.x"],
    "subCommands": {
      "set": {
        "title": "Set command",
        "shortDesc": "The set command subscribes unsolicited internal temperature notifications. ",
        "ref": "A notification is sent when the temperature is rising above a high or critical temperature level or cooling down from a critical or high temperature level.Syntax:\n\n```\n%XTEMP=<n>\n```\n\nNotification syntax:\n\n```\n%XTEMP: <temperature_level>,<temperature>\n```\n\nThe set command parameter and its defined values are the following:\n\n - &lt;n&gt;\n   - 0 – Unsubscribe unsolicited temperature indications\n   - 1 – Subscribe unsolicited temperature indications\n\n\nThe notification parameters and their defined values are the following:\n\n - &lt;temperature_level&gt;\n   - 1 – Normal temperature\n   - 2 – High temperature. Factory default 55. This can be changed with [`%XTEMPHIGHLVL`](xtemphighlvl.dita#xtemphighlvl).\n   - 3 – Critical temperature. TX/RX disabled. Factory default 90.\n - &lt;temperature&gt;\n   - Integer. Celsius degrees between −40 and 125.\n\n\nThe following command example subscribes notifications:\n\n```\nAT%XTEMP=1 OK\n```\n\nThe following example shows an unsolicited notification for an internal temperature level:\n\n```\n%XTEMP: 1,37 %XTEMP: 2,56 %XTEMP: 3,91\n```\n\n"
      },
      "read": {
        "title": "Read command",
        "shortDesc": "The read command reads the internal temperature level and the temperature.",
        "ref": "Syntax:\n\n```\n%XTEMP?\n```\n\nResponse syntax:\n\n```\n%XTEMP: <temperature>\n```\n\nThe following command example reads the current modem temperature:\n\n```\nAT%XTEMP? %XTEMP: 50 OK\n```\n\n"
      }
    }
  },
  "xt3412": {
    "title": "Periodic TAU notification %XT3412",
    "shortDesc": "The Nordic-proprietary `%XT3412` command subscribes periodic Tracking Area Update (TAU) notifications. Based on XT3412 indications, the application can optimize its power efficiency by synchronizing its data transmissions with periodic TAU    procedures.",
    "versions": ["v1.3.x"],
    "subCommands": {}
  },
  "xsystemmode": {
    "title": "System mode %XSYSTEMMODE",
    "shortDesc": "The Nordic-proprietary `%XSYSTEMMODE` command sets the modem system mode.",
    "versions": ["v1.0.x", "v1.1.x", "v1.2.x", "v1.3.x", "pti_v1.1.x≥1"],
    "subCommands": {
      "set": {
        "title": "Set command",
        "shortDesc": "The set command sets the supported system modes of the modem. The command configuration is stored to Non-volatile Memory (NVM) approximately every 48 hours and when the modem is powered off with the `+CFUN=0` command.",
        "ref": "Active `%XPOFWARN` warning blocks the storing to NVM.\n\n> *Note:*\n> \n> \n>  - Only one supported LTE mode is allowed at a time.\n>  - With modem firmware version 1.3.x, both the LTE-M and Narrowband Internet of Things (NB-IoT) system modes can be configured and enabled.\n>  - This command is allowed only before activating the modem using the `CFUN=1` command. If the mode needs to be changed, do the following:\n> \n>  - Power off the modem using the `CFUN=0` command.\n>  - Power off the modem using the `CFUN=0` command or set it to flight mode using the `CFUN=4` command.\n> \n> \n> \n>  - Operator configurations can override values set by the user.\n> \n> \n> \n\nSyntax:\n\n```\n%XSYSTEMMODE=<LTE_M_support>,<NB_IoT_support>,<GNSS_support>,<LTE_preference>\n```\n\n\n\n - +CME ERROR codes\n   - 518 – Not allowed in active state\n   - 522 – Band configuration not valid for selected mode\n\n\nThe set command parameters and their defined values are the following:\n\n - &lt;LTE_M_support&gt;\n   - 0 – LTE-M not supported\n   - 1 – LTE-M supported\n - &lt;NB_IoT_support&gt;\n   - 0 – Narrowband Internet of Things (NB-IoT) not supported\n   - 1 – NB-IoT supported\n - &lt;GNSS_support&gt;\n   - 0 – Global Navigation Satellite System (GNSS) not supported\n   - 1 – GNSS supported\n - &lt;LTE_preference&gt;\n   - 0 – No preference. Initial system selection is based on history data and Universal Subscriber Identity Module (USIM). If history data or USIM configuration are not available, LTE-M is prioritized in the initial system               selection.\n   - 1 – LTE-M preferred.\n   - 2 – NB-IoT preferred.\n   - 3 – Network selection priorities override system priority, but if the same network or equal priority networks are found, LTE-M is preferred.\n   - 4 – Network selection priorities override system priority, but if the same network or equal priority networks are found, NB-IoT is preferred.\n   - \n\n> *Note:*\n> If `<LTE_preference>` is set to a non-zero value, `<LTE_M_support>` or `<NB_IoT_support>` or both must be set.\n\n\n\n\nThe following command example sets LTE-M and GNSS as the system modes. No preferred LTE mode set:\n\n```\nAT%XSYSTEMMODE=1,0,1,0 OK\n```\n\n"
      },
      "read": {
        "title": "Read command",
        "shortDesc": "The read command reads the supported modem system modes.",
        "ref": "Response syntax:\n\n```\n%XSYSTEMMODE: <LTE_M_support>,<NB_IoT_support>,<GNSS_support>,<LTE_preference>\n```\n\nThe read response parameters and their defined values are the following:\n\n - \n   - \n\n\nThe following command example reads the supported system mode:\n\n```\nAT%XSYSTEMMODE? %XSYSTEMMODE: 1,0,0,0 OK\n```\n\n"
      }
    }
  },
  "xsnrsq": {
    "title": "SNR signal quality notification %XSNRSQ",
    "shortDesc": "The Nordic-proprietary `%XSNRSQ` command subscribes notifications of changes in Signal-to-Noise Ratio (SNR) signal quality.",
    "versions": ["v1.0.x", "v1.1.x", "v1.2.x", "v1.3.x"],
    "subCommands": {
      "set": {
        "title": "Set command",
        "shortDesc": "The set command subscribes notifications of changes in Signal-to-Noise Ratio (SNR) signal quality.",
        "ref": "Syntax:\n\n```\n%XSNRSQ=<n>\n```\n\nNotification syntax:\n\n```\n%XSNRSQ: <snr>,<threshold_index>,<srxlev>,<ce_level>\n```\n\nThe parameters and their defined values are the following:\n\n - &lt;n&gt;\n   - 0 – Unsubscribe SNR signal quality notifications\n   - 1 – Subscribe SNR signal quality notifications\n - &lt;snr&gt;\n   - 0 – SNR &lt; −24 dB\n   - 1 – When −24 dB ≤ SNR &lt; −23 dB\n   - 2 – When −23 dB ≤ SNR &lt; −22 dB\n   - ...\n   - 47 – When 22 dB ≤ SNR &lt; 23 dB\n   - 48 – When 23 dB ≤ SNR &lt; 24 dB\n   - 49 – When 24 dB ≤ SNR\n   - 127 – Not known or not detectable\n   - The index value of SNR can be converted to decibel with the following formula: Index – 24 = dB. For example, 1 – 24 = –23 dB and 47 – 24 = 23 dB.\n - &lt;threshold_index&gt;\n   - The index of the SNR threshold which is below the measured SNR value.\n   - 0 – SNR is below the first threshold\n   - 1 – SNR is between the first and second threshold\n   - 2 – SNR is between the second and third threshold\n   - 3 – SNR is between the third and fourth threshold\n   - 4 – SNR is above the fourth threshold\n   - With default thresholds 16, 24, 32, and 40, the measured value 35 leads to index 3.\n - &lt;srxlev&gt;\n   - 0 – SRXLEV –127 or below –127\n   - 1 to 254 – SRXLEV –126 to 127\n   - 255 – SRXLEV above 127\n   - 32767 – Invalid or not know\n - &lt;ce_level&gt;\n   - 0 – CE Level 0. Normal coverage.\n   - 1 – CE Level 1. Enhanced coverage, according to LTE cell access criteria specified in *3GPP TS 36.304*.\n   - 255 – Invalid or not known\n\n\nThe following command example subscribes Evolved Universal Terrestrial Radio Access (E-UTRA) signal quality notifications:\n\n```\nAT%XSNRSQ=1 OK\n```\n\nThe following notification example indicates that the measured average SNR has changed to 39 and is mapped to threshold 3:\n\n```\n%XSNRSQ: 39,3,130,1\n```\n\n"
      },
      "read": {
        "title": "Read command",
        "shortDesc": "The read command reads Signal-to-Noise Ratio (SNR) signal quality.",
        "ref": "Response syntax:\n\n```\n%XSNRSQ: <snr>,<srxlev>,<ce_level>\n```\n\nThe read command parameters and their defined values are the following:\n\n - &lt;snr&gt;\n   - 0 – SNR &lt; −24 dB\n   - 1 – When −24 dB ≤ SNR &lt; −23 dB\n   - 2 – When −23 ≤ SNR &lt; −22 dB\n   - ...\n   - 47 – When 22 ≤ SNR &lt; 23 dB\n   - 48 – When 23 ≤ SNR &lt; 24 dB\n   - 49– When 24 ≤ SNR\n   - 127 – Not known or not detectable\n - &lt;srxlev&gt;\n   - 0 – SRXLEV –127 or below –127\n   - 1 to 254 – SRXLEV –126 to 126\n   - 255 – SRXLEV 127 or above\n   - 32767 – Invalid or not know\n - &lt;ce_level&gt;\n   - 0 – CE Level 0. Normal coverage.\n   - 1 – CE Level 1. Enhanced coverage.\n   - 255 – Invalid or not known\n\n\nThe following command example reads SNR signal quality:\n\n```\nAT%XSNRSQ? %XSNRSQ: 39,168,0 OK\n```\n\n"
      }
    }
  },
  "xsmsfallback": {
    "title": "Fallback to SMS only %XSMSFALLBACK",
    "shortDesc": "The Nordic-proprietary `%XSMSFALLBACK` command sets the SMS only fallback functionality. With SMS only fallback, User Equipment (UE) triggers a Tracking Area Update (TAU) request for SMS only immediately when CS service registration fails with permanent cause. This ensures that SMS services are available as soon as possible after   registration.  SMS only and SMS only fallback are available only in Narrowband Internet of Things (NB-IoT).",
    "versions": ["v1.0.x", "v1.1.x", "v1.2.x", "v1.3.x"],
    "subCommands": {
      "set": {
        "title": "Set command",
        "shortDesc": "The set command enables and disables immediate SMS only fallback in Narrowband Internet of Things (NB-IoT) if CS services are permanently unavailable via combined procedures.",
        "ref": "The command configuration is stored to Non-volatile Memory (NVM) approximately every 48 hours and when the modem is powered off with the `+CFUN=0` command.Active `%XPOFWARN` warning blocks the storing to NVM.Syntax:\n\n```\n%XSMSFALLBACK=<fallback_status>\n```\n\nThe set command parameter and its defined values are the following:\n\n - &lt;fallback_status&gt;\n   - 0 – Fallback is not performed\n   - 1 – Fallback is performed\n\n\nThe following command example sets SMS fallback in NB-IoT:\n\n```\nAT%XSMSFALLBACK=1 OK\n```\n\n"
      }
    }
  },
  "xptw": {
    "title": "PTW setting %XPTW",
    "shortDesc": "The Nordic-proprietary `%XPTW` command sets the Paging Time Window (PTW). ",
    "versions": ["v1.0.x", "v1.1.x", "v1.2.x", "v1.3.x"],
    "subCommands": {
      "set": {
        "title": "Set command",
        "shortDesc": "The set command sets the requested Paging Time Window (PTW) parameters. The command configuration is stored to Non-volatile Memory (NVM) approximately every 48 hours and when the modem is powered off with the `+CFUN=0` command.",
        "ref": "Active `%XPOFWARN` warning blocks the storing to NVM.\n\n> *Note:*\n> Use the command with caution. The requested values must be compliant with the Extended Discontinuous Reception (eDRX) cycle values configured using the [`+CEDRXS`](../nw_service/cedrxs.dita#cedrxs) command. The modem uses the configured value in eDRX cycle/PTW length negotiation with the network when         eDRX is enabled using the `+CEDRXS` command.\n\nWhen eDRX parameters are changed using the `+CEDRXS` command, the PTW value is set as default. The default values can vary between different modem firmware releases. If the application         needs to use a certain value, it must be set. If other than the default PTW has to be used,         the `%XPTW` command shall be sent after the `+CEDRXS` command.Syntax:\n\n```\n%XPTW=<AcT-type>[,<Requested_ptw_value>]\n```\n\nThe set command parameters and their defined values are the following:\n\n - &lt;AcT-type&gt;\n   - 4 – Evolved Terrestrial Radio Access Network (E-UTRAN) (WB-S1 mode)\n   - 5 – E-UTRAN (NB-S1 mode)\n - &lt;Requested_ptw_value&gt;\n   - String. Half a byte in 4-bit format. The PTW value refers to bits from 8 to 5 of octet 3 of the eDRX parameters information element (see *3GPP TS 24.008, subclause 10.5.5.32*). Optional. If not present, the value of the requested AcT-type is reset to the manufacturer-specific default.LTE-M modeBit4 3 2 1 – PTW length0 0 0 0 – 1.28 seconds0 0 0 1 – 2.56 seconds0 0 1 0 – 3.84 seconds0 0 1 1 – 5.12 seconds0 1 0 0 – 6.4 seconds0 1 0 1 – 7.68 seconds0 1 1 0 – 8.96 seconds0 1 1 1 – 10.24 seconds1 0 0 0 – 11.52 seconds1 0 0 1 – 12.8 seconds1 0 1 0 – 14.08 seconds1 0 1 1 – 15.36 seconds1 1 0 0 – 16.64 seconds1 1 0 1 – 17.92 seconds1 1 1 0 – 19.20 seconds1 1 1 1 – 20.48 secondsNarrowband Internet of Things (NB-IoT) modeBit4 3 2 1 – PTW length0 0 0 0 – 2.56 seconds0 0 0 1 – 5.12 seconds0 0 1 0 – 7.68 seconds0 0 1 1 – 10.24 seconds0 1 0 0 – 12.8 seconds0 1 0 1 – 15.36 seconds0 1 1 0 – 17.92 seconds0 1 1 1 – 20.48 seconds1 0 0 0 – 23.04 seconds1 0 0 1 – 25.6 seconds1 0 1 0 – 28.16 seconds1 0 1 1 – 30.72 seconds1 1 0 0 – 33.28 seconds1 1 0 1 – 35.84 seconds1 1 1 0 – 38.4 seconds1 1 1 1 – 40.96 seconds\n\n\nThe following command example sets the requested PTW value:\n\n```\nAT%XPTW=4,\"1000\" OK\n```\n\n"
      },
      "read": {
        "title": "Read command",
        "shortDesc": "The read command reads the requested Paging Time Window (PTW) parameters.",
        "ref": "Response syntax:\n\n```\n%XPTW: <AcT-type>,<Requested_ptw_value>\n```\n\nThe read response parameters and their defined values are the following:\n\n - \n   - \n - &lt;Requested_ptw_value&gt;\n   - String. Half a byte in 4-bit format. The PTW value refers to bits from 8 to 5 of octet 3 of the Extended Discontinuous Reception (eDRX) parameters information element (see *3GPP TS 24.008, subclause 10.5.5.32*).\n\n\nThe following command example reads the requested PTW value(s):\n\n```\nAT%XPTW? %XPTW: 4,\"0110\" %XPTW: 5,\"1110\" OK\n```\n\n\n\n> *Note:*\n> \n> \n>  - If the device supports many access technologies, each access technology is included in a separate line as illustrated in the example above.\n>  - The negotiated PTW value can be checked with the [`+CEDRXRDP`](../nw_service/cedrxrdp.dita#cedrxrdp) command.\n> \n> \n> \n\n"
      }
    }
  },
  "xproddone": {
    "title": "Customer production done %XPRODDONE",
    "shortDesc": "The Nordic-proprietary `%XPRODDONE` command shall be sent after customer production is    done.",
    "versions": ["v1.0.x", "v1.1.x", "v1.2.x", "v1.3.x"],
    "subCommands": {
      "set": {
        "title": "Set command",
        "shortDesc": "The set command disables R&amp;D features by closing the modem Universal Asynchronous Receiver/Transmitter (UART) connection, which is meant only for nRF9160 System in Package (SiP) manufacturing test purposes. The command allows to permanently disable the use of the       `%XRFTEST` and `%XEMPR` commands. The command also permanently enables the downgrade prevention of modem firmware.",
        "ref": "Downgrade prevention means that it is not possible to update an older modem firmware version to a device. Downgrade prevention applies to both Firmware-Over-The-Air (FOTA) and wired firmware update.If the `<value>` parameter is not set or is 0, the `%XRFTEST` and `%XEMPR` commands are permanently disabled after the `%XPRODDONE` command has been performed. To keep the commands usable after `%XPRODDONE`, use `AT%XPRODDONE=1`. If commands have been disabled with `%XPRODDONE`, they cannot be re-enabled. If `%XRFTEST` is not disabled when issuing `%XPRODDONE`, it remains permanently enabled and cannot be disabled later.\n\n> *Note:*\n> Downgrade prevention cannot be disabled once it has been enabled.\n\n\n\n> *Note:*\n> The `%XRFTEST` test and `%XEMPR` TX power reduction features can be used with the PTI modem firmware even if they have been disabled with           `%XPRODDONE`.\n\nSyntax:\n\n```\n%XPRODDONE=[<value>]\n```\n\nThe set command parameter and its defined values are the following:\n\n - &lt;value&gt;\n   - 0 – Permanently disable `%XRFTEST` and `%XEMPR`\n   - 1 – Leave `%XRFTEST` and `%XEMPR` usable\n\n\nThe following command example sets the customer production to done and permanently disables the `%XRFTEST` command:\n\n```\nAT%XPRODDONE OK\n```\n\nor\n\n```\nAT%XPRODDONE=0 OK\n```\n\nThe following command example sets customer production to done and leaves `%XRFTEST` usable:\n\n```\nAT%XPRODDONE=1 OK\n```\n\n\n\n> *Note:*\n> In modem firmware versions 1.0.x (x ≥ 2) and 1.1.0, downgrade prevention is enabled after first modem firmware update after issuing `%XPRODDONE`. In modem firmware versions 1.1.x (x ≥ 1) and 1.2.x, downgrade prevention becomes active         immediately after the command is issued.\n\n"
      }
    }
  },
  "xpofwarn": {
    "title": "External power off warnings %XPOFWARN",
    "shortDesc": "The Nordic-proprietary `%XPOFWARN` command controls the power off warnings from the modem. The command is supported by nRF9160 SIxA       B1A.",
    "versions": ["v1.1.x≥3", "v1.2.x≥1", "v1.3.x"],
    "subCommands": {
      "set": {
        "title": "Set command",
        "shortDesc": "The set command configures the power off warnings from the modem. The warning is received as an unsolicited AT indication. A hardware indication event is also sent to the     application domain.",
        "ref": "When the power off warning is sent, the modem sets itself to Offline mode and sends `+CGEV: ME BATTERY LOW` and `%MDMEV: ME BATTERY LOW` in modem firmware that supports `%MDMEV`.To receive unsolicited [`+CGEV`](../packet_domain/cgev.dita#cgev) and [`%MDMEV`](mdmev.dita#mdmev) notifications, the application must first request and enable them.The application is responsible for detecting possible increase in the battery voltage level and for restarting the LTE protocol activities. This can be detected by issuing the           `%XVBAT` query. If the level is acceptable again (&gt;3000 mV), the application can proceed with `+CFUN=1`. For more information, see [](undefined). Syntax:\n\n```\n%XPOFWARN=<state>[,<voltage>]\n```\n\nThe set command parameters and their defined values are the following:\n\n - &lt;state&gt;\n   - 0 – Disable power off warnings\n   - 1 – Enable power off warnings\n - &lt;voltage&gt;\n   - The voltage level when the power off warning is sent. Mandatory when enabling power off warnings. Optional when disabling power off warnings. \n   - 30 – 3000 mV\n   - 31 – 3100 mV\n   - 32 – 3200 mV\n   - 33 – 3300 mV\n\n\nThe following command example enables the power off warning in 3000 mV:\n\n```\nAT%XPOFWARN=1,30 OK\n```\n\n"
      }
    }
  },
  "xmodemtrace": {
    "title": "Modem trace activation %XMODEMTRACE",
    "shortDesc": "The Nordic-proprietary `%XMODEMTRACE` command activates modem traces. The trace data is in binary format and can help the Nordic customer support to analyze and resolve    issues.",
    "versions": ["v1.0.x", "v1.1.x", "v1.2.x", "v1.3.x", "pti_v1.1.x≥1"],
    "subCommands": {}
  },
  "xmodemsleep": {
    "title": "Modem sleep notification %XMODEMSLEEP",
    "shortDesc": "The Nordic-proprietary `%XMODEMSLEEP` command subscribes modem sleep notifications. Based on the `%XMODEMSLEEP` indications, the application can optimize its power efficiency by synchronizing its operations to the modem’s sleeps and wake-ups   and radio activity and inactivity.",
    "versions": ["v1.3.x"],
    "subCommands": {
      "set": {
        "title": "Set command",
        "shortDesc": "The set command subscribes and unsubscribes all types of modem sleep notifications. The notification returns the type of sleep. The application can use the warning time to trigger an     action before modem wakeup. The `<threshold>` parameter is used to indicate the length of the sleep periods the application is interested in.",
        "ref": "Syntax:\n\n```\n%XMODEMSLEEP=<n>[,<warning_time>,<threshold>]\n```\n\nThe set command parameters and their defined values are the following:\n\n - &lt;n&gt;\n   - 0 – Unsubscribe modem sleep notifications\n   - 1 – Subscribe modem sleep notifications\n - &lt;warning_time&gt;\n   - Advance warning time in ms. A notification is sent as a prewarning of modem wakeup.\n   - Range 500–3600000 ms.\n   - Value `0` can be used if advance warning is not needed. \n   - The `<warning_time>` parameter is required when `<n>` is `1`.\n - &lt;threshold&gt;\n   - The shortest sleep time indicated to application in ms.\n   - Range 10240–3456000000 ms.\n   - The `<threshold>` parameter is required when `<n>` is `1`.\n\n\nNotification syntax:\n\n```\n%XMODEMSLEEP: <type>[,<time>]\n```\n\nThe notification parameters and their defined values are the following:\n\n - &lt;type&gt;\n   - Type of modem sleep\n   - 1 – Power Saving Mode (PSM). Modem is in power saving mode.\n   - 2 – RF inactivity. Modem sleeps due to RF inactivity, including Extended Discontinuous Reception (eDRX).\n   - 3 – Limited service. Modem sleeps due to being out of coverage.\n   - 4 – Flight mode. Modem has been set to flight mode.\n   - 5 – Sleep interrupted. Indicated sleep is interrupted.\n   - 6 – Sleep resumed. Indicated sleep has been resumed.\n - &lt;time&gt;\n   - Sleep time in ms. If the `<time>` parameter is not present, sleep time is considered infinite. If the `<time>` parameter is `0`, the sleep has ended. The value might exceed the 32-bit maximum value.\n\n\nThe following command example subscribes modem sleep notifications. The shortest indicated sleep time is 60 seconds, and a notification is sent 1 second before the end of sleep:\n\n```\nAT%XMODEMSLEEP=1,1000,60000\n```\n\nThe following notification example indicates PSM duration of 320 hours:\n\n```\n%XMODEMSLEEP: 1,1152000000\n```\n\n"
      }
    }
  },
  "xfotasize": {
    "title": "Free FOTA flash space size %XFOTASIZE",
    "shortDesc": "The Nordic-proprietary `%XFOTASIZE` command reads the available flash space size for a Firmware-Over-The-Air (FOTA) update.",
    "versions": [],
    "subCommands": {
      "set": {
        "title": "Set command",
        "shortDesc": "The set command reads the available flash space for a FOTA update in kB.",
        "ref": "Syntax:\n\n```\n%XFOTASIZE\n```\n\nResponse syntax:\n\n```\n%XFOTASIZE: <size>\n```\n\nThe response parameter and its defined value are the following:\n\n - &lt;size&gt;\n   - Integer. Free FOTA flash space size in kB.\n\n\nExample:\n\n```\nAT%XFOTASIZE %XFOTASIZE: 528 OK\n```\n\n"
      }
    }
  },
  "xfilewrite": {
    "title": "Write content to file %XFILEWRITE",
    "shortDesc": "The Nordic-proprietary `%XFILEWRITE` command writes given content to a file.",
    "versions": ["v1.2.x", "v1.3.x", "pti_v1.1.x≥1"],
    "subCommands": {
      "set": {
        "title": "Set command",
        "shortDesc": "The set command requests to write content to a file.",
        "ref": "Active `%XPOFWARN` warning prevents the file write to NVM.Syntax:\n\n```\n%XFILEWRITE=<file>,<content>[,<checksum>]\n```\n\nThe set command parameters and their defined values are the following:\n\n - &lt;file&gt;\n   - 1 – Global Navigation Satellite System (GNSS) almanac\n - &lt;content&gt;\n   - Hexadecimal numbers containing two International Reference Alphabet (IRA) characters per octet.\n - &lt;checksum&gt;\n   - Checksum of the content calculated over the sha256 algorithm. Mandatory for GNSS almanac file.\n\n\nThe following command example requests to write the GNSS almanac to a file:\n\n```\nAT%XFILEWRITE=1, “f0ea0200312a080000000031...”,”bf38c845eab79f459f7b3ef4393f1a2860d309952832a0073b990f12a7274e64” OK\n```\n\n"
      }
    }
  },
  "xfactoryreset": {
    "title": "Factory reset %XFACTORYRESET",
    "shortDesc": "The Nordic-proprietary `%XFACTORYRESET` command resets the modem to factory settings. This operation is allowed only when the modem is not    activated.",
    "versions": ["v1.3.x"],
    "subCommands": {
      "set": {
        "title": "Set command",
        "shortDesc": "The set command resets the modem to factory settings. Non-volatile Memory (NVM) is updated with this command. `CFUN=0` is not needed to trigger the update.",
        "ref": "Active `%XPOFWARN` warning blocks the NVM factory reset.Syntax:\n\n```\n%XFACTORYRESET=<reset_type>\n```\n\n\n\n - +CME ERROR codes\n   - 518 – Not allowed in active state.\n   - \n\n\nThe set command parameter and its defined values are the following:\n\n - &lt;reset_type&gt;\n   - 0 – Reset all modem data to factory settings\n   - 1 – Reset user-configurable data to factory settings\n\n\nThe following command example resets all modem data to factory settings:\n\n```\nAT%XFACTORYRESET=0\n```\n\nThe following command example resets user-configurable data to factory settings:\n\n```\nAT%XFACTORYRESET=1\n```\n\n"
      }
    }
  },
  "xempr": {
    "title": "Extra maximum TX power reduction %XEMPR",
    "shortDesc": "The Nordic-proprietary `%XEMPR` command allows to configure an extra reduction of 0.5 or 1 dB to the maximum transmission power on all or selected supported 3GPP       bands separately in the Narrowband Internet of Things (NB-IoT) and LTE-M modes.",
    "versions": ["v1.2.x", "v1.3.x", "pti_v1.1.x≥1"],
    "subCommands": {
      "set": {
        "title": "Set command",
        "shortDesc": "The set command sets the extra maximum TX power reduction.",
        "ref": "The command can be given separately to the Narrowband Internet of Things (NB-IoT) and LTE-M modes. If a band is not mentioned in the command, the EMPR is zero for that band. The command cannot be used to increase transmission power.           `%XEMPR` should be given before the activation of the modem to be effective. The command configuration is stored to Non-volatile Memory (NVM) approximately every 48 hours and when the modem is powered off with the `+CFUN=0` command. The configuration can be stored to NVM with the [`%XFSSYNC`](../production_test/xfssync.dita#xfssync) command when the Production Test Image (PTI) modem firmware is used.<!-- This is conrefed in several topics --> If a valid EMPR configuration exists, the reduction is automatically applied to the applicable transmissions. Active `%XPOFWARN` warning blocks the storing to NVM.Syntax:\n\n```\n%XEMPR=<system_mode>,<k>,<band0>,<pr0>,<band1>,<pr1>,…,<bandk-1>,<prk-1>\n```\n\nor\n\n```\n%XEMPR=<system_mode>,0,<pr_for_all_bands>\n```\n\nThe set command parameters and their defined values are the following:\n\n - &lt;system_mode&gt;\n   - 0 – NB-IoT\n   - 1 – LTE-M\n - &lt;k&gt;\n   - The number of bands to which EMPR is set. If `<k>` is 0, the next parameter `<pr_for_all_bands>` is applied to all supported 3GPP bands. The `%XEMPR` command supports listing the power reduction for all the supported bands of nRF9160 in one command for both NB-IoT and LTE-M.\n - &lt;bandn&gt;\n   - The number of the 3GPP band to which the following `<prn>` is applied. \n - &lt;prn&gt;\n   - EMPR for `<bandn>`\n   - 0 – 0 dB\n   - 1 – Maximum power reduced 0.5 dB\n   - 2 – Maximum power reduced 1.0 dB\n   - &gt; 2 is not allowed\n\n\nThe following command example reduces the maximum TX power on all bands in the NB-IoT mode by 1 dB:\n\n```\nAT%XEMPR=0,0,2 OK\n```\n\nThe following command example reduces the maximum TX power on three (`<k>=3`) bands in the LTE-M mode (`<system_mode>=1`). The maximum TX power is reduced by 1 dB on bands 5 and 8 and by 0.5 dB on band         13:\n\n```\nAT%XEMPR=1,3,5,2,8,2,13,1 OK\n```\n\nThe following command example deletes the existing configuration by sending the command without any       parameters:\n\n```\nAT%XEMPR OK\n```\n\n"
      },
      "read": {
        "title": "Read command",
        "shortDesc": "The read command reads the currently active configuration.",
        "ref": "Syntax:\n\n```\n%XEMPR?\n```\n\nThe following command example reads the currently active configuration after both examples of the set command have been given:\n\n```\nAT%XEMPR? %XEMPR: 0,0,2  1,3,5,2,8,2,13,1  OK\n```\n\n"
      }
    }
  },
  "xdataprfl": {
    "title": "Data profile %XDATAPRFL",
    "shortDesc": "The Nordic-proprietary `%XDATAPRFL` command can be used to provide information on the application use case to modem so that it can optimize power    consumption.",
    "versions": ["v1.0.x", "v1.1.x", "v1.2.x", "v1.3.x"],
    "subCommands": {
      "read": {
        "title": "Read command",
        "shortDesc": "The read command reads the connectivity statistics.",
        "ref": "Syntax:\n\n```\n%XCONNSTAT: <SMS_Tx>,<SMS_Rx>,<Data_Tx>,<Data_Rx>,<Packet_max>,<Packet_average>\n```\n\nThe read command parameters and their defined values are the following:\n\n - &lt;SMS_Tx&gt;\n   - Indicate the total number of SMSs successfully transmitted during the collection period\n - &lt;SMS_Rx&gt;\n   - Indicate the total number of SMSs successfully received during the collection period\n - &lt;Data_Tx&gt;\n   - Indicate the total amount of data (in kilobytes) transmitted during the collection period\n - &lt;Data_Rx&gt;\n   - Indicate the total amount of data (in kilobytes) received during the collection period\n - &lt;Packet_max&gt;\n   - The maximum packet size (in bytes) used during the collection period\n - &lt;Packet_average&gt;\n   - The average packet size (in bytes) used during the collection period\n\n\nThe following command example makes the application read the connectivity statistics:\n\n```\nAT%XCONNSTAT? %XCONNSTAT=2,3,45,60,708,650 OK\n```\n\n"
      },
      "set": {
        "title": "Set command",
        "shortDesc": "The set command provides information on the application use case to modem. The purpose of this command is to control the power-saving parameters of the modem.  ",
        "ref": "Levels 4 and 3 are meant for devices that can prioritize the time spent on finding service over power consumption. Battery-operated devices should use levels 2, 1, or 0. In         the current software release, the power-saving level has an effect on Universal Integrated Circuit Card (UICC) deactivation and network search frequencies. The command configuration is stored to Non-volatile Memory (NVM) approximately every 48 hours and when the modem is powered off with the `+CFUN=0` command.Active `%XPOFWARN` warning blocks the storing to NVM.The power saving level has an effect on the shutdown of the UICC during Extended Discontinuous Reception (eDRX) cycles. On power level 0, the modem deactivates the UICC if the eDRX period is longer than 60 seconds and         UICC deactivation is allowed through EF-AD under USIM ADF. The modem activates the UICC and         performs the necessary checks before setting up any signaling or data connections with the         network. Otherwise, the UICC is not activated because of modem functionality.On power levels 1–4, the modem deactivates the UICC if the eDRX cycles are longer than 5 minutes. The         UICC is activated before any signaling or data connections are set up with the network and         when waking up from eDRX. This means that the UICC is deactivated and activated at every         eDRX cycle.An application accessing data on USIM or UICC through the AT command interface might lead to UICC activation if the UICC has been shut down to save         power.\n\n> *Note:*\n> Consider UICC NVM wear when setting power saving levels.\n\nSyntax:\n\n```\n%XDATAPRFL=<power_level>\n```\n\nThe set command parameter and its defined values are the following:\n\n - &lt;power_level&gt;\n   - 0 – Ultra-low power\n   - 1 – Low power\n   - 2 – Normal\n   - 3 – Performance\n   - 4 – High performance\n\n\nThe modem uses specific periodic search patterns for each power level. For details, see [](../nw_service/periodicsearchconf.dita#periodicsearchconf).The following command example sets a low power       level:\n\n```\nAT%XDATAPRFL=1 OK\n```\n\n"
      }
    }
  },
  "xcountrydata": {
    "title": "Country-specific search optimization %XCOUNTRYDATA",
    "shortDesc": "The Nordic-proprietary `%XCOUNTRYDATA` command can be used to configure country-specific search parameters. The list contains access technology, band, and       E-UTRA Absolute Radio Frequency Channel Number (EARFCN) to be used. The maximum number of countries is 70. ",
    "versions": ["v1.3.x"],
    "subCommands": {
      "set": {
        "title": "Set command",
        "shortDesc": "The set command sets country-specific data. The command configuration is stored to Non-volatile Memory (NVM) approximately every 48 hours and when the modem is powered off with the `+CFUN=0` command.",
        "ref": "Active `%XPOFWARN` warning blocks the storing to NVM.Syntax:\n\n```\n%XCOUNTRYDATA= <oper>,[<country_1>][,country_2>]…|,country_70]\n```\n\nwhere `<country_x>` contains `<act>`,`<mcc>`,`<band>`,`<earfcn>`[,band_2,earfcn_2]..[,band_5,earfcn_5].\n\n - +CME ERROR code\n   - \n\n\nThe set command parameters and their defined values are the following:\n\n - &lt;oper&gt;\n   - 0 – Delete stored country data\n   - 1 – Store country data\n - &lt;act&gt;\n   - 4 – Evolved Terrestrial Radio Access Network (E-UTRAN) (WB-S1 mode)\n   - 5 – E-UTRAN (NB-S1 mode)\n - &lt;mcc&gt;\n   - Integer. Mobile Country Code (MCC)s defined by ITU-T.\n - &lt;band&gt;\n   - Integer, 1–71. See *3GPP 36.101*.\n - &lt;earfcn&gt;\n   - Integer. E-UTRA Absolute Radio Frequency Channel Number (EARFCN) as defined in *3GPP TS 36.101*.\n   - 0 – EARFCN not specified\n\n\nThe following command example writes two country elements. In the first country element, `<act>` is LTE-M, `<mcc>` is 244, `<band>` is 3, and `<earfcn>` is 1207. In the second country element, `<act>` is Narrowband Internet of Things (NB-IoT), `<mcc>` is 212, `<band>` is 20, and `<earfcn>` is 6150, `<band>` is 13, without specific         `<earfcn>`:\n\n```\nAT%XCOUNTRYDATA=1,”4,244,3,1207”, “5,242,20,6175,13,0” OK \n```\n\nThe following command example deletes existing country data from the       modem:\n\n```\nAT%XCOUNTRYDATA=0 OK\n```\n\n"
      },
      "read": {
        "title": "Read command",
        "shortDesc": "The read command reads a list of countries that contains access technology, band, and E-UTRA Absolute Radio Frequency Channel Number (EARFCN).",
        "ref": "Syntax:\n\n```\n%XCOUNTRYDATA: [<country_1>][,country_2>]…|,country_70] OK\n```\n\nThe following command example reads the country data:\n\n```\nAT%XCOUNTRYDATA? %XCOUNTRYDATA: ”4,244,3,1207”, “5,242,20,6175,13,5180”\n```\n\n"
      }
    }
  },
  "xconnstat": {
    "title": "Connectivity statistics %XCONNSTAT",
    "shortDesc": "The Nordic-proprietary `%XCONNSTAT` command starts and stops the collecting of connectivity    statistics.",
    "versions": ["v1.0.x", "v1.1.x", "v1.2.x", "v1.3.x"],
    "subCommands": {
      "set": {
        "title": "Set command",
        "shortDesc": "The set command starts and stops the collecting of connectivity statistics.",
        "ref": "Syntax:\n\n```\n%XCONNSTAT=<command>\n```\n\nThe set command parameter and its defined values are the following:\n\n - &lt;command&gt;\n   - 0 – Stop\n   - 1 – Start\n\n\nThe following command example makes the application start and stop connectivity statistics:\n\n```\nAT%XCONNSTAT=1 OK AT%XCONNSTAT=0 OK\n```\n\n"
      }
    }
  },
  "xcband": {
    "title": "Current band %XCBAND",
    "shortDesc": "The Nordic-proprietary `%XCBAND` command returns the current Evolved Universal Terrestrial Radio Access (E-UTRA) band.",
    "versions": ["v1.0.x", "v1.1.x", "v1.2.x", "v1.3.x"],
    "subCommands": {
      "test": {
        "title": "Test command",
        "shortDesc": "The test command returns a list of supported bands.",
        "ref": "\n\n> *Note:*\n> [`%XBANDLOCK`](xbandlock.dita#xbandlock) usage has an impact on the list of supported bands.\n\nResponse syntax:\n\n```\n%XCBAND: (list of supported bands <band>) \n```\n\nThe following command example returns a list of supported bands:\n\n```\nAT%XCBAND=? %XCBAND: (1,2,3,4,12,13) OK\n```\n\n"
      },
      "set": {
        "title": "Set command",
        "shortDesc": "The set command reads the current band. The command issues a valid response only when the modem is activated.",
        "ref": "Syntax:\n\n```\n%XCBAND\n```\n\nResponse syntax:\n\n```\n%XCBAND: <band>\n```\n\nThe set command parameter and its defined values are the following:\n\n - &lt;band&gt;\n   - Integer, 1–71. See *3GPP 36.101*.\n   - 0 when current band information not available\n\n\nThe following command example reads the current band: \n\n```\nAT%XCBAND %XCBAND: 13 OK\n```\n\n"
      }
    }
  },
  "xbandlock": {
    "title": "Band lock %XBANDLOCK",
    "shortDesc": "The Nordic-proprietary `%XBANDLOCK` command sets locked bands.",
    "versions": ["v1.0.x", "v1.1.x", "v1.2.x", "v1.3.x"],
    "subCommands": {
      "set": {
        "title": "Set command",
        "shortDesc": "The set command sets locked bands and bitmasks to limit supported bands.",
        "ref": "Supported bands are masked with permanent and runtime masks. A logical `AND` operation is performed to `%XBANDLOCK` commands. If a permanent or runtime mask has been given, it is required that the second mask has at least one band in common with the first mask.         Otherwise, the command returns `ERROR`. The command returns `ERROR` at an attempt to disable all supported bands.Permanent mask is stored to Non-volatile Memory (NVM) approximately every 48 hours and when the modem is powered off with the `+CFUN=0` command.Active `%XPOFWARN` warning blocks the storing to NVM.\n\n> *Note:*\n> Set band lock before activating modem with [`+CFUN`](cfun.dita#cfun).\n\nSyntax: \n\n```\n%XBANDLOCK=<operation>[,<band_mask>]\n```\n\n\n\n - +CME ERROR code\n   - 518 – Not allowed in active state\n\n\nThe set command parameters and their defined values are the following:\n\n - &lt;operation&gt;\n   - 0 – Remove band locks\n   - 1 – Set permanent band mask\n   - 2 – Set runtime band mask\n\n\n\n\n - &lt;band_mask&gt;\n   - String. Bit string where LSB is band 1. Leading zeros can be omitted. Maximum length 88 characters.\n\n\nThe following command example sets permanent band 4 lock:\n\n```\nAT%XBANDLOCK=1,\"1000\" OK\n```\n\nThe following command example sets runtime band 4 and 13 lock:\n\n```\nAT%XBANDLOCK=2,\"1000000001000\" OK\n```\n\n"
      },
      "read": {
        "title": "Read command",
        "shortDesc": "The read command reads locked bands. ",
        "ref": "Response syntax: \n\n```\n%XBANDLOCK: <permanent_lock>,<run-time_lock>\n```\n\nThe read response parameter and its defined value are the following:\n\n - &lt;permanent_lock&gt;,&lt;run-time_lock&gt;\n   - Bit string, 88 bits.\n\n\nAn empty string is returned if bandlock is not set.The following command example reads the locked bands. No permanent lock, runtime lock for bands 13, 4, and 1:\n\n```\nAT%XBANDLOCK? %XBANDLOCK: \"\",\"0000000000000000000000000000000000000000000000000000000000000000000000000001000000001001\" OK\n```\n\n"
      }
    }
  },
  "vzwscanparams": {
    "title": "Configure scanning parameters in dual mode devices +VZWSCANPARAMS",
    "shortDesc": "The `+VZWSCANPARAMS` command configures scanning parameters in dual mode devices.",
    "versions": ["v1.3.x"],
    "subCommands": {
      "test": {
        "title": "Test command",
        "shortDesc": "The test command lists the range of scanning parameters.",
        "ref": "Syntax:\n\n```\n+VZWSCANPARAMS=?\n```\n\nResponse syntax:\n\n```\n+VZWSCANPARAMS: (range of <scan_interval>)\n```\n\nThe test command parameter and its defined value are the following:\n\n - \n   - \n\n\nThe following command example lists the range of the scanning interval:\n\n```\nAT+VZWSCANPARAMS=? +VZWSCANPARAMS: (15-14400) OK\n```\n\n"
      },
      "set": {
        "title": "Set command",
        "shortDesc": "The set command configures scanning parameters in dual mode devices.",
        "ref": "Syntax:\n\n```\n+VZWSCANPARAMS=<scan_interval>\n```\n\nThe set command parameter and its defined value are the following:\n\n - &lt;scan_interval&gt;\n   - Integer, 15–14400.\n   - The `<scan_interval>` parameter defines the period of time in minutes that the device waits before scanning the most preferred network               (LTE-M home or Narrowband Internet of Things (NB-IoT) home) when the device is on its second preferred network (HPLMN or EHPLMN).\n   - Default value for `<scan_interval>` is 120 minutes.\n\n\nThe following command example sets the scanning interval to 180 minutes:\n\n```\nAT+VZWSCANPARAMS=180 OK\n```\n\n"
      },
      "read": {
        "title": "Read command",
        "shortDesc": "The read command reads scanning parameters.",
        "ref": "Syntax:\n\n```\n+VZWSCANPARAMS?\n```\n\nResponse syntax:\n\n```\n+VZWSCANPARAMS: <scan_interval>\n```\n\nThe read response parameter and its defined value are the following:\n\n - \n   - \n\n\nThe following command example reads the scanning interval in minutes:\n\n```\nAT+VZWSCANPARAMS? +VZWSCANPARAMS: 240 OK\n```\n\n"
      }
    }
  },
  "vzwapne": {
    "title": " VzW APN table +VZWAPNE",
    "shortDesc": "The `+VZWAPNE` command writes APN table.",
    "versions": ["v1.3.x"],
    "subCommands": {
      "set": {
        "title": "Set command",
        "shortDesc": "The set command writes APN table.",
        "ref": "Syntax:\n\n```\n+VZWAPNE=<wapn>,<apncl>,<apnni>,<apntype>,<apnb>,<apned>\n```\n\nThe set command parameters and their defined values are the following:\n\n - &lt;wapn&gt;\n   - Integer. Table entry number.\n   - 0 – Take no action\n\n> *Note:*\n> Index value for first read response line is 1.\n\n\n - &lt;apncl&gt;\n   - Integer. APN class.\n   - 3 – Class 3\n\n> *Note:*\n> Only class 3 modification is allowed with write command.\n\n\n - &lt;apnni&gt;\n   - String. Network identifier.\n - &lt;apntype&gt;\n   - String. APN type.\n   - IPv6 – IPv6 type\n   - IPv4v6 – IPv4 and IPv6 type\n - &lt;apnb&gt;\n   - String. APN bearer.\n   - LTE – LTE bearer used\n - &lt;apned&gt;\n   - String. Enable or disable APN.\n   - Enabled – APN is enabled\n   - Disabled – APN is disabled\n\n\nThe following command example \n\n```\n\n```\n\n"
      },
      "read": {
        "title": "Read command",
        "shortDesc": "The read command queries APN table.",
        "ref": "Response syntax:\n\n```\n+VZWAPNE: <apncl>1,<apnni>1,<apntype>1,<apnb>1,<apned>1 +VZWAPNE: <apncl>2,<apnni>2,<apntype>2,<apnb>2,<apned>2 +VZWAPNE: <apncl>n,<apnni>n,<apntype>n,<apnb>n,<apned>n\n```\n\nThe read response parameters and their defined values are the following:\n\n - &lt;apncl&gt;\n   - Integer. APN Class.\n   - 2 – Class 2\n   - 3 – Class 3\n   - 4 – Class 4\n   - 5 – Class 5\n   - 6 – Class 6\n   - 7 – Class 7\n - \n   - \n - \n   - \n - \n   - \n - \n   - \n\n\nThe following command example\n\n```\n\n```\n\n"
      }
    }
  },
  "vzmtcrat": {
    "title": "Read IoT RAT mode +VZMTCRAT",
    "shortDesc": "The `+VZMTCRAT` command reads IoT RAT mode.",
    "versions": ["v1.3.x"],
    "subCommands": {
      "test": {
        "title": "Test command",
        "shortDesc": "The test command lists supported IoT RAT mode values.",
        "ref": "Syntax:\n\n```\n+VZMTCRAT=?\n```\n\nResponse syntax:\n\n```\n+VZMTCRAT: (list of supported <current_rat>),(list of supported <roaming_state>),(list of supported <scanning_rat>)\n```\n\nThe following command example lists supported IoT RAT mode values:\n\n```\nAT+VZMTCRAT=? +VZMTCRAT: (0-2),(0-2),(0-2) OK\n```\n\n"
      },
      "set": {
        "title": "Set command",
        "shortDesc": "The set command reads IoT RAT mode.",
        "ref": "Syntax:\n\n```\n+VZMTCRAT\n```\n\nResponse syntax:\n\n```\n+VZMTCRAT: <current_rat>,<roaming_state>,<scanning_rat>\n```\n\nThe set command parameters and their defined values are the following:\n\n - &lt;current_rat&gt;\n   - Integer. Numeric parameter which indicates the current radio access technology selected by User Equipment (UE).\n   - 0 – None (no RAT attached or selected)\n   - 1 – Narrowband Internet of Things (NB-IoT)\n   - 2 – LTE-M\n - &lt;roaming_state&gt;\n   - Integer. Numeric parameter which indicates the current roaming state of UE.\n   - 0 – No Public Land Mobile Network (PLMN) selected\n   - 1 – Home PLMN\n   - 2 – Roaming PLMN (VPLMN)\n - &lt;scanning_rat&gt;\n   - Integer. Numeric parameter which indicates the current scanning (searching) RAT type.\n   - 0 – Not currently searching (scanning) a new RAT\n   - 1 – Currently searching (scanning) NB-IoT RAT\n   - 2 – Currently searching (scanning) LTE-M RAT\n\n\nThe following command example reads IoT RAT mode:\n\n```\nAT+VZMTCRAT +VZMTCRAT: 2,1,0 OK\n```\n\n"
      }
    }
  },
  "proc_cesq": {
    "title": "Signal quality notification %CESQ",
    "shortDesc": "The Nordic-proprietary `%CESQ` command subscribes notifications of changes in signal    quality.",
    "versions": ["v1.0.x", "v1.1.x", "v1.2.x", "v1.3.x"],
    "subCommands": {
      "set": {
        "title": "Set command",
        "shortDesc": "The set command subscribes notifications of changes in signal quality.",
        "ref": "Syntax:\n\n```\n%CESQ=<n>\n```\n\nNotification syntax:\n\n```\n%CESQ: <rsrp>,<rsrp_threshold_index>,<rsrq>,<rsrq_treshold_index>\n```\n\nThe set command parameters and their defined values are the following:\n\n - &lt;n&gt;\n   - 0 – Unsubscribe signal quality notifications\n   - 1 – Subscribe signal quality notifications\n - \n   - \n - &lt;rsrp_threshold_index&gt; \n   - Index of Certificate Authority (CA) threshold which is below measured RSRP value.\n   - 0 – RSRP is below the first threshold. 0–20 (–140 dBm to –121 dBm).\n   - 1 – RSRP is between the first and second threshold. 20–39 (–120 dBm to –101 dBm).\n   - 2 – RSPR is between the second and third threshold. 40–59 (–100 dBm to –81 dBm).\n   - 3 – RSRP is between the third and fourth threshold. 60–79 (–80 dBm to –61 dBm).\n   - 4 – RSRP is above the fourth threshold. 80–97 (–60 dBm to –44 dBm).\n   - 255 – Unknown.\n   - With default thresholds 20, 40, 60, and 80, the measured value 70 leads to index 3.\n - \n   - \n - &lt;rsrq_threshold_index&gt;\n   - Index of RSRQ threshold which is below the measured RSRQ value.\n   - 0 – RSRQ is below the first threshold. 0–7 (–19.5 dB to –16.5 dB).\n   - 1 – RSRQ is between the first and second threshold. 7–13 (–16 dB to –13 dB).\n   - 2 – RSRQ is between the second and third threshold. 14–20 (–12.5 dB to –9.5 dB).\n   - 3 – RSRQ is between the third and fourth threshold. 21–27 (–9 dB to –6 dB).\n   - 4 – RSRQ is above the fourth threshold. 28–34 (–5.5 dB to –3 dB).\n   - 255 – Unknown\n   - With the default thresholds 7, 14, 21, and 28, the measured value 17 leads to index 2.\n\n\nThe following command example subscribes Evolved Universal Terrestrial Radio Access (E-UTRA) signal quality notifications:\n\n```\nAT%CESQ=1 OK\n```\n\nThe following notification example indicates a change in the measured average RSRP. The average RSRP is 62 and mapped to threshold 3, the measured RSRQ average has been 12 and         mapped to threshold index 1.\n\n```\n%CESQ: 62,3,12,1\n```\n\n"
      }
    }
  },
  "ncellmeasstop": {
    "title": "Stop neighboring cell measurement %NCELLMEASSTOP",
    "shortDesc": "The Nordic-proprietary `%NCELLMEASSTOP` command stops neighboring cell measurement.",
    "versions": ["v1.3.x"],
    "subCommands": {
      "set": {
        "title": "Set command",
        "shortDesc": "The set command stops neighboring cell measurement if measuring has started, and causes the modem to send a response to the `%NCELLMEAS` command.",
        "ref": "If the modem has already received the measurement results, the [`%NCELLMEAS`](ncellmeas.dita#ncellmeas) response contains the normal response parameters. If the measurement is still ongoing and can be stopped, the         response does not contain any measurement results.After the `%NCELLMEAS` response, `OK` is sent as a response to stop the command.If the measuring has not started, the response is `OK`.Syntax:\n\n```\n%NCELLMEASSTOP\n```\n\nThe following command example starts neighboring cell measurement and stops the measuring successfully:\n\n```\nAT%NCELLMEAS OK AT%NCELLMEASSTOP %NCELLMEAS: 1 OK \n```\n\nThe following command example starts neighboring cell measurement and tries to stop the measurement, but the measurement has been done before the stop command is given. The         response can contain, for example, the serving cell and two neighboring cells:\n\n```\nAT%NCELLMEAS OK AT%NCELLMEASSTOP %NCELLMEAS:0,\"00011B07\",\"26295\",\"00B7\",2300,7,63,31,2300,8,60,29,0,2400,11,55,26,0 OK \n```\n\nThe following command example stops neighboring cell measurement when the neighboring cell measurement command `%NCELLMEAS` has been given but the modem has not started the measurement due to other prioritized activities:\n\n```\nAT%NCELLMEAS OK AT%NCELLMEASSTOP OK\n```\n\n"
      }
    }
  },
  "ncellmeas": {
    "title": "Neighboring cell measurement and notification %NCELLMEAS",
    "shortDesc": "The Nordic-proprietary `%NCELLMEAS` command starts cell search and measurements and reports the channel parameters with a result notification when the measurements     are finished. The results can be used, for example, in cellular-based positioning       services.",
    "versions": ["v1.3.x"],
    "subCommands": {
      "set": {
        "title": "Set command",
        "shortDesc": "The set command starts neighboring cell measurements and reports the channel parameters.",
        "ref": "Syntax:\n\n```\n%NCELLMEAS[=<search_type>]\n```\n\nNotification syntax for `<search_type>` 0–2:\n\n```\n%NCELLMEAS: <status> [,<cell_id>,<plmn>,<tac>,<timing_advance>,<earfcn>,<phys_cell_id>,<rsrp>,<rsrq>, <measurement_time>,] [,<n_earfcn>1,<n_phys_cell_id>1,<n_rsrp>1,<n_rsrq>1,<time_diff>1] [,<n_earfcn>2,<n_phys_cell_id>2,<n_rsrp>2,<n_rsrq>2,<time_diff>2]  ...  [,<n_earfcn>17,<n_phys_cell_id>17,<n_rsrp>17,<n_rsrq>17,<time_diff>17] [,<timing_advance_measurement_time>]\n```\n\nNotification syntax for `<search_type>` 3–5:\n\n```\n%NCELLMEAS: <status> [,<cell_id>,<plmn>,<tac>,<timing_advance>,<timing_advance_measurement_time>,<earfcn>, <phys_cell_id>,<rsrp>,<rsrq>,<measurement_time>,<serving>,<neighbor_count> [,<n_earfcn>1,<n_phys_cell_id>1,<n_rsrp>1,<n_rsrq>1,<time_diff>1] [,<n_earfcn>2,<n_phys_cell_id>2,<n_rsrp>2,<n_rsrq>2,<time_diff>2]...], [<cell_id>,<plmn>,<tac>,<timing_advance>,<timing_advance_measurement_time>,<earfcn>, <phys_cell_id>,<rsrp>,<rsrq>,<measurement_time>,<serving>,<neighbor_count> [,<n_earfcn>1,<n_phys_cell_id>1,<n_rsrp>1,<n_rsrq>1,<time_diff>1] [,<n_earfcn>2,<n_phys_cell_id>2,<n_rsrp>2,<n_rsrq>2,<time_diff>2]...]...\n```\n\n\n\n> *Note:*\n>  The optional part is included in the response only when `<status>` is 0 (measurement successful).\n\nThe result notification for `<search_type>`s 3–5 contains cell ID, Public Land Mobile Network (PLMN), and Type Allocation Code (TAC) for up to `<gci_count>` cells, and optionally a list of neighboring cell measurement results related to each cell. The `<neighbor_count>` indicates how many neighboring cells are present after each         cell.For `<search_type>`s 3–5, `<neighbor_count>` is always `0` for other cells except the serving cell, which means that the neighboring cell list is not available. If neighbor cell results for the serving cell are         available when the User Equipment (UE) is in RRC Idle mode, they are preserved for 10 s after entering RRC Connected mode unless they are overwritten by RRC Connected mode         measurements. If there are no preserved RRC Idle mode measurements in RRC connected mode,         neighbor cell results are available only if the network has configured neighbor measurements         for the UE. Valid Terminal Adapter (TA) information is available only for the serving cell. These parameters are included for all cells in the result format to keep the         same structure for every cell to simplify response parsing.If there is currently a serving cell, it is indicated by `<serving>` parameter value `1` and listed as the first cell in the result notification.\n\n - +CME ERROR code\n   - 517 – Modem not activated.\n\n\nThe notification parameters and their defined values are the following:\n\n - &lt;search_type&gt;\n   - 0 – Modem searches RPLMN based on previous cell history.\n   - 1 – Modem starts with the same search method as in `<search_type>` 0.\n   - If a suitable cell is not found, the modem performs a light search where it continues the search by measuring the radio conditions and makes assumptions on where networks             might be deployed. If RPLMN is not found based on previous cell history, the modem             accepts any found PLMN.\n   - 2 – Modem uses otherwise the same search method as in `<search_type>` 1, except that it performs a complete search for all supported bands.\n   - 3 – GCI search. Modem searches E-UTRA Absolute Radio Frequency Channel Number (EARFCN)s based on previous cell history.\n   - 4 – GCI search. Modem starts with the same search method as in `<search_type>` 3. If less than `<gci_count>` cells are found, modem performs light search on bands that are valid for the area of the current ITU-T               region.\n   - 5 – GCI search. Modem starts with the same search method as in `<search_type>` 3. If less than `<gci_count>` cells are found, modem performs complete search on all supported bands.\n   - The modem uses the `<search_type>` parameter only when cell search is required to complete the requested measurement.\n   - \n\n> *Note:*\n> Supported bands might be limited by band lock.\n\n\n - &lt;gci_count&gt;\n   - Integer.\n   - Maximum number of cells to be searched. Mandatory for GCI search types 3–5. Ignored with search types 0–2.\n   - Range 2––15.\n - &lt;status&gt;\n   - 0 – Measurement successful\n   - 1 – Measurement failed, no cell available\n - &lt;cell_id&gt;\n   - String in hexadecimal format. The cell ID the UE is camped on. 4-byte Evolved Terrestrial Radio Access Network (E-UTRAN) cell ID.\n - &lt;plmn&gt;\n   - String. Mobile Country Code (MCC) and Mobile Network Code (MNC) values.\n - &lt;tac&gt;\n   - String in hexadecimal format. 2-byte Tracking Area Code (TAC).\n - &lt;timing_advance&gt;\n   - Integer. Timing advance value (Ts). Time units as specified in *3GPP TS 36.211*.\n   - 0–20512 – When timing advance is valid\n   - 65535 – When timing advance is not valid\n   - \n\n> *Note:*\n> Timing advance might be reported from past measurements. The client application is responsible for checking the `<timing_advance_measurement_time>` parameter and the serving cell&apos;s `<measurement_time>` parameter for the difference between the measurement times.\n\n\n - &lt;earfcn&gt;\n   - Integer. EARFCN of the cell where the EARFCN is as defined in *3GPP TS 36.101*.\n - &lt;measurement_time&gt;\n   - Measurement time of the cell in ms calculated from modem boot time.\n   - Range 0–18 446 744 073 709 551 614 ms.\n - &lt;n_earfcn&gt;\n   - Integer. E-UTRA Absolute Radio Frequency Channel Number (EARFCN) of the neighboring cell where the EARFCN is as defined in *3GPP TS 36.101*.\n - &lt;phys_cell_id&gt;\n   - Integer. Physical cell ID of the cell.\n - &lt;n_phys_cell_id&gt;\n   - Integer. Physical cell ID of the neighboring cell.\n - &lt;rsrp&gt;\n   - Certificate Authority (CA) of the cell.\n   - –17 – When RSRP &lt; –156 dBm\n   - –16 – When –156 ≤ RSRP &lt; –155 dBm\n   - … … …\n   - –3 – When –143 ≤ RSRP &lt; –142 dBm\n   - –2 – When –142 ≤ RSRP &lt; –141 dBm\n   - –1 – When –141 ≤ RSRP &lt; –140 dBm\n   - 0 – When RSRP &lt; –140 dBm\n   - 1 – When –140 ≤ RSRP &lt; –139 dBm\n   - 2 – When –139 ≤ RSRP &lt; –138 dBm\n   - … … …\n   - 95 – When –46 ≤ RSRP &lt; –45 dBm\n   - 96 – When –45 ≤ RSRP &lt; –44 dBm\n   - 97 – When –44 ≤ RSRP dBm\n   - 255 – Not known or not detectable\n   - The index value of RSRP can be converted to decibel with the following formula: Index – 140 = dBm. For example, 95 – 140 = –45 dBm and –16 – 140 =             –156 dBm.\n - &lt;n_rsrp&gt;\n   - RSRP of the neighboring cell.\n   - –17 – When RSRP &lt; –156 dBm\n   - –16 – When –156 ≤ RSRP &lt; –155 dBm\n   - … … …\n   - –3 – When –143 ≤ RSRP &lt; –142 dBm\n   - –2 – When –142 ≤ RSRP &lt; –141 dBm\n   - –1 – When –141 ≤ RSRP &lt; –140 dBm\n   - 0 – When RSRP &lt; –140 dBm\n   - 1 – When –140 ≤ RSRP &lt; –139 dBm\n   - 2 – When –139 ≤ RSRP &lt; –138 dBm\n   - … … …\n   - 95 – When –46 ≤ RSRP &lt; –45 dBm\n   - 96 – When –45 ≤ RSRP &lt; –44 dBm\n   - 97 – When –44 ≤ RSRP dBm\n   - 255 – Not known or not detectable\n - &lt;rsrq&gt;\n   - RSRQ of the cell.\n   - –30 – When RSRQ &lt; –34 dB\n   - –29 – When –34 ≤ RSRQ &lt; –33.5 dB\n   - … … …\n   - –2 – When –20.5 ≤ RSRQ &lt; –20 dB\n   - –1 – When –20 ≤ RSRQ &lt; –19.5 dB\n   - 0 – When RSRQ &lt; –19.5 dB\n   - 1 – When –19.5 ≤ RSRQ &lt; –19 dB\n   - 2 – When –19 ≤ RSRQ &lt; –18.5 dB\n   - … … …\n   - 32 – When –4 ≤ RSRQ &lt; –3.5 dB\n   - 33 – When –3.5 ≤ RSRQ &lt; –3 dB\n   - 34 – When –3 ≤ RSRQ dB\n   - 35 – When –3 ≤ RSRQ &lt; –2.5 dB\n   - 36 – When –2.5 ≤ RSRQ &lt; –2 dB\n   - … … …\n   - 45 – When 2 ≤ RSRQ &lt; 2.5 dB\n   - 46 – When 2.5 ≤ RSRQ dB\n   - 255 – Not known or not detectable\n   - The index value of RSRQ can be converted to decibel with the following formula: Index x ½ – 19,5 = dB. For example, (32 x ½) – 19,5 = –4 dB and (–29             x ½) – 19,5 = –34 dB.\n - &lt;n_rsrq&gt;\n   - RSRQ of the neighboring cell.\n   - –30 – When RSRQ &lt; –34 dB\n   - –29 – When –34 ≤ RSRQ &lt; –33.5 dB\n   - … … …\n   - –2 – When –20.5 ≤ RSRQ &lt; –20 dB\n   - –1 – When –20 ≤ RSRQ &lt; –19.5 dB\n   - 0 – When RSRQ &lt; –19.5 dB\n   - 1 – When –19.5 ≤ RSRQ &lt; –19 dB\n   - 2 – When –19 ≤ RSRQ &lt; –18.5 dB\n   - … … …\n   - 32 – When –4 ≤ RSRQ &lt; –3.5 dB\n   - 33 – When –3.5 ≤ RSRQ &lt; –3 dB\n   - 34 – When –3 ≤ RSRQ dB\n   - 35 – When –3 ≤ RSRQ &lt; –2.5 dB\n   - 36 – When –2.5 ≤ RSRQ &lt; –2 dB\n   - … … …\n   - 45 – When 2 ≤ RSRQ &lt; 2.5 dB\n   - 46 – When 2.5 ≤ RSRQ dB\n   - 255 – Not known or not detectable\n - &lt;time_diff&gt;\n   - Difference in ms between the latest performed serving cell measurement and neighboring cell measurement.\n   - –99999 ms &lt; time_diff &lt; 99999 ms\n   - 0 – Value not valid\n - &lt;timing_advance_measurement_time&gt;\n   - 0 – 18 446 744 073 709 551 614 ms\n   - Measurement time of timing advance in milliseconds calculated from modem boot time.\n - &lt;serving&gt;\n   - 0 – Current cell is not serving cell\n   - 1 – Current cell is serving cell\n - &lt;neighbor_count&gt;\n   - Integer. Number of neighboring cell results after current cell. Can be 0.\n\n\nThe following command example starts neighboring cell measurement with default `<search_type>` 0:\n\n```\nAT%NCELLMEAS OK \n```\n\nThe following notification example indicates a finished measurement. The result contains the serving cell and two neighboring cells:\n\n```\n%NCELLMEAS: 0,\"00011B07\",\"26295\",\"00B7\",10512,2300,7,63,31,150344527, 2300,8,60,29,0,2400,11,55,26,184,9034\n```\n\nThe following command example starts a GCI search based on cell history with `<search_type> `3 searching two cells:\n\n```\nAT%NCELLMEAS=3,2 OK \n```\n\nThe following notification example indicates that the UE is in connected mode. The result notification contains serving cell with GCI information and measurement results of four         neighboring cells:\n\n```\n%NCELLMEAS: 0,\"00011B07\",\"26295\",\"00B7\",10512,9034,2300,7,63,31,150344527,1,4,2300, 8,60,29,92,2300,9,59,28,100,2400,10,56,27,162,2400,11,55,26,184\n```\n\nThe following notification example indicates that the UE is in idle mode. The result notification contains two cells with GCI information and no neighboring cell measurement           results:\n\n```\n%NCELLMEAS: 0,\"00011B07\",\"26295\",\"00B7\",10512,9034,2300,7,63,31,150344527, 1,0,\"00011B08\",\"26295\",\"00B7\",65535,0,2300,9,62,30,150345527,0,0\n```\n\n"
      }
    }
  },
  "nbrgrsrp": {
    "title": "Neighboring cells %NBRGRSRP",
    "shortDesc": "The Nordic-proprietary `%NBRGRSRP` command reads measured Certificate Authority (CA) values of neighboring cells. The command issues a valid response only when the modem is       activated.",
    "versions": ["v1.0.x", "v1.1.x", "v1.2.x", "v1.3.x"],
    "subCommands": {
      "set": {
        "title": "Set command",
        "shortDesc": "The set command reads measured Certificate Authority (CA) values of neighboring cells.",
        "ref": "Syntax:\n\n```\n%NBRGRSRP\n```\n\nResponse syntax:\n\n```\n%NBRGRSRP: <phys_cellID>1,<EARFCN>1,<RSRP>1,<phys_cellID>2, <EARFCN>2,<RSRP>2,<phys_cellID>n, <EARFCN>n,<RSRP>n\n```\n\nThe set command parameters and their defined values are the following:\n\n - &lt;phys_cellID&gt;\n   - Integer. Physical cell ID.\n - &lt;EARFCN&gt;\n   - Integer. E-UTRA Absolute Radio Frequency Channel Number (EARFCN) for a given cell where EARFCN is according to *3GPP TS 36.101*.\n\n\n\n\n - \n   - \n\n\n"
      }
    }
  },
  "concept_dlm_kch_mbb": {
    "title": "Mobile termination control and status commands",
    "shortDesc": "Mobile termination control and status commands are used for mobile-terminated power and indicator handling. Commands are listed for accessing Subscriber Identity Module (SIM)/Universal Integrated Circuit Card (UICC) database records. ",
    "versions": [],
    "subCommands": {}
  },
  "mdmev": {
    "title": "Modem domain event notification %MDMEV",
    "shortDesc": "The Nordic-proprietary `%MDMEV` command subscribes modem domain event notifications.",
    "versions": ["v1.3.x"],
    "subCommands": {
      "set": {
        "title": "Set command",
        "shortDesc": "The set command subscribes modem domain event notifications. The unsolicited result code is `%MDMEV: XXX`.",
        "ref": "Syntax:\n\n```\n%MDMEV=<n>\n```\n\nThe set command parameter and its defined values are the following:\n\n - &lt;n&gt;\n   - 0 – Unsubscribe modem domain event notifications\n   - 1 – Subscribe modem domain events notifications\n\n\nThe unsolicited notification syntax descriptions are as follows:Mobile Equipment (ME) is overheated and therefore modem is deactivated:\n\n```\n%MDMEV: ME OVERHEATED\n```\n\nBattery voltage is low and therefore modem is deactivated:\n\n```\n%MDMEV: ME BATTERY LOW\n```\n\nModem indicates status of ongoing light search:\n\n```\n%MDMEV: SEARCH STATUS 1\n```\n\n`SEARCH STATUS 1` indicates light search performed. This event gives the application a chance to stop the modem from using more power on searching networks         from possibly weaker radio condition. Before sending this event, the modem searches the         cells based on previous cell history, measures the radio conditions, and makes assumptions         on where networks might be deployed. This event means that the modem has not found a network         that it could select based on the 3GPP network selection rules from those locations. It does         not mean that there are no networks to be found in the area. The modem continues more         thorough searches automatically after sending this status. The modem can be deactivated, for         example, with `+CFUN=4`, to stop it from using more power on the search.Modem indicates completed status of search:\n\n```\n%MDMEV: SEARCH STATUS 2\n```\n\n`SEARCH STATUS 2` indicates search performed. The modem has found a network that it can select according to the 3GPP network selection rules or all         frequencies have been scanned and a suitable cell has not been found. In the latter case,         the modem enters normal limited service state functionality and performs scans for service         periodically.Modem has detected a reset loop:\n\n```\n%MDMEV: RESET LOOP\n```\n\n`RESET LOOP` indicates that the modem restricts Attach attempts for the next 30 minutes. The timer does not run when the modem has no power or while it         stays in the reset loop. The modem counts all the resets where the modem is not gracefully         deinitialized with `+CFUN=0`. If there are more than five resets, reset loop restriction is activated.If there are more than seven resets, reset loop restriction is activated.For more information on reset loop, see [](undefined).The following command example subscribes `%MDMEV` notifications:\n\n```\nAT%MDMEV=1 OK\n```\n\n"
      }
    }
  },
  "csq": {
    "title": "Signal quality +CSQ",
    "shortDesc": "The `+CSQ` command reads 2G and 3G signal quality.",
    "versions": ["v1.0.x", "v1.1.x", "v1.2.x", "v1.3.x"],
    "subCommands": {
      "test": {
        "title": "Test command",
        "shortDesc": "The test command lists supported signal quality values.",
        "ref": "Response syntax:\n\n```\n+CSQ: (list of supported <rssi>s,(list of supported <ber>s)\n```\n\nThe test command parameters and their defined value are the following:\n\n - \n   - \n\n\nThe following command example lists the supported signal quality values:\n\n```\nAT+CSQ=? +CSQ: (99),(99) OK\n```\n\n"
      },
      "set": {
        "title": "Set command",
        "shortDesc": "The set command is reads 2G and 3G signal quality. ",
        "ref": "Syntax:\n\n```\n+CSQ\n```\n\nResponse syntax:\n\n```\n+CSQ: <rssi>,<ber>\n```\n\n\n\n> *Note:*\n> Not detectable, RAT not supported. Use [`+CESQ`](cesq.dita#cesq) and [`%CESQ`](proc_cesq.dita#proc_cesq) for Evolved Universal Terrestrial Radio Access (E-UTRA) signal quality.\n\nThe set command parameters and their value are the following:\n\n - &lt;rssi&gt;, &lt;ber&gt;\n   - 99 – Not detectable\n\n\nThe following command example reads signal quality:\n\n```\nAT+CSQ +CSQ: 99,99 OK\n```\n\n"
      }
    }
  },
  "cpas": {
    "title": "Device activity status +CPAS",
    "shortDesc": "The `+CPAS` command returns the device activity status.",
    "versions": ["v1.0.x", "v1.1.x", "v1.2.x", "v1.3.x"],
    "subCommands": {
      "set": {
        "title": "Set command",
        "shortDesc": "The set command returns the device activity status.",
        "ref": "Syntax: \n\n```\n+CPAS\n```\n\nResponse syntax:\n\n```\n+CPAS: <pas>\n```\n\nThe set command parameter and its defined value are the following:\n\n - &lt;pas&gt;\n   - Activity status.\n   - 0 – Ready (Mobile Termination (MT) allows commands from Terminal Adapter (TA)/Terminal Equipment (TE))\n<!--  <pd>1 – Unavailable (MT does not allow commands from TA/TE)</pd>\n          <pd>2 – Unknown (MT is not guaranteed to respond to instructions)</pd>\n          <pd>5 – Asleep (MT is unable to process commands from TA/TE because it is in a low\n            functionality state)</pd> -->\n\nThe following command example checks the activity status:\n\n```\nAT+CPAS +CPAS: 0 OK\n```\n\n"
      }
    }
  },
  "coneval": {
    "title": "Evaluating connection parameters %CONEVAL",
    "shortDesc": "The Nordic-proprietary `%CONEVAL` command requests an evaluation of the LTE radio signal state and an estimation of the energy efficiency in a cell that the modem would   use for data transmission. The information can be used to determine the energy efficiency of data   transmission before actual data transmission is started. The `%CONEVAL` command is the most useful for a static or slow-moving device.",
    "versions": ["v1.3.x"],
    "subCommands": {
      "set": {
        "title": "Set command",
        "shortDesc": "The set command requests evaluation of connection parameters.",
        "ref": "Syntax:\n\n```\n%CONEVAL\n```\n\nResponse syntax:\n\n```\n%CONEVAL: <result>[,<rrc_state>,<energy_estimate>,<rsrp>,<rsrq>,<snr>,<cell_id>,<plmn>, <phyc_cell_id>,<earfcn>,<band>,<tau_triggered>,<ce_level>,<tx_power>,<tx_repetitions>, <rx_repetitions>,<dl-pathloss>]\n```\n\nThe response parameters and their defined values are the following:\n\n - &lt;result&gt;\n   - 0 – Connection pre-evaluation successful\n   - 1 – Evaluation failed, no cell available\n   - 2 – Evaluation failed, Universal Integrated Circuit Card (UICC) not available\n   - 3 – Evaluation failed, only barred cells available\n   - 4 – Evaluation failed, busy (for example, Global Navigation Satellite System (GNSS) activity)\n   - 5 – Evaluation failed, aborted because of higher priority operation\n   - 6 – Evaluation failed, not registered\n   - 7 – Evaluation failed, unspecified\n - &lt;rrc_state&gt;\n   - 0 – RRC connection in idle state during measurements\n   - 1 – RRC connection in connected state during measurements\n - &lt;energy_estimate&gt;\n   - Relative estimated energy consumption of data transmission compared to nominal consumption. A higher value means smaller energy consumption.\n   - 5 – Bad conditions. Difficulties in setting up connections. Maximum number of repetitions might be needed for data.\n   - 6 – Poor conditions. Setting up a connection might require retries and a higher number of repetitions for data.\n   - 7 – Normal conditions for cIoT device. No repetitions for data or only a few repetitions in the worst case.\n   - 8 – Good conditions. Possibly very good conditions for small amounts of data.\n   - 9 – Excellent conditions. Efficient data transfer estimated also for larger amounts of data.\n - &lt;rsrp&gt;\n   - Current Certificate Authority (CA) level at the time of the report \n   - –17 – When RSRP &lt; –156 dBm\n   - –16 – When –156 ≤ RSRP &lt; –155 dBm\n   - … … …\n   - –3 – When –143 ≤ RSRP &lt; –142 dBm\n   - –2 – When –142 ≤ RSRP &lt; –141 dBm\n   - –1 – When –141 ≤ RSRP &lt; –140 dBm\n   - 0 – When RSRP &lt; –140 dBm\n   - 1 – When –140 ≤ RSRP &lt; –139 dBm\n   - 2 – When –139 ≤ RSRP &lt; –138 dBm\n   - … … …\n   - 95 – When –46 ≤ RSRP &lt; –45 dBm\n   - 96 – When –45 ≤ RSRP &lt; –44 dBm\n   - 97 – When –44 ≤ RSRP dBm\n   - 255 – Not known or not detectable\n   - \n - &lt;rsrq&gt;\n   - Current Reference Signal Received Quality (RSRQ) level at the time of the report\n   - –30 – When RSRQ &lt; –34 dB\n   - –29 – When –34 ≤ RSRQ &lt; –33.5 dB\n   - … … …\n   - –2 – When –20.5 ≤ RSRQ &lt; –20 dB\n   - –1 – When –20 ≤ RSRQ &lt; –19.5 dB\n   - 0 – When RSRQ &lt; –19.5 dB\n   - 1 – When –19.5 ≤ RSRQ &lt; –19 dB\n   - 2 – When –19 ≤ RSRQ &lt; –18.5 dB\n   - … … …\n   - 32 – When –4 ≤ RSRQ &lt; –3.5 dB\n   - 33 – When –3.5 ≤ RSRQ &lt; –3 dB\n   - 34 – When –3 ≤ RSRQ dB\n   - 35 – When –3 ≤ RSRQ &lt; –2.5 dB\n   - 36 – When –2.5 ≤ RSRQ &lt; –2 dB\n   - … … …\n   - 45 – When 2 ≤ RSRQ &lt; 2.5 dB\n   - 46 – When 2.5 ≤ RSRQ dB\n   - 255 – Not known or not detectable\n   - \n - &lt;snr&gt;\n   - Current Signal-to-Noise Ratio (SNR) level at the time of the report \n   - 0 SNR &lt; -24 dB\n   - 1 – When –24 dB &lt;= SNR &lt; –23 dB\n   - 2 – When –23 dB &lt;= SNR &lt; –22 dB\n   - : : : :\n   - snr\n   - 47 – When 22 dB &lt;= SNR &lt; 23 dB\n   - 48 – When 23 dB &lt;= SNR &lt; 24 dB\n   - 49 – When 24 dB &lt;= SNR\n   - 127 – Not known or not detectable\n   - The index value of SNR can be converted to decibel with the following formula: Index – 24 = dB. For example, 1 – 24 = –23 dB and 47 – 24 = 23 dB.\n - &lt;cell_id&gt;\n   - String in hexadecimal format. 4-byte Evolved Terrestrial Radio Access Network (E-UTRAN) cell ID.\n - &lt;plmn&gt;\n   - String. Mobile Country Code (MCC) and Mobile Network Code (MNC) values.\n - &lt;phys_cell_id&gt;\n   - Integer, 0–503. Physical cell ID of evaluated LTE cell.\n - &lt;earfcn&gt;\n   - Integer. EARFCN of a cell where the EARFCN is as defined in *3GPP TS 36.101*.\n - &lt;band&gt;\n   - Integer, 1–88. See *3GPP 36.101*. \n   - 0 when current band information is not available.\n - &lt;tau_triggered&gt;\n   - 0 – User Equipment (UE) is registered on the evaluated cell. Therefore, Tracking Area Update (TAU) is not needed before sending user data.\n   - 1 – User Equipment (UE) is not registered on the evaluated cell. Therefore, the TAU procedure is initiated before sending user data.\n   - 255 – Not known.\n - &lt;ce_level&gt;\n   - 0 – CE Level 0. No repetitions or small number of repetitions.\n   - 1 – CE Level 1. Medium number of repetitions.\n   - 2 – CE Level 2. Large number of repetitions.\n   - 3 – CE Level 3. Very large number of repetitions (not supported).\n   - 255 – Invalid or not known.\n   - If `<rrc_state>` is 0, the CE level is estimated based on RSRP and network configuration.\n   - If `<rrc_state>` is 1, the CE level corresponds to the currently used CE level.\n - &lt;tx_power&gt;\n   - Integer, –45 to +23 dBm.\n   - The estimate of TX power depends on the RRC state in which the measurement is done.\n   - If `<rrc_state>` is 0, the value corresponds to the estimated TX power level of the first preamble transmission in (N)PRACH.\n   - If `<rrc_state>` is 1, the value corresponds to the latest physical data channel (N)PUSCH transmission power level.\n   - See *3GPP 36.101* and *3GPP 36.213*.\n - &lt;tx_repetitions&gt;\n   - Integer, 1–2048.\n   - The estimate of TX repetitions depends on the RRC state in which the measurement is done.\n   - If `<rrc_state>` is 0, the value corresponds to the initial preamble repetition level in (N)PRACH based on `<ce_level>` and network configuration.\n   - If `<rrc_state>` is 1, the value corresponds to the latest             physical data channel (N)PUSCH transmission repetition level.\n   - See *3GPP TS 36.331* and *3GPP TS 36.213*.\n - &lt;rx_repetitions&gt;\n   - Integer, 1–2048.\n   - The estimate of RX repetitions depends on the RRC state in which the measurement is done.\n   - If `<rrc_state>` is 0, Initial Random Access control channel (M/NPDCCH) reception repetition level based on `<ce_level>` and network configuration.\n   - If `<rrc_state>` is 1, the latest physical data channel (N)PDSCH reception repetition level.\n   - See *3GPP TS 36.331* and *3GPP TS 36.213*.\n - &lt;dl-pathloss&gt;\n   - Integer. Reduction in power density in dB.\n\n\nThe following command example requests the pre-evaluation of a connection:\n\n```\nAT%CONEVAL %CONEVAL: 0,1,5,8,2,14,\"011B0780”,\"26295\",7,1575,3,1,1,23,16,32,130 OK\n```\n\n"
      }
    }
  },
  "clac": {
    "title": "List all available AT commands +CLAC",
    "shortDesc": "The `+CLAC` command returns a list of all available AT commands.",
    "versions": ["v1.0.x", "v1.1.x", "v1.2.x", "v1.3.x", "pti_v1.1.x≥1"],
    "subCommands": {
      "set": {
        "title": "Set command",
        "shortDesc": "The set command returns a list of all available AT commands.",
        "ref": "Syntax:\n\n```\n+CLAC\n```\n\nResponse syntax:\n\n```\n<AT Command1>[<CR><LF><AT Command2>[...]]\n```\n\nThe following command example lists the supported AT commands:\n\n```\nAT+CLAC AT+CFUN AT+COPS ... OK\n```\n\n"
      }
    }
  },
  "cind": {
    "title": "Indicator control +CIND",
    "shortDesc": "The `+CIND` command sets indicator states.",
    "versions": ["v1.0.x", "v1.1.x", "v1.2.x", "v1.3.x"],
    "subCommands": {
      "test": {
        "title": "Test command",
        "shortDesc": "The test command returns supported indicator states.",
        "ref": "Response syntax:\n\n```\n+CIND: (<descr>,(list of supported <ind>s))[,(<descr>,(list of supported <ind>s))[,...]]\n```\n\nThe test command parameters and their defined values are the following:\n\n - \n   - \n - \n   - \n\n\nThe following command example reads the indicator states:\n\n```\nAT+CIND=? +CIND: (\"service\",(0,1)),(\"roam\",(0,1)),(\"message\",(0,1)) OK\n```\n\n"
      },
      "set": {
        "title": "Set command",
        "shortDesc": "The set command sets indicator states.",
        "ref": "Syntax:\n\n```\n+CIND=[<ind>[,<ind>[,...]]]\n```\n\nResponse syntax:\n\n```\n+CIND: <descr>,<value>\n```\n\nThe set command parameters and their defined values are the following:\n\n - &lt;ind&gt;\n   - Integer. 0 – Off. Other values are `<descr>`-specific.\n   - &quot;service&quot;: 1 – On\n   - &quot;roam&quot;: 1 – On\n   - &quot;message&quot;: 1 – On\n - &lt;descr&gt;\n   - &quot;service&quot; – Service availability\n   - &quot;roam&quot; – Roaming indicator\n   - &quot;message&quot; – Message received\n - &lt;value&gt;\n   - Integer. Values are `<descr>`-specific.\n   - &quot;service&quot;: 0 – Not registered, 1 – Registered\n   - &quot;roam&quot;: 0 – Not roaming, 1 – Roaming\n   - &quot;message&quot;: 1 – Message received\n\n\nThe following command example enables service and message indicators:\n\n```\nAT+CIND=1,0,1 OK\n```\n\nThe following notification example indicates that the device is in service:\n\n```\n+CIND: \"service\",1\n```\n\n"
      },
      "read": {
        "title": "Read command",
        "shortDesc": "The read command returns indicator states.",
        "ref": "Response syntax:\n\n```\n+CIND: <ind>[,<ind>[,...]]\n```\n\nThe read command parameters and their defined values are the following:\n\n - \n   - \n - \n   - \n\n\nThe following command example reads the indicator states:\n\n```\nAT+CIND? +CIND: 1,0,1 OK\n```\n\n"
      }
    }
  },
  "cgpiaf": {
    "title": "IP address format +CGPIAF",
    "shortDesc": "The `+CGPIAF` command returns information about IPv6 address format.",
    "versions": ["v1.0.x", "v1.1.x", "v1.2.x", "v1.3.x"],
    "subCommands": {
      "test": {
        "title": "Test command",
        "shortDesc": "The test command returns the supported IPv6 address formats.",
        "ref": "Response syntax:\n\n```\n+CGPIAF: (list of supported <IPv6_AddressFormat>s),(list of supported <IPv6_SubnetNotation>s),(list of supported <IPv6_LeadingZeros>s),(list of supported <IPv6_CompressZeros>s)\n```\n\nThe test command parameters and their defined values are the following:\n\n - &lt;IPv6_AddressFormat&gt;\n   - 1 – Use IPv6-like colon notation\n - &lt;IPv6_SubnetNotation&gt;\n   - 1 – Use / (forward slash) subnet prefix Classless Inter-domain Routing (CIDR) notation\n - &lt;IPv6_LeadingZeros&gt;\n   - 1 – Leading zeros are included\n - &lt;IPv6_CompressZeros&gt;\n   - 0 – No zero compression\n\n\nThe following command example reads the current IPv6 address format:\n\n```\nAT+CGPIAF=? +CGPIAF: (1),(1),(1),(0) OK\n```\n\n"
      },
      "set": {
        "title": "Set command ",
        "shortDesc": "The set command is not supported.",
        "ref": ""
      },
      "read": {
        "title": "Read command",
        "shortDesc": "The read command returns the IPv6 address format.",
        "ref": "Response syntax:\n\n```\n+CGPIAF: <IPv6_AddressFormat>,<IPv6_SubnetNotation>,<IPv6_LeadingZeros>,<IPv6_CompressZeros>\n```\n\nThe read command parameters and their defined values are the following:\n\n - &lt;IPv6_AddressFormat&gt;\n   - 1 – Use IPv6-like colon notation\n - &lt;IPv6_SubnetNotation&gt;\n   - 1 – Use / (forward slash) subnet prefix Classless Inter-domain Routing (CIDR) notation\n - &lt;IPv6_LeadingZeros&gt;\n   - 1 – Leading zeros are included\n - &lt;IPv6_CompressZeros&gt;\n   - 0 – No zero compression\n\n\nThe following command example reads the current IPv6 address format:\n\n```\nAT+CGPIAF? +CGPIAF: 1,1,1,0 OK\n```\n\n"
      }
    }
  },
  "cfun": {
    "title": "Functional mode +CFUN",
    "shortDesc": "The `+CFUN` command sets and reads the modem functional mode.",
    "versions": ["v1.0.x", "v1.1.x", "v1.2.x", "v1.3.x"],
    "subCommands": {
      "test": {
        "title": "Test command",
        "shortDesc": "The test command lists supported functional modes.",
        "ref": "Response syntax:\n\n```\n+CFUN: (list of supported <fun>s)\n```\n\nThe response parameters and their defined values are the following:\n\n - \n   - \n\n\nThe following command example returns the supported functional modes:\n\n```\nAT+CFUN=? +CFUN: (0,1,4,20,21,30,31,40,41,44) OK\n```\n\n"
      },
      "set": {
        "title": "Set command",
        "shortDesc": "The set command sets the functional mode to Minimum (Power OFF), Normal, or Offline mode (Flight mode). There is a specific mode for Flight mode with Universal Integrated Circuit Card (UICC) on. It is also possible to activate or deactivate LTE or Global Navigation Satellite System (GNSS) separately.",
        "ref": "[`%XSYSTEMMODE`](xsystemmode.dita#xsystemmode) should be used for enabling system modes. It is possible to activate enabled modes. The response to         activating a `+CFUN` mode is `ERROR` if `%XSYSTEMMODE` is not properly set.The response to changing to Normal mode can be `ERROR` if UICC activation has failed.Commanding the device to Power OFF or to Offline mode might take some time if signaling with the network is needed.Syntax: \n\n```\n+CFUN=<fun>\n```\n\nThe set command parameter and its defined values are the following:\n\n - &lt;fun&gt;\n   - 0 – Sets the device to minimum functionality. Disables both transmit and receive RF circuits and deactivates LTE and GNSS services.\n\n> *Note:*\n> A configuration made with an AT command can be stored to Non-volatile Memory (NVM) using `+CFUN=0` if the option is mentioned in the description of the command. This is useful if the command relates to a permanent hardware configuration               because it avoids the need to give the command every time in the beginning of the                   application.Active `%XPOFWARN` warning blocks the storing to NVM.`+CFUN=0` resets unsolicited notification requests.When commanding the device to power off, wait for `OK` to make sure that NVM has been updated.\n\n\n\n> *Note:*\n> `CFUN=0` causes writing to NVM. When using `CFUN=0`, take NVM wear into account.\n\n\n   - 1 – Sets the device to full functionality. Active modes depend on the `%XSYSTEMMODE` setting.\n   - 2 – Sets the device to receive only functionality. Can be used, for example, to pre-evaluate connections with [`%CONEVAL`](coneval.dita#coneval).\n   - 4 – Sets the device to flight mode. Disables both transmit and receive RF circuits and deactivates LTE and GNSS services.\n   - 20 – Deactivates LTE without shutting down GNSS services.\n   - 21 – Activates LTE without changing GNSS.\n   - 30 – Deactivates GNSS without shutting down LTE services.\n   - 31 – Activates GNSS without changing LTE.\n   - 40 – Deactivates UICC.\n   - 41 – Activates UICC.\n   - 44 – Sets the device to flight mode without shutting down UICC.\n\n\nIf LTE is enabled with `%XSYSTEMMODE`, registration is performed to LTE network with `CFUN=1` and `CFUN=21`. If GNSS is enabled with `%XSYSTEMMODE`, GNSS is activated and GNSS services are available with `CFUN=1`, `CFUN=2`, and `CFUN=31`.\n\n> *Note:*\n> \n> \n>  - `CFUN=41` is allowed only when LTE-M or Narrowband Internet of Things (NB-IoT) is enabled by `%XSYSTEMMODE`.\n>  - UICC initialization is started in modes `CFUN=1`, `CFUN=21`, and `CFUN=41`. [`%XSIM`](../access_uicc/xsim.dita#xsim) indications shall be followed for the UICC state.\n>  - Transition from modes `CFUN=1` and `CFUN=21` to mode `CFUN=2` is not supported.\n>  - The response for `CFUN=40` is `ERROR` if the modem has been activated with `CFUN=1` or `CFUN=21`.\n> \n> \n> \n\nThe following command example activates the modem Normal mode:\n\n```\nAT+CFUN=1 OK\n```\n\n"
      },
      "read": {
        "title": "Read command",
        "shortDesc": "The read command reads the current functional mode.",
        "ref": "Response syntax: \n\n```\n+CFUN: <fun>\n```\n\nThe read response parameter and its defined value are the following:\n\n - &lt;fun&gt;\n   - 0 – Power off and store. RF circuits are disabled by deactivating LTE and Global Navigation Satellite System (GNSS) services.\n   - 1 – Normal mode. The active mode is either LTE or GNSS, or both. Full functional mode. Active modes depend on [`%XSYSTEMMODE`](xsystemmode.dita#xsystemmode) setting.\n   - 2 – Receive only mode in active system mode. Active modes depend on `%XSYSTEMMODE` setting.\n   - 4 – Flight mode. RF circuits are disabled by deactivating LTE and GNSS services.\n\n\nThe following command example reads the current functional mode:\n\n```\nAT+CFUN? +CFUN: 1 OK\n```\n\n"
      }
    }
  },
  "cesq": {
    "title": "Extended signal quality +CESQ",
    "shortDesc": "The `+CESQ` command returns received signal quality parameters. This command issues a valid response only when the modem is    activated.",
    "versions": ["v1.0.x", "v1.1.x", "v1.2.x", "v1.3.x"],
    "subCommands": {
      "test": {
        "title": "Test command",
        "shortDesc": "The test command returns supported values as compound values.",
        "ref": "Response syntax:\n\n```\n+CESQ: (list of supported <rxlev>s),(list of supported <ber>s),(list of supported <rscp>s),(list of supported <ecno>s),(list of supported <rsrq>s),(list of supported <rsrp>s)\n```\n\nThe following command example returns supported values as compound values:\n\n```\nAT+CESQ=? +CESQ: (99),(99),(255),(255),(0-34,255),(0-97,255) OK\n```\n\n"
      },
      "set": {
        "title": "Set command",
        "shortDesc": "The set command returns received signal quality parameters.",
        "ref": "Syntax:\n\n```\n+CESQ\n```\n\nResponse syntax:\n\n```\n+CESQ: <rxlev>,<ber>,<rscp>,<ecno>,<rsrq>,<rsrp>\n```\n\nThe set command parameters and their defined values are the following:\n\n - &lt;rxlev&gt;\n   - 99 – Not known or not detectable\n - &lt;ber&gt;\n   - 99 – Not known or not detectable\n - &lt;rscp&gt;\n   - 255 – Not known or not detectable\n - &lt;ecno&gt;\n   - 255 – Not known or not detectable\n - &lt;rsrq&gt;\n   - 0 rsrq &lt; −19.5 dB\n   - 1 – When −19.5 dB ≤ RSRQ &lt; −19 dB\n   - 2 – When −19 dB ≤ RSRQ &lt; −18.5 dB\n   - ...\n   - 32 – When −4 dB ≤ RSRQ &lt; −3.5 dB\n   - 33 – When −3.5 dB ≤ RSRQ &lt; −3 dB\n   - 34 – When −3 dB ≤ RSRQ\n   - 255 – Not known or not detectable\n   - The index value of RSRQ can be converted to decibel with the following formula: Index x ½ – 19,5 = dB. For example, (32 x ½) – 19,5 = –3,5 dB.\n - &lt;rsrp&gt;\n   - 0 – RSRP &lt; −140 dBm\n   - 1 – When −140 dBm ≤ RSRP &lt; −139 dBm\n   - 2 – When −139 dBm ≤ RSRP &lt; −138 dBm\n   - ...\n   - 95 – When −46 dBm ≤ RSRP &lt; −45 dBm\n   - 96 – When −45 dBm ≤ RSRP &lt; −44 dBm\n   - 97 – When −44 dBm ≤ RSRP\n   - 255 – Not known or not detectable\n   - The index value of RSRP can be converted to decibel with the following formula: Index – 140 = dBm. For example, 95 – 140 = –45 dBm.\n\n\nThe following command example reads the current signal quality, mapped Reference Signal Received Quality (RSRQ) 31, and Certificate Authority (CA) 62:\n\n```\nAT+CESQ +CESQ: 99,99,255,255,31,62 OK\n```\n\n"
      }
    }
  },
  "cemode": {
    "title": "Mode of operation (CS/PS) +CEMODE",
    "shortDesc": "The `+CEMODE` command sets the device mode of operation.",
    "versions": ["v1.0.x", "v1.1.x", "v1.2.x", "v1.3.x"],
    "subCommands": {
      "test": {
        "title": "Test command",
        "shortDesc": "The test command lists the supported modes of operation.",
        "ref": "Response syntax:\n\n```\n+CEMODE: <mode>\n```\n\nThe test command parameter and its defined values are the following:\n\n - \n   - \n\n\nThe following command example returns the supported modes of operation:\n\n```\nAT+CEMODE=? +CEMODE: (0,2) OK\n```\n\n"
      },
      "set": {
        "title": "Set command",
        "shortDesc": "The set command sets the CS/PS Mode of Operation. The       `+CEMODE` command should be used only when the modem is not activated. The command configuration is stored to Non-volatile Memory (NVM) approximately every 48 hours and when the modem is powered off with the `+CFUN=0` command.",
        "ref": "Active `%XPOFWARN` warning blocks the storing to NVM.Syntax:\n\n```\n+CEMODE=[<mode>]\n```\n\nThe set command parameter and its defined values are the following:\n\n - &lt;mode&gt;\n   - 0 – PS mode 2 of operation\n   - 2 – CS/PS mode 2 of operation\n\n\nThe following command example sets the operating mode to PS mode 2:\n\n```\nAT+CEMODE=0 OK\n```\n\n"
      },
      "read": {
        "title": "Read command",
        "shortDesc": "The read command reads the current mode of operation.",
        "ref": "Response syntax:\n\n```\n+CEMODE: <mode>\n```\n\nThe read command parameter and its defined values are the following:\n\n - \n   - \n\n\nThe following command example reads the current operating mode:\n\n```\nAT+CEMODE? +CEMODE: 2 OK\n```\n\n"
      }
    }
  },
  "ceinfo": {
    "title": "Coverage enhancement mode notification +CEINFO",
    "shortDesc": "The `+CEINFO` command subscribes Coverage Enhancement (CE) notifications.",
    "versions": ["v1.2.x", "v1.3.x"],
    "subCommands": {
      "set": {
        "title": "Set command",
        "shortDesc": "The set command subscribes Coverage Enhancement (CE) notifications and reads current parameters.",
        "ref": "Syntax:\n\n```\n+CEINFO=<reporting>\n```\n\nNotification syntax:\n\n```\n+CEINFO: <reporting>,<CE_Enabled>,<UE_State>,<Downlink_Repetition_Factor>, <Uplink_Repetition_Factor>,<RSRP>,<CINR>\n```\n\n`<UE_State>` is not between double quotation marks.\n\n> *Note:*\n> The value corresponds to the last value that has been stored before the time of report. For example, when releasing an         RRC connection, the transition from connection to idle state and the next           `<UE_State>` being stored and reported can take several seconds.\n\n\n\n - +CME ERROR code\n   - 528 – Not allowed during active power off warning.\n\n\nThe set command parameters and their defined values are the following:\n\n - &lt;reporting&gt;\n   - 0 – Unsubscribe unsolicited notifications\n   - 1 – Subscribe unsolicited notifications\n - &lt;CE_Enabled&gt;\n   - 0 – Serving cell does not support CE mode A/B \n   - 1 – Serving cell supports CE mode A/B \n - &lt;UE_State&gt;\n   - User Equipment (UE) state at the time of the report.[](#ceinfo_set/uestate-fn)\n   - I – Idle\n   - R – RACH\n   - C – Connected\n - &lt;Downlink_Repetition_Factor&gt;\n   - Downlink repetition factor.\n   - If `<UE_State>` is Idle or RACH, it is set to mpdcch-NumRepetition according to the current radio condition (that is,               Certificate Authority (CA)) and prach-ParametersListCE-r13 in SIB2 if the access technology is LTE-M. It is set to npdcch-NumRepetitions according to the current radio condition and             NPRACH-Parameters-NB-r13 in SIB2-NB if the access technology is Narrowband Internet of Things (NB-IoT).\n   - If `<UE_State>` is Connected, it is set to mpdcch-NumRepetition for the radio bearer if the access technology is LTE-M. It is set to             npdcch-NumRepetitions for the radio bearer if the access technology is Narrowband Internet of Things (NB-IoT).\n - &lt;Uplink_Repetition_Factor&gt;\n   - Uplink repetition factor.\n   - If `<UE_State>` is Idle, it is set to numRepetitionPerPreambleAttempt accordig to the current radio condition.\n   - If `<UE_State>` is RACH, it is set to numRepetitionPerPreambleAttempt selected by UE.\n   - If `<UE_State>` is Connected, it is set to repetition number for PUSCH if the access technology is LTE-M. It is set to repetition number for NPUSCH if             the access technology is NB-IoT.\n - &lt;RSRP&gt;\n   - Current RSRP level at the time of the report.[](#ceinfo_set/uestate-fn) Numerical range in dBm.\n   - 255 – Not known or not detectable.\n - &lt;CINR&gt;\n   - Current CINR level at the time of the report[](#ceinfo_set/uestate-fn). Numerical range in dB.\n   - 127 – Not known or not detectable.\n\n\nThe following command example subscribes unsolicited CE notifications:\n\n```\nAT+CEINFO=1 OK \n```\n\nThe following is an example of an unsolicited CE notification:\n\n```\n+CEINFO: 1,1,C,5,3,-50,10\n```\n\n"
      },
      "read": {
        "title": "Read command",
        "shortDesc": "The read command requests Coverage Enhancement (CE) mode information.",
        "ref": "Response syntax:\n\n```\n+CEINFO: <Reporting>,<CE_Enabled>,<UE_State>,<Downlink_Repetition_Factor>, <Uplink_Repetition_Factor>,<RSRP>,<CINR>\n```\n\nThe following command example reads CE mode information:\n\n```\nAT+CEINFO? +CEINFO: 1,1,C,5,3,-50,10 OK\n```\n\n"
      }
    }
  },
  "cclk_nordic": {
    "title": "Proprietary clock %CCLK",
    "shortDesc": "The Nordic-proprietary `%CCLK` command sets the real-time clock of the device.",
    "versions": ["v1.1.x", "v1.2.x", "v1.3.x"],
    "subCommands": {
      "set": {
        "title": "Set command",
        "shortDesc": "The set command sets the current time and daylight saving time of the User Equipment (UE).",
        "ref": "Syntax:\n\n```\n%CCLK=<time>,<daylight_saving_time>\n```\n\nThe set command parameters and their defined values are the following:\n\n - &lt;time&gt;\n   - String. Current time in the format &quot;yy/MM/dd,hh:mm:ss±zz&quot;, where the characters, from left to right, indicate year, month, day, hour, minutes, seconds, and time zone. Time             zone indicates the difference, expressed in quarters of an hour, between the local time             and GMT (value range from −48 to +48 and 99 for &quot;not set&quot; or &quot;unknown&quot;).\n - &lt;daylight_saving_time&gt;\n   - 0 – No adjustment of daylight saving time\n   - 1 – +1 hour adjustment of daylight saving time\n   - 2 – +2 hours adjustment of daylight saving time\n\n\nThe following command example sets the real-time clock:\n\n```\nAT%CCLK=\"02/05/07,14:08:17+00\",2 OK\n```\n\n"
      },
      "read": {
        "title": "Read command",
        "shortDesc": "The read command reads the current time and daylight saving time.",
        "ref": "Response syntax:\n\n```\n%CCLK: <time>[,<daylight_saving_time>]\n```\n\nIf time is not received or set with the `%CCLK` command, the response is `ERROR`.\n\n> *Note:*\n> \n\nThe read command parameters and their defined values are the following:\n\n - \n   - \n - &lt;daylight_saving_time&gt;\n   - Optional. Present if received from the network or if the user has set it in `%CCLK`.\n   - 0 – No adjustment of daylight saving time\n   - 1 – +1 hour adjustment of daylight saving time\n   - 2 – +2 hours adjustment of daylight saving time\n\n\nThe following command example reads the current date, time, and daylight saving time:\n\n```\nAT%CCLK? %CCLK: \"02/05/07,14:08:17+00\",2 OK\n```\n\n"
      }
    }
  },
  "cclk": {
    "title": "Clock +CCLK",
    "shortDesc": "The `+CCLK` command sets the clock of the device.",
    "versions": ["v1.0.x", "v1.1.x", "v1.2.x", "v1.3.x"],
    "subCommands": {
      "read": {
        "title": "Read command",
        "shortDesc": "The read command reads the real-time clock.",
        "ref": "Response syntax:\n\n```\n+CCLK: <time>\n```\n\nIf time is not received or set with the `+CCLK` command, the response is `ERROR`.\n\n> *Note:*\n> The device clock updates are based on network time when available. The time can be requested using the read command, but not all networks provide the information,         nor can the highest accuracy requirements be guaranteed, either.\n\nThe read response parameters and their defined values are the following:\n\n - \n   - \n\n\nThe following command example reads the real-time clock:\n\n```\nAT+CCLK? +CCLK: \"18/12/06,22:10:00+08\" OK\n```\n\n"
      }
    }
  },
  "xsim": {
    "title": "UICC state notification %XSIM",
    "shortDesc": "The Nordic-proprietary `%XSIM` command subscribes Universal Integrated Circuit Card (UICC) state notifications.",
    "versions": ["v1.0.x", "v1.1.x", "v1.2.x", "v1.3.x"],
    "subCommands": {
      "set": {
        "title": "Set command",
        "shortDesc": "The set command subscribes Universal Integrated Circuit Card (UICC) state notifications.",
        "ref": "Syntax:\n\n```\n%XSIM=<n>\n```\n\nNotification syntax:\n\n```\n%XSIM: <state>[,<cause>]\n```\n\nThe set command parameters and their defined values are the following:\n\n - &lt;n&gt;\n   - 0 – Unsubscribe UICC notifications\n   - 1 – Subscribe UICC notifications\n - &lt;state&gt;\n   - 0 – UICC not initialized\n   - 1 – UICC initialization OK\n - &lt;cause&gt;\n   - &lt;cause&gt; is included if it has a non-zero value.\n   - 0 – No specific cause (&lt;cause&gt; omitted)\n   - 1 – Personal Identification Number (PIN) required\n   - 2 – PIN2 required\n   - 3 – Personal Unblocking Key (PUK) required (PIN blocked)\n   - 4 – PUK2 required (PIN2 blocked)\n   - 5 – PUK blocked\n   - 6 – PUK2 blocked\n   - 7 – Device personalization blocked\n   - 8 – International Mobile (Station) Equipment Identity (IMEI) lock blocked\n   - 9 – Universal Subscriber Identity Module (USIM) card failure\n   - 10 – USIM card changed\n   - 11 – USIM profile changed\n\n\nThe following command example subscribes UICC state notifications:\n\n```\nAT%XSIM=1 OK\n```\n\nThe following notification example indicates that UICC is not initialized:\n\n```\n%XSIM: 0\n```\n\n<!-- p>The following notification example indicates that a <abbreviated-form keyref=\"pin\"/> code\n        is required:</p --><!-- codeblock>%XSIM: 0,1</codeblock --><!-- p>The following notification example indicates an error with card connection or content:</p --><!-- codeblock>%XSIM: 0,9</codeblock -->The following notification example indicates that UICC initialization is completed:\n\n```\n%XSIM: 1\n```\n\n"
      },
      "read": {
        "title": "Read command",
        "shortDesc": "The read command reads the Universal Integrated Circuit Card (UICC) state.",
        "ref": "Response syntax:\n\n```\n%XSIM: <state>[,&lt;cause&gt;]\n```\n\nThe read command parameter and its defined values are the following:\n\n - &lt;state&gt;\n   - 0 – UICC not initialized\n   - 1 – UICC initialization OK\n - &lt;cause&gt;\n   - &lt;cause&gt; is included if it has a non-zero value.\n   - 0 – No specific cause (&lt;cause&gt; omitted)\n   - 1 – Personal Identification Number (PIN) required\n   - 2 – PIN2 required\n   - 3 – Personal Unblocking Key (PUK) required (PIN blocked)\n   - 4 – PUK2 required (PIN2 blocked)\n   - 5 – PUK blocked\n   - 6 – PUK2 blocked\n   - 7 – Device personalization blocked\n   - 8 – International Mobile (Station) Equipment Identity (IMEI) lock blocked\n   - 9 – Universal Subscriber Identity Module (USIM) card failure\n   - 10 – USIM card changed\n   - 11 – USIM profile changed\n   - 12 – GNSS mode only (UICC not initialized)\n\n\nThe following command example reads the UICC state. The response indicates that UICC initialization is completed:\n\n```\nAT%XSIM? %XSIM: 1 OK\n```\n\nThe following command example reads the UICC state. The response indicates that a Personal Identification Number (PIN) code is required:\n\n```\nAT%XSIM? %XSIM: 0,1 OK\n```\n\n"
      }
    }
  },
  "xiccid": {
    "title": "Request ICCID %XICCID",
    "shortDesc": "The Nordic-proprietary `%XICCID` command reads the Integrated Circuit Card Identifier (ICCID) from the Universal Subscriber Identity Module (USIM) card.",
    "versions": ["v1.1.x≥3", "v1.2.x", "v1.3.x"],
    "subCommands": {
      "set": {
        "title": "Set command",
        "shortDesc": "The set command reads the Integrated Circuit Card Identifier (ICCID) from the Universal Subscriber Identity Module (USIM) card.",
        "ref": "Syntax:\n\n```\n%XICCID\n```\n\nResponse syntax: \n\n```\n%XICCID: <ICCID>\n```\n\nThe response parameter and its defined value are the following:\n\n - &lt;ICCID&gt;\n   - String without double quotes. ICCID from the USIM card.\n\n\nThe following command example requests the ICCID of the USIM card:\n\n```\nAT%XICCID %XICCID: 8901234567012345678F OK\n```\n\n"
      }
    }
  },
  "usatinfo": {
    "title": "USAT REFRESH and BIP state information %USATINFO",
    "shortDesc": "The Nordic-proprietary `%USATINFO` command requests the statuses of the REFRESH command and Bearer Independent Protocol (BIP) channel.",
    "versions": ["v1.2.x≥7"],
    "subCommands": {
      "set": {
        "title": "Set command",
        "shortDesc": "The set command provides information about the current state of the REFRESH command and Bearer Independent Protocol (BIP) channel.",
        "ref": "Syntax:\n\n```\n%USATINFO\n```\n\nResponse syntax:\n\n```\n%USATINFO: <refresh_state>,<bip_state>\n```\n\nThe set command parameters and their defined values are the following:\n\n - &lt;refresh_state&gt;\n   - Integer.\n   - 0 – REFRESH command handling is not ongoing.\n   - 1 – REFRESH command handling is ongoing.\n - &lt;bip_state&gt;\n   - Integer.\n   - 0 – BIP channel is closed. No ongoing activity.\n   - 1 – BIP channel is connecting to server.\n   - 2 – BIP channel is connected. Universal Integrated Circuit Card (UICC) can perform data transfer.\n\n\nThe following command example gets USAT information when BIP or REFRESH activity is not ongoing:\n\n```\nAT%USATINFO %USATINFO: 0,0 OK \n```\n\nThe following command example gets USAT information when REFRESH is ongoing:\n\n```\nAT%USATINFO %USATINFO: 1,0 OK \n```\n\nThe following command example receives USAT information when BIP channel is connected to, for example, a SIM OTA server:\n\n```\nAT%USATINFO %USATINFO: 0,2 OK\n```\n\n"
      }
    }
  },
  "usatev": {
    "title": "USAT event notification %USATEV",
    "shortDesc": "The Nordic-proprietary `%USATEV` command subscribes Universal Subscriber Identity Module Application Toolkit (USAT) event notifications.",
    "versions": ["v1.2.x≥7"],
    "subCommands": {
      "set": {
        "title": "Set command",
        "shortDesc": "The set command subscribes Universal Subscriber Identity Module Application Toolkit (USAT) event notifications. The unsolicited result code is `%USATEV: XXX`.",
        "ref": "The application can use the notifications to get information on USAT events. The application can ensure Universal Integrated Circuit Card (UICC) data transmission by not deactivating the modem when the Bearer Independent Protocol (BIP) channel is open.Syntax:\n\n```\n%USATEV=<subscribe>[,<event_mask>]\n```\n\nThe set command parameters and their defined values are the following:\n\n - &lt;subscribe&gt;\n   - 0 – Unsubscribe and disable USAT event notifications.\n   - 1 – Subscribe and enable USAT event notifications.\n - &lt;event_mask&gt;\n   - String. Bit string where LSB is BIP events. Leading zeros can be omitted. Maximum length 3 characters. If the parameter is omitted, notifications of all events are             subscribed.\n   - Allows to select a subset of USAT events to be reported. Can be used only in a subscribe command (`<subscribe>=1`). One or more event categories can be selected by setting bits to `1`. If the `<event_mask>` parameter is omitted, all events are enabled (same as entering &lt;event_mask&gt; &quot;111&quot;).\n   - Bit 1 – BIP events.\n   - Bit 2 – REFRESH events.\n   - Bit 3 – SMS delivery to or from UICC.\n - &lt;refresh_type&gt;\n   - REFRESH mode received from UICC.\n   - Valid range 0–10.\n   - Values as specified in *ETSI TS 102 223 Ch. 8.6*.\n - &lt;refresh_result&gt;\n   - Result of REFRESH command.\n   - 0 – REFRESH performed successfully.\n   - 1 – REFRESH rejected, for example, device is busy on data transfer.\n   - 2 – REFRESH failed.\n\n\nThe notification syntax descriptions are as follows:SMS has been received and delivered to UICC by using envelope command SMS-PP data download:\n\n```\n%USATEV: SMS Receive\n```\n\nSending SMS requested by UICC by using proactive command SEND SHORT MESSAGE:\n\n```\n%USATEV: SMS Send\n```\n\nBIP channel connect process has been started as requested by UICC by using proactive command OPEN CHANNEL:\n\n```\n%USATEV: BIP Connecting\n```\n\nBIP channel connect process has been finished successfully, providing the UICC access to, for example, SIM Over-the-Air (OTA) server:\n\n```\n%USATEV: BIP Connected\n```\n\nBIP channel connection attempt failed or the channel has been closed by UICC by using proactive command CLOSE CHANNEL:\n\n```\n%USATEV: BIP Closed\n```\n\nProactive command REFRESH has been received from UICC indicating that UICC content has been changed:\n\n```\n%USATEV: REFRESH Requested <refresh_type>\n```\n\nREFRESH command is completed with result indicated in `<refresh_result>`:\n\n```\n%USATEV: REFRESH End <refresh_result>\n```\n\nThe following command example subscribes notifications of all available USAT events:\n\n```\nAT%USATEV=1 OK \n```\n\nThe following command example subscribes notifications of BIP channel related USAT events only:\n\n```\nAT%USATEV=1,\"001\" OK \n```\n\nThe following command example subscribes notifications of BIP channel and SMS related USAT events only:\n\n```\nAT%USATEV=1,\"101\" OK \n```\n\nThe following command example unsubscribes all USAT event notifications:\n\n```\nAT%USATEV=0 OK\n```\n\n"
      }
    }
  },
  "ssrda": {
    "title": "UICC suspend and deactivate control +SSRDA",
    "shortDesc": "The `+SSRDA` command controls the suspend and resume UICC and deactivate and activate UICC capability in the device.",
    "versions": ["v1.3.x≥2"],
    "subCommands": {
      "set": {
        "title": "Set command",
        "shortDesc": "The set command sets the parameters to enable or disable the suspend and resume Universal Integrated Circuit Card (UICC) and deactivate and activate UICC capability in the device. When either or both features are enabled, the command allows for a delay in executing a suspend     and deactivate of the UICC when the conditions to allow start of suspend and deactivate are     met.",
        "ref": "UICC suspension and deactivation are enabled with no delay by default. UICC can be suspended or deactivated when allowed by conditions specified in *ETSI TS 102 221* and *3GPP TS 31.102, 5.1.10 (PSM)* or *3GPP TS 31.102, 5.1.11* (Extended Discontinuous Reception (eDRX)).\n\n> *Note:*\n> In an AT&amp;T subscription, the minimum sleep time for suspend and deactivate is two minutes.\n\nSyntax:\n\n```\n+SSRDA=<sus>,<deac>,<del>\n```\n\nThe set command parameters and their defined values are the following:\n\n - &lt;sus&gt;\n   - Controls suspend and resume UICC capability.\n   - 0 – Disable suspend and resume UICC.\n   - 1 – Enable suspend and resume UICC.\n - &lt;deac&gt;\n   - Controls deactivate and activate UICC capability.\n   - 0 – Disable deactivate and activate UICC.\n   - 1 – Enable deactivate and activate UICC.\n - &lt;del&gt;\n   - Delay in executing a suspend or deactivate of the UICC upon meeting the conditions to allow start of suspend or deactivate in decimal format.\n   - 0–10 seconds.\n\n\nThe following command example enables UICC suspension and deactivation functionality with no delay after meeting conditions to start using the default parameters:\n\n```\nAT+SSRDA=1,1,0 OK \n```\n\nThe following command example enables UICC suspension with five seconds delay after meeting conditions to start suspension and disables UICC deactivation:\n\n```\nAT+SSRDA=1,0,5 OK \n```\n\nThe following command example disables UICC suspension and enables UICC deactivation with ten seconds delay:\n\n```\nAT+SSRDA=0,1,10 OK\n```\n\n"
      },
      "read": {
        "title": "Read command",
        "shortDesc": "The read command returns the current parameters for the Universal Integrated Circuit Card (UICC) suspend and deactivate capability. If the set command has not been executed, the default parameters are returned with both features enabled and no delay.",
        "ref": "Response syntax:\n\n```\n+SSRDA: <sus>,<deac>,<del>\n```\n\nThe read command parameter and its defined values are the following:\n\n - &lt;sus&gt;\n   - 0 – Suspend and resume UICC disabled.\n   - 1 – Suspend and resume UICC enabled.\n - &lt;deac&gt;\n   - 0 – Deactivate and activate UICC disabled.\n   - 1 – Deactivate and activate UICC enabled.\n - &lt;del&gt;\n   - Delay in executing a suspend or deactivate of the UICC upon meeting the conditions to allow start of suspend or deactivate in decimal format.\n   - 0–10 seconds.\n\n\nThe following command example reads the parameters when UICC suspension and deactivation are enabled and there is no delay, which are the default parameters:\n\n```\nAT+SSRDA? +SSRDA: 1,1,0 OK \n```\n\nThe following command example reads the configuration when UICC suspension is disabled and deactivation is enabled with ten seconds delay:\n\n```\nAT+SSRDA? +SSRDA: 0,1,10 OK\n```\n\n"
      }
    }
  },
  "csus": {
    "title": "Selecting UICC slot %CSUS",
    "shortDesc": "The Nordic-proprietary `%CSUS` command is used to select the Universal Integrated Circuit Card (UICC) slot to be used by the modem.",
    "versions": ["v1.3.x≥4"],
    "subCommands": {
      "test": {
        "title": "Test command",
        "shortDesc": "The test command returns a list of supported Universal Integrated Circuit Card (UICC) slot numbers. The supported UICC slots depend on the available Soft SIM solutions in the modem     firmware.",
        "ref": "Response syntax: \n\n```\n%CSUS: <slot1>[,<slot2>...]\n```\n\nThe test command parameter and its defined values are the following:\n\n - \n   - \n\n\nThe following command example returns a list of supported slot values when slots 0 and 2 are supported:\n\n```\nAT%CSUS=? %CSUS: 0,2 OK \n```\n\n"
      },
      "set": {
        "title": "Set command",
        "shortDesc": "The set command is used to select the Universal Integrated Circuit Card (UICC) slot to be used by the modem.",
        "ref": "Syntax:\n\n```\n%CSUS=<slot>\n```\n\nThe set command parameter and its defined values are the following: \n\n - &lt;slot&gt;\n   - 0 – Physical UICC slot 1 (default)\n   - 1 – Reserved\n   - 2 – Virtual iUICC\n   - 3 – Reserved\n\n\nThe following command example selects virtual iUICC slot:\n\n```\nAT%CSUS=2 OK \n```\n\nThe following command example selects physical UICC slot 1:\n\n```\nAT%CSUS=0 OK\n```\n\n"
      },
      "read": {
        "title": "Read command",
        "shortDesc": "The read command returns the currently selected Universal Integrated Circuit Card (UICC) slot.",
        "ref": "Response syntax:\n\n```\n%CSUS: <slot>\n```\n\nThe read command parameter and its defined values are the following:\n\n - \n   - \n\n\nThe following command example reads the slot when virtual iUICC is selected:\n\n```\nAT%CSUS? %CSUS: 2 OK \n```\n\nThe following command example reads the slot when physical UICC slot 1 is selected:\n\n```\nAT%CSUS? %CSUS: 0 OK\n```\n\n"
      }
    }
  },
  "csim": {
    "title": "Generic SIM access +CSIM",
    "shortDesc": "The `+CSIM` command transmits a command to the Subscriber Identity Module (SIM).",
    "versions": ["v1.0.x", "v1.1.x", "v1.2.x", "v1.3.x"],
    "subCommands": {
      "set": {
        "title": "Set command",
        "shortDesc": "The set command transmits a command to the Subscriber Identity Module (SIM).",
        "ref": "Syntax:\n\n```\n+CSIM=<length>,<command>\n```\n\nResponse syntax:\n\n```\n+CSIM: <length>,<response>\n```\n\nThe set command parameters and their defined values are the following:\n\n - &lt;length&gt;\n   - Integer. The number of hexadecimal characters.\n - &lt;command&gt;\n   - The command passed to the SIM in hexadecimal format. Two characters per byte. Contains CLA, INS, P1, P2, and optionally Lc, Data, and Le bytes according to the command               Application Protocol Data Unit (APDU) structure specification in *ETSI TS 102 221, Ch. 10.1*.\n - &lt;response&gt;\n   - The response from the SIM in hexadecimal format. Two characters per byte. Contains optional data bytes and SW1, SW2 according to the response APDU structure specification             in *ETSI TS 102 221, Ch. 10.2.*\n\n\nThe following command example performs a `MANAGE CHANNEL` command to open a logical channel. The SIM card returns channel number `01` and success status `9000`:\n\n```\nAT+CSIM=10,\"0070000001\" +CSIM: 6,\"019000\" OK\n```\n\n"
      }
    }
  },
  "crsm": {
    "title": "Restricted SIM access +CRSM",
    "shortDesc": "The `+CRSM` command transmits restricted commands to Subscriber Identity Module (SIM).",
    "versions": ["v1.0.x", "v1.1.x", "v1.2.x", "v1.3.x"],
    "subCommands": {
      "set": {
        "title": "Set command",
        "shortDesc": "The set command transmits restricted commands to the Subscriber Identity Module (SIM).",
        "ref": "Syntax:\n\n```\n+CRSM=<command>[,<fileid>[,<P1>,<P2>,<P3>[,<data>[,<pathid>]]]]\n```\n\nResponse syntax:\n\n```\n+CRSM: <sw1>,<sw2>[,<response>]\n```\n\nThe set command parameters and their defined values are the following:\n\n - &lt;command&gt;\n   - Integer\n   - 176 – READ BINARY\n   - 178 – READ RECORD\n   - 192 – GET RESPONSE\n   - 214 – UPDATE BINARY\n   - 220 – UPDATE RECORD\n   - 242 – STATUS\n   - 203 – RETRIEVE DATA\n   - 219 – SET DATA\n - &lt;fileid&gt;\n   - Integer. Identifier of an elementary data file on SIM. Mandatory for every command except STATUS. The range of valid file identifiers depends on the actual SIM and is             defined in *3GPP TS 51.011*. Optional files may not be present at all.\n - &lt;P1&gt;, &lt;P2&gt;, &lt;P3&gt;\n   - Integer. Parameters passed on by the Mobile Termination (MT) to the SIM. These parameters are mandatory for every command, except GET RESPONSE and STATUS. The values             are described in *3GPP TS 51.011*.\n - &lt;data&gt;\n   - String in hexadecimal format. Information that shall be written to the SIM.\n - &lt;pathid&gt;\n   - String in hexadecimal format. Contains the path of an elementary file on the SIM/Universal Integrated Circuit Card (UICC) (for example, &quot;7F205F70&quot; in SIM and UICC case). The `<pathid>` shall be used only in the mode &quot;select by path from MF&quot; as defined in *ETSI TS 102 221*.\n - &lt;sw1&gt;, &lt;sw2&gt;\n   - Integer. Information from the SIM about command execution. These parameters are delivered to the Terminal Equipment (TE) in both cases, on successful or failed command execution.\n - &lt;response&gt;\n   - String in hexadecimal format. Issued once a command is successfully completed. STATUS and GET RESPONSE return data which provides information about the current elementary             data field. This information includes file type and size (see *3GPP TS 51.011*). After READ BINARY, READ RECORD, or RETRIEVE DATA command, the requested data is returned. `<response>` is not returned after a successful UPDATE BINARY, UPDATE RECORD, or SET DATA command.\n\n\nThe following command example reads the forbidden Public Land Mobile Network (PLMN) list:\n\n```\nAT+CRSM=176,28539,0,0,12 +CRSM: 144,0,\"64F01064F040FFFFFFFFFFFF\" OK\n```\n\n"
      }
    }
  },
  "cnum": {
    "title": "Subscriber number +CNUM",
    "shortDesc": "The `+CNUM` command returns the subscriber Mobile Station International Subscriber Directory Number (MSISDN).",
    "versions": ["v1.0.x", "v1.1.x", "v1.2.x", "v1.3.x"],
    "subCommands": {
      "set": {
        "title": "Set command",
        "shortDesc": "The set command returns the subscriber Mobile Station International Subscriber Directory Number (MSISDN).",
        "ref": "Syntax:\n\n```\n+CNUM\n```\n\nResponse syntax:\n\n```\n+CNUM: ,<number1>,<type1>\n```\n\nAn `ERROR` response is returned if MSISDN is not available on Subscriber Identity Module (SIM) card or if SIM card is not initialized.The set command parameters and their defined values are the following:\n\n - &lt;numberx&gt;\n   - String. Phone number of format specified by `<typex>`.\n - &lt;typex&gt;\n   - Integer. Type of address octet (see *3GPP TS 24.008, subclause 10.5.4.7*).\n\n\nThe following command example reads the subscriber number stored in the SIM:\n\n```\nAT+CNUM +CNUM: ,\"+1234567891234\",145 OK\n```\n\n"
      }
    }
  },
  "cimi": {
    "title": "Request IMSI +CIMI",
    "shortDesc": "The `+CIMI` command reads the International Mobile Subscriber Identity (IMSI) from the Universal Subscriber Identity Module (USIM) card.",
    "versions": ["v1.0.x", "v1.1.x", "v1.2.x", "v1.3.x"],
    "subCommands": {
      "set": {
        "title": "Set command",
        "shortDesc": "The set command reads the International Mobile Subscriber Identity (IMSI) from the Subscriber Identity Module (SIM) card.",
        "ref": "Syntax:\n\n```\n+CIMI\n```\n\nResponse syntax: \n\n```\n<IMSI>\n```\n\nThe response parameter and its defined value are the following:\n\n - &lt;IMSI&gt;\n   - String without double quotes. IMSI.\n\n\n\n\n> *Note:*\n> `ERROR` is returned if IMSI is not available.\n\nThe following command example reads the IMSI string:\n\n```\nAT+CIMI 284011234567890 OK\n```\n\n"
      }
    }
  },
  "cgla": {
    "title": "Generic UICC access through logical channel +CGLA",
    "shortDesc": "The `+CGLA` command transmits a command to the Universal Integrated Circuit Card (UICC) through an opened logical channel.",
    "versions": ["v1.3.x≥1"],
    "subCommands": {
      "set": {
        "title": "Set command",
        "shortDesc": "The set command transmits a command to a selected Universal Integrated Circuit Card (UICC) using an opened logical channel. The UICC response is sent back to the Terminal Adapter (TA) as it is.",
        "ref": "The command allows direct control of the currently selected UICC by a distant application on the Terminal Equipment (TE). The TE processes the UICC information.\n\n> *Note:*\n> Executing a Run GSM Algorithm command or an Authenticate command from the TE using the `+CGLA` command is not supported.\n\nSyntax:\n\n```\n+CGLA=<sessionid>,<length>,<command>\n```\n\nResponse syntax:\n\n```\n+CGLA: <length>,<response>\n```\n\nThe set command parameters and their defined values are the following:\n\n - \n   - \n - &lt;length&gt;\n   - Integer. Number of hexadecimal characters.\n - \n   - \n - \n   - \n\n\nThe following command example is the Status command that returns the currently selected AID on the channel:\n\n```\nAT+CGLA=2,10,\"80F2000100\" +CGLA: 32,\"840CA0000000871004FF49FF05899000\" OK \n```\n\nThe response is DF name TLV-object (tag, length, AID) + SW1, SW2 (&apos;9000&apos;)."
      }
    }
  },
  "ccho": {
    "title": "Open logical channel +CCHO",
    "shortDesc": "The `+CCHO` command opens a new logical channel in the currently selected Universal Integrated Circuit Card (UICC).",
    "versions": ["v1.3.x≥1"],
    "subCommands": {
      "set": {
        "title": "Set command",
        "shortDesc": "The set command causes the currently selected Universal Integrated Circuit Card (UICC) to open a new logical channel. The UICC selects the application identified by the Dedicated File (DF) name that is received with this command and returns a session ID as a response.",
        "ref": "Syntax:\n\n```\n+CCHO=<dfname>\n```\n\nResponse syntax:\n\n```\n+CCHO: <sessionid>\n```\n\nThe set command parameters and their defined values are the following:\n\n - &lt;dfname&gt;\n   - 1–16 bytes. Application selected in the UICC referenced by a DF name.\n - &lt;sessionid&gt;\n   - Integer.\n   - Session ID used to target a specific application on a smart card, such as Universal Subscriber Identity Module (USIM), using the opened logical channel.\n\n\nThe following command example opens a logical channel and selects an IP Multimedia Services Identity Module (ISIM) application in the GSMA Generic eUICC Test Profile:\n\n```\nAT+CCHO=\"A0000000871004FF49FF0589\" +CCHO: 2 OK\n```\n\n"
      }
    }
  },
  "cchc": {
    "title": "Close logical channel +CCHC",
    "shortDesc": "The `+CCHC` command closes a previously opened logical channel in the currently selected Universal Integrated Circuit Card (UICC).",
    "versions": ["v1.3.x≥1"],
    "subCommands": {
      "set": {
        "title": "Set command",
        "shortDesc": "The set command closes a communication session with the active Universal Integrated Circuit Card (UICC). The UICC closes the logical channel when it receives the command.",
        "ref": "Syntax:\n\n```\n+CCHC=<sessionid> \n```\n\nThe set command parameter and its defined values are the following:\n\n - \n   - \n\n\nThe following command example closes a previously opened logical channel:\n\n```\nAT+CCHC=2 OK\n```\n\n"
      }
    }
  },
  "access_uicc": {
    "title": "UICC access commands",
    "shortDesc": "Universal Integrated Circuit Card (UICC) access commands can be used to access UICC and receive notifications of the UICC state.",
    "versions": [],
    "subCommands": {}
  }
}
