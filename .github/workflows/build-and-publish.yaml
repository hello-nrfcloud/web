name: Build and Release

on:
  push:
    branches:
      - saga
  workflow_dispatch:

permissions:
  id-token: write
  contents: write
  issues: write

jobs:
  main:
    runs-on: ubuntu-latest

    environment: production

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v3
        with:
          node-version: "18.x"

      - name: Keep npm cache around to speed up installs
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.OS }}-build-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        run: npm ci --no-audit

      - name: Run tests
        run: npm test

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      - name: Run end to end tests
        run: npm run test:e2e

      # This generates a string containing the current date which is used in
      # in artifact names to simpify locating and distinguishing them once they have
      # been downloaded
      - name: Generate date string
        id: dateAsString
        run: echo "dateAsString=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_ENV

      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: e2e-test-results-${{ env.dateAsString }}-${{ github.sha }}
          path: |
            test-results

      - name: Get current release
        run:
          echo "currentRelease=$(git describe --tags --abbrev=0)" >> $GITHUB_ENV

      - name: Determine next release version
        uses: nordicsemiconductor/cloud-get-next-version-action@saga
        id: version
        with:
          branch: saga
          defaultVersion: "${{ env.currentRelease }}-${{ github.sha }}"

      - name: Build
        env:
          VERSION: ${{ steps.version.outputs.nextRelease }}
          REGISTRY_ENDPOINT: ${{ vars.REGISTRY_ENDPOINT }}
          DOMAIN_NAME: ${{ vars.DOMAIN_NAME }}
        run: |
          npm run build
          cp -L -r ./static ./build/client

      - name: Cache AWS CLI (Linux)
        id: cache-aws-cli
        uses: actions/cache@v3
        with:
          path: aws/
          key: cache-aws-cli

      - name: Install AWS
        if: steps.cache-aws-cli.outputs.cache-hit != 'true'
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip -q awscliv2.zip
          sudo ./aws/install --update

      - name: configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          role-session-name: gh-actions-publish
          aws-region: ${{ vars.AWS_REGION }}

      - name: Get bucket name
        run:
          echo "BUCKET_NAME=`aws cloudformation describe-stacks --stack-name ${{
          vars.STACK_NAME }} | jq -r '.Stacks[0].Outputs[] | select(.OutputKey
          == "bucketName") | .OutputValue' | sed -E 's/\/$//g'`" >> $GITHUB_ENV

      - name: Upload build
        run: |
          aws s3 sync build/client s3://${{ env.BUCKET_NAME }}

      - name: Set cache metadata
        run: |
          # All files to 1 year
          aws s3 cp s3://${{ env.BUCKET_NAME }} s3://${{ env.BUCKET_NAME }} --recursive --cache-control max-age=30758400,public
          # HTML files to 10 minutes
          aws s3 cp s3://${{ env.BUCKET_NAME }} s3://${{ env.BUCKET_NAME }} --exclude "*" --include "*.html" --recursive --cache-control max-age=600,public

      - name:
          Trigger CloudFront cache invalidation for index.html (all other files
          have unique names)
        run: |
          CLOUDFRONT_DISTRIBUTION=`aws cloudformation describe-stacks --stack-name ${{ vars.STACK_NAME }} | jq -r '.Stacks[0].Outputs[] | select(.OutputKey == "distributionId") | .OutputValue' | sed -E 's/\/$//g'`
          aws cloudfront create-invalidation --distribution-id ${CLOUDFRONT_DISTRIBUTION} --paths /,/index.html

      - name: Semantic release
        continue-on-error: true
        run: npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
